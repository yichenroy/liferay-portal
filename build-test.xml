<?xml version="1.0"?>

<project basedir="." default="test" name="portal-test" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="build.xml" />

	<if>
		<and>
			<isset property="test.base.dir.name" />
			<available file="${test.base.dir.name}/test.properties" />
		</and>
		<then>
			<property file="${test.base.dir.name}/test.${user.name}.properties" />
			<property file="${test.base.dir.name}/test.${env.COMPUTERNAME}.properties" />
			<property file="${test.base.dir.name}/test.${env.HOST}.properties" />
			<property file="${test.base.dir.name}/test.${env.HOSTNAME}.properties" />
			<property file="${test.base.dir.name}/test.properties" />
		</then>
	</if>

	<property file="${project.dir}/test.profile-dxp.properties" />
	<property file="${project.dir}/test.generated.properties" />
	<property file="${project.dir}/test.${user.name}.properties" />
	<property file="${project.dir}/test.${env.COMPUTERNAME}.properties" />
	<property file="${project.dir}/test.${env.HOST}.properties" />
	<property file="${project.dir}/test.${env.HOSTNAME}.properties" />
	<property file="${project.dir}/test.properties" />

	<propertycopy from="app.server.${app.server.type}.start.executable" name="app.server.start.executable" />
	<propertycopy from="app.server.${app.server.type}.start.executable.arg.line" name="app.server.start.executable.arg.line" />

	<propertycopy from="app.server.${app.server.type}.stop.executable" name="app.server.stop.executable" />
	<propertycopy from="app.server.${app.server.type}.stop.executable.arg.line" name="app.server.stop.executable.arg.line" />

	<propertycopy from="browser.${browser.type}.version" name="browser.version" />

	<propertycopy from="java.jdk.${java.jdk.architecture}.version" name="java.jdk.version" />

	<propertycopy from="operating.system.${operating.system.type}.version" name="operating.system.version" />

	<property location="${project.dir}/tools/putty/plink.exe" name="plink.executable" />
	<property location="${project.dir}/tools/putty/pscp.exe" name="pscp.executable" />

	<macrodef name="apply-portal-ext-properties">
		<sequential>
			<if>
				<and>
					<contains string="${app.server.portal.dir}" substring="liferay-portal.war" />
					<not>
						<equals arg1="${app.server.type}" arg2="websphere" />
					</not>
				</and>
				<then>
					<property name="test.build.liferay.portal.zip.file.name" value="${app.server.portal.dir}" />
				</then>
			</if>

			<if>
				<isset property="test.build.liferay.portal.zip.file.name" />
				<then>
					<tstamp>
						<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
					</tstamp>

					<mkdir dir="${tstamp.value}" />

					<unzip
						dest="${tstamp.value}"
						src="${test.build.liferay.portal.zip.file.name}"
					/>

					<copy
						file="portal-impl/src/portal-ext.properties"
						overwrite="true"
						tofile="${tstamp.value}/WEB-INF/classes/portal-ext.properties"
					/>

					<echo append="true" file="${tstamp.value}/WEB-INF/classes/portal-ext.properties">

module.framework.properties.osgi.console=11312</echo>

					<print-file file.name="${tstamp.value}/WEB-INF/classes/portal-ext.properties" />

					<delete file="${test.build.liferay.portal.zip.file.name}" />

					<zip
						basedir="${tstamp.value}"
						destfile="${test.build.liferay.portal.zip.file.name}"
					/>

					<delete dir="${tstamp.value}" />

					<var name="tstamp.value" unset="true" />
				</then>
				<elseif>
					<isset property="update.properties" />
					<then>
						<print-file file.name="${test.app.server.classes.portal.dir}/portal-ext.properties" />
					</then>
				</elseif>
				<elseif>
					<isset property="cluster.node.ip.address" />
					<then>
						<print-file file.name="${test.app.server.classes.portal.dir}/portal-ext.properties" />
					</then>
				</elseif>
				<else>
					<copy
						file="portal-impl/src/portal-ext.properties"
						overwrite="true"
						tofile="${app.server.classes.portal.dir}/portal-ext.properties"
					/>

					<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties">

module.framework.properties.osgi.console=11312</echo>

					<print-file file.name="${app.server.classes.portal.dir}/portal-ext.properties" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="check-config">
		<sequential>
			<if>
				<not>
					<or>
						<equals arg1="${app.server.type}" arg2="jboss" />
						<equals arg1="${app.server.type}" arg2="tcserver" />
						<equals arg1="${app.server.type}" arg2="tomcat" />
						<equals arg1="${app.server.type}" arg2="weblogic" />
						<equals arg1="${app.server.type}" arg2="websphere" />
						<equals arg1="${app.server.type}" arg2="wildfly" />
					</or>
				</not>
				<then>
					<fail>Please set "app.server.type" to one of the following:${line.separator}, jboss, tcserver, tomcat, weblogic, websphere, or wildfly.</fail>
				</then>
			</if>

			<if>
				<not>
					<or>
						<equals arg1="${browser.type}" arg2="android" />
						<equals arg1="${browser.type}" arg2="androidchrome" />
						<equals arg1="${browser.type}" arg2="chrome" />
						<equals arg1="${browser.type}" arg2="edge" />
						<equals arg1="${browser.type}" arg2="firefox" />
						<equals arg1="${browser.type}" arg2="internetexplorer" />
						<equals arg1="${browser.type}" arg2="iossafari" />
						<equals arg1="${browser.type}" arg2="safari" />
					</or>
				</not>
				<then>
					<fail>Please set "browser.type" to one of the following:${line.separator}android, androidchrome, chrome, edge, firefox, internetexplorer, iossafari, or safari.</fail>
				</then>
			</if>

			<if>
				<not>
					<or>
						<equals arg1="${database.type}" arg2="auroramysql" />
						<equals arg1="${database.type}" arg2="aurorapostgresql" />
						<equals arg1="${database.type}" arg2="db2" />
						<equals arg1="${database.type}" arg2="hypersonic" />
						<equals arg1="${database.type}" arg2="mariadb" />
						<equals arg1="${database.type}" arg2="mysql" />
						<equals arg1="${database.type}" arg2="oracle" />
						<equals arg1="${database.type}" arg2="postgresql" />
						<equals arg1="${database.type}" arg2="sqlserver" />
						<equals arg1="${database.type}" arg2="sybase" />
					</or>
				</not>
				<then>
					<fail>Please set "database.type" to one of the following:${line.separator}auroramysql, aurorapostgresql, db2, hypersonic, mariadb, mysql, oracle, postgresql, sqlserver, sybase.</fail>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="decompress">
		<attribute name="dest" />
		<attribute name="src" />

		<sequential>
			<local name="archive.basename" />

			<basename file="@{src}" property="archive.basename" />

			<if>
				<matches pattern=".*\.7z$" string="${archive.basename}" />
				<then>
					<if>
						<os family="mac" />
						<then>
							<execute>
								<![CDATA[
									unar @{src} -o @{dest} -f
								]]>
							</execute>
						</then>
						<else>
							<execute>
								<![CDATA[
									7z x @{src} -o @{dest} -aoa
								]]>
							</execute>
						</else>
					</if>
				</then>
				<elseif>
					<matches pattern=".*\.tar\.gz$" string="${archive.basename}" />
					<then>
						<untar
							compression="gzip"
							dest="@{dest}"
							src="@{src}"
						/>
					</then>
				</elseif>
				<elseif>
					<matches pattern=".*\.zip$" string="${archive.basename}" />
					<then>
						<unzip
							dest="@{dest}"
							src="@{src}"
						/>
					</then>
				</elseif>
				<else>
					<fail message="Unable to decompress ${archive.basename}." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="generate-gulp-user-config-json">
		<attribute name="portlet.name" />

		<attribute default="${app.server.type}" name="app.server.type" />
		<attribute default="${app.server.@{app.server.type}.dir}" name="app.server.dir" />
		<attribute default="user-config.json" name="file.name" />
		<attribute default="portlets/@{portlet.name}/docroot/js/tests/util" name="file.path" />
		<attribute default="${lp.plugins.dir}" name="plugins.dir" />
		<attribute default="${project.dir}" name="portal.dir" />

		<sequential>
			<echo file="@{plugins.dir}/@{file.path}/@{file.name}"><![CDATA[{
	"bundle": "@{app.server.dir}",
	"deployDir": "@{app.server.dir}/webapps/ROOT",
	"source": "@{portal.dir}"
}]]></echo>
		</sequential>
	</macrodef>

	<macrodef name="generate-jdbc-properties">
		<attribute name="properties.file" />
		<element name="post-action" optional="true" />

		<sequential>
			<get-database-property property.name="database.driver" />
			<get-database-property property.name="database.password" />
			<get-database-property property.name="database.url" />
			<get-database-property property.name="database.username" />

			<echo file="@{properties.file}"><![CDATA[liferay.home=${liferay.home}

jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}

// HikariCP

jdbc.default.connectionTimeout=600000
jdbc.default.maximumPoolSize=20
jdbc.default.minimumIdle=0

jdbc.counter.maximumPoolSize=5
jdbc.counter.minimumIdle=0

// Tomcat

jdbc.default.initialSize=0
jdbc.default.maxActive=20
jdbc.default.maxIdle=0
jdbc.default.minIdle=0

jdbc.counter.initialSize=0
jdbc.counter.maxActive=5
jdbc.counter.maxIdle=0
jdbc.counter.minIdle=0

counter.jdbc.prefix=jdbc.counter.]]></echo>

			<if>
				<equals arg1="${database.type}" arg2="oracle" />
				<then>
					<echo append="true" file="@{properties.file}"><![CDATA[
jdbc.default.connectionProperties=oracle.jdbc.ReadTimeout=0;oracle.net.CONNECT_TIMEOUT=0

jdbc.counter.connectionProperties=oracle.jdbc.ReadTimeout=0;oracle.net.CONNECT_TIMEOUT=0]]></echo>
				</then>
			</if>

			<post-action />
		</sequential>
	</macrodef>

	<macrodef name="get-auto-deploy-dir">
		<sequential>
			<var name="auto.deploy.dir" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<get-testcase-property property.name="plugins.deployment.type" />
				</then>
			</if>

			<if>
				<equals arg1="${plugins.deployment.type}" arg2="osgi" />
				<then>
					<var name="auto.deploy.dir" value="${liferay.home}/osgi/modules" />
				</then>
				<else>
					<var name="auto.deploy.dir" value="${liferay.home}/deploy" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-database-property">
		<attribute name="property.name" />

		<sequential>
			<check-config />

			<var name="property.name" unset="true" />
			<var name="@{property.name}" unset="true" />

			<property name="property.name" value="@{property.name}" />

			<beanshell>
				<![CDATA[
					String propertyName = project.getProperty("property.name");

					StringBuilder sb = new StringBuilder();

					sb.append("database.");
					sb.append(project.getProperty("database.type"));
					sb.append(".");
					sb.append(propertyName.substring(9));

					propertyValue = project.getProperty(sb.toString());

					project.setProperty(propertyName, propertyValue);
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-database-socks-non-proxy-hosts">
		<sequential>
			<var name="database.socks.non.proxy.hosts" unset="true" />

			<get-database-property property.name="database.host" />

			<condition else="" property="database.socks.non.proxy.hosts" value="-DsocksNonProxyHosts=${database.host}">
				<equals arg1="${env.DOCKER_ENABLED}" arg2="true" />
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="get-fixpack-version">
		<attribute name="patch.file.zip.url" />

		<sequential>
			<var name="fixpack.version" unset="true" />

			<if>
				<matches pattern="https?://" string="@{patch.file.zip.url}" />
				<then>
					<local name="patch.file.zip.url" />
					<local name="patch.requirements" />

					<property name="patch.file.zip.url" value="@{patch.file.zip.url}" />
					<get-patch-requirements patch.file.zip.url="@{patch.file.zip.url}" />

					<beanshell>
						<![CDATA[
							import java.util.regex.Matcher;
							import java.util.regex.Pattern;

							String patchFileZipURL = project.getProperty("patch.file.zip.url");
							String patchRequirements = project.getProperty("patch.requirements");

							Pattern pattern = Pattern.compile("https?://.*/liferay-fix-pack-de-(\\d+)-\\d{4}[^/]*.zip");

							Matcher matcher = pattern.matcher(patchFileZipURL);

							if (matcher.find()) {
								project.setProperty("fixpack.version", matcher.group(1));
							}
							else if ((patchRequirements != null) && patchRequirements.startsWith("de-")) {
								project.setProperty("fixpack.version", patchRequirements.substring(3));
							}
						]]>
					</beanshell>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-ip-address">
		<sequential>
			<if>
				<isset property="ip.address" />
				<then>
					<var name="ip.address" value="${ip.address}" />
				</then>
				<elseif>
					<os family="mac" />
					<then>
						<exec executable="/bin/bash" outputproperty="ip.address">
							<arg value="-c" />
							<arg value="ifconfig | grep 'inet ' | grep -v 127.0.0.1 | cut -d\  -f2" />
						</exec>
					</then>
				</elseif>
				<elseif>
					<os family="unix" />
					<then>
						<if>
							<isset property="env.JENKINS_HOME" />
							<then>
								<exec executable="/bin/bash" os="${os.unix}" outputproperty="ip.address">
									<arg value="-c" />
									<arg value="ip addr show eth0 | grep 'inet\b' | cut -d/ -f1 | awk '{print $2}'" />
								</exec>
							</then>
							<else>
								<exec executable="/bin/bash" os="${os.unix}" outputproperty="ip.address">
									<arg value="-c" />
									<arg value="ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'" />
								</exec>
							</else>
						</if>
					</then>
				</elseif>
				<elseif>
					<os family="windows" />
					<then>
						<var name="ip.address" value="127.0.0.1" />
					</then>
				</elseif>
				<else>
					<fail message="Please set the property ${ip.address}." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-java-jdk-bundle-type">
		<attribute default="" name="test.batch.name" />

		<sequential>
			<local name="test.batch.name" />

			<condition else="@{test.batch.name}" property="test.batch.name" value="${env.TEST_BATCH_NAME}">
				<contains string="@{test.batch.name}" substring="{test.batch.name}" />
			</condition>

			<var name="java.jdk.bundle.type" unset="true" />

			<propertyregex
				input="${test.batch.name}"
				property="java.jdk.bundle.type"
				regexp="-jdk[0-9]+_(\w+)"
				select="\1"
			/>

			<condition property="java.jdk.bundle.type" value="oracle">
				<matches pattern="-jdk[0-9]+$" string="${test.batch.name}" />
			</condition>

			<property name="java.jdk.bundle.type" value="oracle" />
		</sequential>
	</macrodef>

	<macrodef name="get-java-jdk-bundle-version">
		<attribute default="" name="test.batch.name" />

		<sequential>
			<local name="test.batch.name" />

			<condition else="@{test.batch.name}" property="test.batch.name" value="${env.TEST_BATCH_NAME}">
				<contains string="@{test.batch.name}" substring="{test.batch.name}" />
			</condition>

			<var name="java.jdk.bundle.version" unset="true" />

			<propertyregex
				input="${test.batch.name}"
				property="java.jdk.bundle.version"
				regexp="-jdk([0-9]+)(_(open|oracle|redhat|zulu))?"
				select="\1"
			/>

			<property name="java.jdk.bundle.version" value="${ant.java.version}" />
		</sequential>
	</macrodef>

	<macrodef name="get-java-jdk-home">
		<attribute default="${java.jdk.architecture}" name="architecture" />
		<attribute default="oracle" name="type" />
		<attribute default="${ant.java.version}" name="version" />

		<sequential>
			<var name="java.jdk.home" unset="true" />

			<propertycopy from="java.jdk.home[@{version}][@{architecture}][@{type}]" property="java.jdk.home" silent="true" />

			<property name="java.jdk.home" value="${java.home}" />

			<if>
				<not>
					<available file="${java.jdk.home}" />
				</not>
				<then>
					<var name="java.jdk.home" unset="true" />

					<property name="java.jdk.home" value="${java.home}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-jinfo-output">
		<attribute name="process.name" />

		<sequential>
			<var name="jinfo.output" unset="true" />

			<execute>
				<![CDATA[
					jps > jps_output
				]]>
			</execute>

			<local name="jps.output" />

			<loadfile
				property="jps.output"
				srcfile="jps_output"
			/>

			<if>
				<contains string="${jps.output}" substring="@{process.name}" />
				<then>
					<local name="java.process.pid" />

					<propertyregex
						input="${jps.output}"
						override="true"
						property="java.process.pid"
						regexp="(|[\S\s]*\n)([0-9]+) @{process.name}[\S\s]*"
						replace="\2"
					/>

					<execute>
						<![CDATA[
							jinfo -flags ${java.process.pid} > jinfo_output
						]]>
					</execute>

					<loadfile
						property="jinfo.output"
						srcfile="jinfo_output"
					/>
				</then>
			</if>

			<delete file="jps_output" />
			<delete file="jinfo_output" />
		</sequential>
	</macrodef>

	<macrodef name="get-jstack-output">
		<attribute name="process.name" />

		<sequential>
			<var name="jstack.output" unset="true" />

			<execute>
				<![CDATA[
					jps > jps_output
				]]>
			</execute>

			<local name="jps.output" />

			<loadfile
				property="jps.output"
				srcfile="jps_output"
			/>

			<if>
				<contains string="${jps.output}" substring="@{process.name}" />
				<then>
					<local name="bootstrap.pid" />

					<propertyregex
						input="${jps.output}"
						override="true"
						property="bootstrap.pid"
						regexp="(|[\S\s]*\n)([0-9]+) @{process.name}[\S\s]*"
						replace="\2"
					/>

					<execute>
						<![CDATA[
							jstack -l ${bootstrap.pid} > jstack_output
						]]>
					</execute>

					<loadfile
						property="jstack.output"
						srcfile="jstack_output"
					/>
				</then>
			</if>

			<delete file="jps_output" />
			<delete file="jstack_output" />
		</sequential>
	</macrodef>

	<macrodef name="get-master-hostname">
		<attribute default="${env.JENKINS_URL}" name="jenkins.url" />

		<sequential>
			<var name="master.hostname" unset="true" />

			<propertyregex
				input="@{jenkins.url}"
				override="true"
				property="master.hostname"
				regexp="https://(test-[0-9]+-[0-9]+).liferay.com/"
				replace="\1"
			/>

			<if>
				<not>
					<isset property="master.hostname" />
				</not>
				<then>
					<propertyregex
						input="@{jenkins.url}"
						override="true"
						property="master.hostname"
						regexp="https://test.liferay.com/([0-9]+)/"
						replace="test-\1"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-module-base-dir-from-subrepository-name">
		<attribute name="subrepository.name" />

		<sequential>
			<var name="module.base.dir" unset="true" />

			<for param="gitrepo.file">
				<fileset
					dir="${project.dir}/modules"
					erroronmissingdir="false"
					id="fileset.id"
				>
					<include name="**/.gitrepo" />
				</fileset>
				<sequential>
					<if>
						<resourcecontains
							resource="@{gitrepo.file}"
							substring="git@github.com:liferay/@{subrepository.name}.git"
						/>
						<then>
							<antelope:stringutil property="module.base.dir" string="@{gitrepo.file}">
								<antelope:replace regex="\\" replacement="/" />
							</antelope:stringutil>

							<antelope:stringutil property="module.base.dir" string="${module.base.dir}">
								<antelope:replace regex="(.+)\/\.gitrepo" replacement="$1" />
							</antelope:stringutil>
						</then>
					</if>
				</sequential>
			</for>

			<fail message="No module base directory found for '@{subrepository.name}'." unless="module.base.dir" />
		</sequential>
	</macrodef>

	<macrodef name="get-patch-requirements">
		<attribute name="patch.file.zip.url" />

		<sequential>
			<var name="patch.requirements" unset="true" />

			<local name="tstamp.value" />

			<tstamp>
				<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
			</tstamp>

			<mirrors-get
				dest="${tstamp.value}.zip"
				src="@{patch.file.zip.url}"
			/>

			<mkdir dir="${tstamp.value}-dir" />

			<unzip
				dest="${tstamp.value}-dir"
				src="${tstamp.value}.zip"
			/>

			<xmlproperty file="${tstamp.value}-dir/fixpack_documentation.xml" />

			<antelope:stringutil property="patch.requirements" string="${patch.requirements}">
				<antelope:replace regex="!" replacement="" />
				<antelope:replace regex="&gt;=" replacement="-" />
				<antelope:replace regex="=" replacement="-" />
			</antelope:stringutil>

			<delete dir="${tstamp.value}-dir" />
			<delete file="${tstamp.value}.zip" />
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="poshi.class.name" unset="true" />

			<get-test-namespace />
			<get-test-simple-class-name />

			<beanshell>
				<![CDATA[
					String testNamespace = project.getProperty("test.namespace");
					String testSimpleClassName = project.getProperty("test.simple.class.name");

					String poshiClassName = testNamespace + "." + testSimpleClassName.replaceAll("TestCase$", "");

					project.setProperty("poshi.class.name", poshiClassName);
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-dir-name">
		<sequential>
			<var name="poshi.dir.name" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<get-poshi-test-name />

					<antelope:stringutil property="poshi.dir.name" string="${poshi.test.name}">
						<antelope:replace regex="," replacement="_" />
						<antelope:replace regex="#" replacement="_" />
					</antelope:stringutil>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-java-jdk-opts">
		<sequential>
			<propertyregex
				input="${env.ANT_OPTS}"
				override="true"
				property="poshi.java.jdk.opts"
				regexp="(-Xmx)(\d*\w*)"
				replace="\12048m"
			/>

			<propertyregex
				input="${poshi.java.jdk.opts}"
				override="true"
				property="poshi.java.jdk.opts"
				regexp="PermSize"
				replace="MetaspaceSize"
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-method-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="poshi.method.name" unset="true" />

			<get-test-method-name />

			<beanshell>
				<![CDATA[
					String testMethodName = project.getProperty("test.method.name");

					String poshiClassName = testMethodName.substring(4);

					project.setProperty("poshi.method.name", poshiClassName);
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-poshi-test-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="poshi.test.name" unset="true" />

			<if>
				<contains string="${test.class}" substring="#" />
				<then>
					<get-poshi-class-name />
					<get-poshi-method-name />

					<var name="poshi.test.name" value="${poshi.class.name}#${poshi.method.name}" />
				</then>
				<else>
					<get-poshi-class-name />

					<var name="poshi.test.name" value="${poshi.class.name}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-test-class">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<if>
				<and>
					<matches pattern="[0-9]+_[0-9]+" string="${test.class}" />
					<not>
						<isset property="RUN_TEST_CASE_METHOD_GROUP_${test.class}" />
					</not>
				</and>
				<then>
					<loadproperties srcFile="${project.dir}/test.case.method.names.properties">
						<filterchain>
							<linecontains>
								<contains value="RUN_TEST_CASE_METHOD_GROUP_${test.class}" />
							</linecontains>
						</filterchain>
					</loadproperties>
				</then>
			</if>

			<propertycopy from="RUN_TEST_CASE_METHOD_GROUP_${test.class}" name="test.class" override="true" />
		</sequential>
	</macrodef>

	<macrodef name="get-test-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.class.name" unset="true" />

			<get-poshi-class-name />

			<beanshell>
				<![CDATA[
					import java.util.regex.Matcher;
					import java.util.regex.Pattern;

					import org.apache.tools.ant.DirectoryScanner;

					String poshiClassName = project.getProperty("poshi.class.name");

					try {
						DirectoryScanner directoryScanner = new DirectoryScanner();

						if (project.getProperty("test.base.dir.name") != null) {
							directoryScanner.setBasedir(project.getProperty("test.base.dir.name"));
						}
						else {
							directoryScanner.setBasedir(project.getBaseDir());
						}

						directoryScanner.setIncludes(new String[] {"**/test/functional/**/" + poshiClassName + ".testcase"});

						directoryScanner.scan();

						String[] fileNames = directoryScanner.getIncludedFiles();

						String fileName = fileNames[0];

						Pattern pattern = Pattern.compile("/test/functional/(?<className>\\S+)");

						Matcher matcher = pattern.matcher(fileName);

						if (!matcher.find()) {
							throw new RuntimeException("Unable to find className in " + fileName);
						}

						String className = matcher.group("className");

						className = className.replaceAll("/", ".");
						className = className.replaceAll("\\.testcase", "TestCase");

						project.setProperty("test.class.name", className);
					}
					catch (Exception e) {
					}
				]]>
			</beanshell>

			<fail message="${test.name}.testcase does not exist." unless="test.class.name" />
		</sequential>
	</macrodef>

	<macrodef name="get-test-method-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.method.name" unset="true" />

			<beanshell>
				<![CDATA[
					import java.util.regex.Matcher;
					import java.util.regex.Pattern;

					String testClass = project.getProperty("test.class");

					Pattern pattern = Pattern.compile("((?<namespace>\\w+)\\.)?(?<className>\\w+)(#(?<commandName>(\\w+(-\\w+)*|\\$\\{\\w+\\}|\\w+)*))?");

					Matcher matcher = pattern.matcher(testClass);

					if (!matcher.find()) {
						throw new Exception("Invalid test class name: " + testClass);
					}

					String testMethodName = matcher.group("commandName");

					if (testMethodName != null) {

						if (!testMethodName.startsWith("test")) {
							testMethodName = "test" + testMethodName;
						}

						project.setProperty("test.method.name", testMethodName);
					}
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-test-namespace">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.namespace" unset="true" />

			<beanshell>
				<![CDATA[
					import java.util.regex.Matcher;
					import java.util.regex.Pattern;

					String testClass = project.getProperty("test.class");

					Pattern pattern = Pattern.compile("((?<namespace>\\w+)\\.)?(?<className>\\w+)(#(?<commandName>(\\w+(-\\w+)*|\\$\\{\\w+\\}|\\w+)*))?");

					Matcher matcher = pattern.matcher(testClass);

					if (!matcher.find()) {
						throw new Exception("Invalid test class name: " + testClass);
					}

					String testNamespace = matcher.group("namespace");

					if (testNamespace == null) {
						testNamespace = project.getProperty("test.poshi.runner.default.namespace");
					}

					project.setProperty("test.namespace", testNamespace);
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-test-simple-class-name">
		<sequential>
			<fail message="Please set the property ${test.class}." unless="test.class" />

			<var name="test.simple.class.name" unset="true" />

			<beanshell>
				<![CDATA[
					import java.util.regex.Matcher;
					import java.util.regex.Pattern;

					String testClass = project.getProperty("test.class");

					Pattern pattern = Pattern.compile("((?<namespace>\\w+)\\.)?(?<className>\\w+)(\\#(?<commandName>(\\w+(\\-\\w+)*|\\$\\{\\w+\\}|\\w+)*))?");

					Matcher matcher = pattern.matcher(testClass);

					if (!matcher.find()) {
						throw new Exception("Invalid test class name: " + testClass);
					}

					String testSimpleClassName = matcher.group("className");

					if (!testSimpleClassName.endsWith("TestCase")) {
						testSimpleClassName = testSimpleClassName + "TestCase";
					}

					project.setProperty("test.simple.class.name", testSimpleClassName);
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="get-test-url">
		<sequential>
			<if>
				<matches pattern="[0-9]+_[0-9]+" string="${test.class}" />
				<then>
					<get-test-class />
				</then>
			</if>

			<get-testcase-property property.name="testcase.url" />

			<if>
				<isset property="test.url" />
				<then>
					<var name="test.url" value="${test.url}" />
				</then>
				<elseif>
					<or>
						<equals arg1="${browser.type}" arg2="android" />
						<equals arg1="${browser.type}" arg2="androidchrome" />
						<equals arg1="${browser.type}" arg2="iossafari" />
					</or>
					<then>
						<get-ip-address />

						<var name="test.url" value="http://${ip.address}:8080" />
					</then>
				</elseif>
				<elseif>
					<isset property="testcase.url" />
					<then>
						<var name="test.url" value="${testcase.url}" />
					</then>
				</elseif>
				<elseif>
					<contains string="${test.class}" substring="," />
					<then>
						<if>
							<os family="unix" />
							<then>
								<var name="test.url" value="http://${env.HOSTNAME}:8080" />
							</then>
							<elseif>
								<os family="windows" />
								<then>
									<var name="test.url" value="http://${env.COMPUTERNAME}:8080" />
								</then>
							</elseif>
						</if>
					</then>
				</elseif>
				<else>
					<var name="test.url" value="http://localhost:8080" />
				</else>
			</if>

			<get-testcase-property property.name="portal.context" />

			<if>
				<isset property="portal.context" />
				<then>
					<var name="test.url" value="${test.url}/${portal.context}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="get-testcase-property">
		<attribute name="property.name" />

		<sequential>
			<var name="property.value.default" unset="true" />

			<if>
				<isset property="@{property.name}" />
				<then>
					<propertycopy from="@{property.name}" name="property.value.default" />
				</then>
			</if>

			<var name="@{property.name}" unset="true" />

			<if>
				<isset property="test.class" />
				<then>
					<property file="${project.dir}/test.generated.properties" />

					<var name="property.name" value="@{property.name}" />

					<if>
						<matches pattern="[0-9]+_[0-9]+" string="${test.class}" />
						<then>
							<get-test-class />
						</then>
					</if>

					<get-test-method-name />
					<get-test-namespace />
					<get-test-simple-class-name />

					<beanshell>
						<![CDATA[
							String propertyName = project.getProperty("property.name");
							String propertyValueDefault = project.getProperty("property.value.default");
							String testMethodName = project.getProperty("test.method.name");
							String testNamespace = project.getProperty("test.namespace");
							String testSimpleClassName = project.getProperty("test.simple.class.name");

							StringBuilder sb = new StringBuilder();

							sb.append(testNamespace);
							sb.append(".");
							sb.append(testSimpleClassName);
							sb.append(".");
							sb.append(testMethodName);
							sb.append(".");
							sb.append(propertyName);

							String propertyValue = project.getProperty(sb.toString());

							if (propertyValue == null) {
								sb = new StringBuilder();

								sb.append(testNamespace);
								sb.append(".");
								sb.append(testSimpleClassName);
								sb.append(".");
								sb.append("all");
								sb.append(".");
								sb.append(propertyName);

								propertyValue = project.getProperty(sb.toString());

								if (propertyValue == null) {
									propertyValue = propertyValueDefault;
								}
							}

							project.setProperty(propertyName, propertyValue);
						]]>
					</beanshell>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="install-lpkg-patch">
		<attribute name="patch.file.zip.url" />

		<sequential>
			<local name="patch.file.name" />

			<propertyregex
				input="@{patch.file.zip.url}"
				property="patch.file.name"
				regexp="http:\/\/.*\/(Liferay[^\/]*\.lpkg)"
				select="\1"
			/>

			<beanshell>
				import com.liferay.jenkins.results.parser.JenkinsResultsParserUtil;

				project.setProperty("patch.file.name", JenkinsResultsParserUtil.decode(project.getProperty("patch.file.name")));
			</beanshell>

			<mirrors-get
				dest="${liferay.home}/deploy/${patch.file.name}"
				src="@{patch.file.zip.url}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="install-patch">
		<attribute name="patch.file.zip.url" />
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<local name="patch.file.name" />

			<basename file="@{patch.file.zip.url}" property="patch.file.name" />

			<mirrors-get
				dest="@{patching.tool.dir}/patches/${patch.file.name}"
				src="@{patch.file.zip.url}"
			/>

			<delete file="@{patching.tool.dir}/default.properties" />

			<if>
				<available file="${app.server.parent.dir}/.liferay-home" />
				<then>
					<execute dir="@{patching.tool.dir}" failonerror="true">
						patching-tool${file.suffix.bat} auto-discovery
						patching-tool${file.suffix.bat} install -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>
				</then>
				<else>
					<echo file="@{patching.tool.dir}/default.properties">global.lib.path=${app.server.lib.global.dir}
liferay.home=${liferay.home}
patching.mode=binary
war.path=${app.server.portal.dir}/</echo>

					<execute dir="@{patching.tool.dir}" failonerror="true">
						patching-tool${file.suffix.bat} install -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="install-patch-dependencies">
		<attribute name="patch.file.zip.url" />
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<local name="patch.requirements" />

			<get-patch-requirements patch.file.zip.url="@{patch.file.zip.url}" />

			<if>
				<not>
					<equals arg1="${patch.requirements}" arg2="" />
				</not>
				<then>
					<local name="patch.build.version" />
					<local name="patch.portal.version" />

					<propertyregex
						input="@{patch.file.zip.url}"
						property="patch.build.version"
						regexp=".+\/liferay-(hotfix|.*security)-.+-(\d)(\d)(\d\d).zip"
						replace="\2\3\4"
					/>

					<propertyregex
						input="@{patch.file.zip.url}"
						property="patch.portal.version"
						regexp=".+\/liferay-(hotfix|.*security)-.+-(\d)(\d)(\d\d).zip"
						replace="\2.\3.\4"
					/>

					<mirrors-get
						dest="@{patching.tool.dir}/patches"
						src="http://files.liferay.com/private/ee/fix-packs/${patch.portal.version}/dxp/liferay-fix-pack-${patch.requirements}-${patch.build.version}.zip"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="poshi-execute">
		<attribute default="false" name="failonerror" />
		<attribute name="task" />

		<sequential>
			<propertyfile file="${project.dir}/.gradle/gradle.properties">
				<entry key="sdk.dir" value="${sdk.dir}" />
			</propertyfile>

			<if>
				<contains string="${env.CI_TEST_SUITE}" substring="poshi" />
				<then>
					<propertycopy from="test.poshi.runner.local.release[${env.CI_TEST_SUITE}]" name="test.poshi.runner.local.release" override="true" />
				</then>
			</if>

			<if>
				<equals arg1="${test.poshi.runner.local.release}" arg2="true" />
				<then>
					<if>
						<not>
							<available file="tools/sdk" />
						</not>
						<then>
							<antcall inheritAll="false" target="setup-sdk" />

							<antcall inheritAll="false" target="setup-yarn" />
						</then>
					</if>

					<gradle-execute dir="${test.poshi.runner.src.dir}" task="deploy" />
				</then>
			</if>

			<if>
				<isset property="env.JENKINS_HOME" />
				<then>
					<local name="poshi.java.jdk.opts" />

					<get-java-jdk-home version="8" />

					<get-poshi-java-jdk-opts />

					<gradle-execute failonerror="@{failonerror}" gradleopts="${poshi.java.jdk.opts}" task="@{task}">
						<arg value="--build-file=portal-web/build-test.gradle" />
						<arg value="-Plocal=${test.poshi.runner.local.release}" />
						<arg value="-PposhiRunnerExtProperties=${test.ext.properties.file}" />
						<arg value="-Ptmp.maven.repository.dir=../.m2-tmp" />
						<env key="ANT_OPTS" value="${poshi.java.jdk.opts}" />
						<env key="JAVA_HOME" path="${java.jdk.home}" />
					</gradle-execute>
				</then>
				<else>
					<gradle-execute failonerror="@{failonerror}" task="@{task}">
						<arg value="--build-file=portal-web/build-test.gradle" />
						<arg value="-Plocal=${test.poshi.runner.local.release}" />
						<arg value="-PposhiRunnerExtProperties=${test.ext.properties.file}" />
						<arg value="-Ptmp.maven.repository.dir=../.m2-tmp" />
					</gradle-execute>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-additional-bundles">
		<sequential>
			<get-testcase-property property.name="app.server.bundles.size" />

			<if>
				<isset property="app.server.bundles.size" />
				<then>
					<var name="app.server.bundle.index" value="1" />

					<antelope:repeat count="${app.server.bundles.size}">
						<set-app-server-properties
							app.server.bundle.index="${app.server.bundle.index}"
						/>

						<delete dir="${test.app.server.parent.dir}" />

						<copy
							todir="${test.app.server.parent.dir}"
						>
							<fileset
								dir="${app.server.parent.dir}"
							/>
						</copy>

						<chmod
							perm="a+x"
						>
							<fileset
								dir="${test.app.server.bin.dir}"
							>
								<include name="*.sh" />
							</fileset>
						</chmod>

						<local name="jmx.remote.port.overwrite" />

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="${jmx.remote.port}"
							operation="+"
							result="jmx.remote.port.overwrite"
						/>

						<replace
							file="${test.app.server.bin.dir}/setenv.sh"
							token="-Dcom.sun.management.jmxremote.port=${jmx.remote.port}"
							value="-Dcom.sun.management.jmxremote.port=${jmx.remote.port.overwrite}"
						/>

						<replace
							file="${test.app.server.bin.dir}/setenv.bat"
							token="-Dcom.sun.management.jmxremote.port=${jmx.remote.port}"
							value="-Dcom.sun.management.jmxremote.port=${jmx.remote.port.overwrite}"
						/>

						<if>
							<or>
								<equals arg1="${app.server.type}" arg2="jboss" />
								<equals arg1="${app.server.type}" arg2="wildfly" />
							</or>
							<then>
								<replaceregexp
									file="${test.app.server.dir}/standalone/configuration/standalone.xml"
									match="offset:0"
									replace="offset:${app.server.bundle.index}000"
								/>
							</then>
							<elseif>
								<equals arg1="${app.server.type}" arg2="tomcat" />
								<then>
									<replaceregexp
										file="${test.app.server.dir}/conf/server.xml"
										flags="g"
										match="=&quot;8(\d\d\d)&quot;"
										replace="=&quot;${test.app.server.leading.port.number}\1&quot;"
									/>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${app.server.type}" arg2="weblogic" />
								<then>
									<replace
										file="${test.app.server.dir}/domains/liferay/config/config.xml"
									>
										<replacetoken><![CDATA[<listen-port>8080</listen-port>]]></replacetoken>
										<replacevalue><![CDATA[<listen-port>${test.app.server.leading.port.number}080</listen-port>]]></replacevalue>
									</replace>
								</then>
							</elseif>
						</if>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="liferay.home=${liferay.home}"
							value="liferay.home=${test.app.server.parent.dir}"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="web.server.http.port=8080"
							value="web.server.http.port=${test.app.server.leading.port.number}080"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="11312"
							operation="+"
							result="osgi.console.port"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="module.framework.properties.osgi.console=11312"
							value="module.framework.properties.osgi.console=${osgi.console.port}"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="1"
							operation="+"
							result="app.server.bundle.index"
						/>
					</antelope:repeat>

					<var name="app.server.bundle.index" unset="true" />
				</then>
			</if>

			<get-testcase-property property.name="databases.size" />

			<if>
				<isset property="databases.size" />
				<then>
					<var name="database.index" value="1" />

					<antelope:repeat count="${databases.size}">
						<set-app-server-properties
							app.server.bundle.index="${database.index}"
						/>

						<replace
							file="${test.app.server.classes.portal.dir}/portal-ext.properties"
							token="lportal"
							value="lportal${database.index}"
						/>

						<math
							datatype="int"
							operand1="${database.index}"
							operand2="1"
							operation="+"
							result="database.index"
						/>
					</antelope:repeat>

					<var name="database.index" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-blacklist-configuration">
		<sequential>
			<var name="blacklistBundleSymbolicNames" value="[&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api&quot;,&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise&quot;,&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data&quot;,&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees&quot;]" />

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config">blacklistBundleSymbolicNames=${blacklistBundleSymbolicNames}</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-captcha-configuration">
		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.captcha.configuration.CaptchaConfiguration.config">createAccountCaptchaEnabled=&quot;false&quot;
maxChallenges=&quot;-1&quot;
sendPasswordCaptchaEnabled=&quot;false&quot;</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-chrome-driver">
		<sequential>
			<if>
				<os family="mac" />
				<then>
					<property name="selenium.chrome.driver.zip" value="chromedriver_mac64.zip" />
				</then>
				<elseif>
					<os family="unix" />
					<then>
						<property name="selenium.chrome.driver.zip" value="chromedriver_linux64.zip" />
					</then>
				</elseif>
				<elseif>
					<os family="windows" />
					<then>
						<property name="selenium.chrome.driver.zip" value="chromedriver_win32.zip" />
					</then>
				</elseif>
				<else>
					<then>
						<fail message="Operating system is not supported." />
					</then>
				</else>
			</if>

			<mirrors-get
				dest="tools/selenium/${selenium.chrome.driver.zip}"
				src="http://chromedriver.storage.googleapis.com/${selenium.chrome.driver.version}/${selenium.chrome.driver.zip}"
			/>

			<stop-chrome-driver />

			<unzip
				dest="tools/selenium"
				src="tools/selenium/${selenium.chrome.driver.zip}"
			/>

			<if>
				<os family="unix" />
				<then>
					<chmod
						file="tools/selenium/chromedriver"
						perm="a+x"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-custom-properties">
		<attribute name="custom.properties" />
		<attribute default="portal-impl/src/portal-ext.properties" name="properties.file" />

		<sequential>
			<for delimiter="${line.separator}" list="@{custom.properties}" param="property">
				<sequential>
					<propertyregex
						global="true"
						input="@{property}"
						override="true"
						property="propertyName"
						regexp="=.*"
						replace=""
					/>

					<propertyregex
						global="true"
						input="${propertyName}"
						override="true"
						property="propertyName"
						regexp="\["
						replace="\\\\["
					/>

					<propertyregex
						global="true"
						input="${propertyName}"
						override="true"
						property="propertyName"
						regexp="\]"
						replace="\\\\]"
					/>

					<replaceregexp
						file="@{properties.file}"
						flags="g"
						match="${propertyName}=.*"
						replace=""
					/>

					<echo append="true" file="@{properties.file}">

@{property}</echo>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="prepare-database-jndi">
		<sequential>
			<if>
				<not>
					<and>
						<equals arg1="${app.server.type}" arg2="tomcat" />
						<equals arg1="${database.type}" arg2="mysql" />
					</and>
				</not>
				<then>
					<fail>Tests utilizing JNDI are only available for Tomcat+MySQL.</fail>
				</then>
			</if>

			<if>
				<not>
					<resourcecontains
						resource="${app.server.dir}/conf/context.xml"
						substring="jdbc/LiferayPool"
					/>
				</not>
				<then>
					<replace
						file="${app.server.dir}/conf/context.xml"
					>
						<replacetoken><![CDATA[<Context>]]></replacetoken>
						<replacevalue>
							<![CDATA[
								<Context>
									<ResourceLink name="jdbc/LiferayPool" global="jdbc/LiferayPool" type="javax.sql.DataSource" />
							]]>
						</replacevalue>
					</replace>
				</then>
			</if>

			<if>
				<not>
					<resourcecontains
						resource="${app.server.dir}/conf/server.xml"
						substring="jdbc/LiferayPool"
					/>
				</not>
				<then>
					<get-database-property property.name="database.host" />
					<get-database-property property.name="database.password" />
					<get-database-property property.name="database.schema" />
					<get-database-property property.name="database.username" />

					<replace
						file="${app.server.dir}/conf/server.xml"
					>
						<replacetoken><![CDATA[<GlobalNamingResources>]]></replacetoken>
						<replacevalue expandproperties="true">
							<![CDATA[
								<GlobalNamingResources>
									<Resource
										auth="Container"
										description="Global Address Database"
										driverClassName="com.mysql.cj.jdbc.Driver"
										maxActive="40"
										maxIdle="20"
										maxWait="1000"
										name="jdbc/LiferayPool"
										password="${database.password}"
										type="javax.sql.DataSource"
										url="jdbc:mysql://${database.host}:3306/${database.schema}?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false"
										username="${database.username}"
									/>
							]]>
						</replacevalue>
					</replace>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-database-upgrade-configuration">
		<sequential>
			<delete file="${liferay.home}/osgi/configs/com.liferay.portal.search.configuration.IndexStatusManagerConfiguration.cfg" />
			<delete file="${liferay.home}/tools/portal-tools-db-upgrade-client/logs/upgrade.log" />

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.configuration.IndexStatusManagerConfiguration.cfg">indexReadOnly=true</echo>

			<if>
				<equals arg1="${app.server.type}" arg2="jboss" />
				<then>
					<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=modules/system/layers/base/javax/mail,modules/system/layers/base/javax/persistence,modules/system/layers/base/javax/servlet,modules/system/layers/base/javax/transaction
global.lib.dir=modules/com/liferay/portal/main
portal.dir=standalone/deployments/ROOT.war
server.detector.server.id=jboss</echo>
				</then>
				<elseif>
					<equals arg1="${app.server.type}" arg2="tcserver" />
					<then>
						<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=runtimes/tomcat-9.0.10.A.RELEASE/lib
global.lib.dir=instances/liferay/lib
portal.dir=instances/liferay/webapps/ROOT
server.detector.server.id=tomcat</echo>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<then>
						<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=bin
global.lib.dir=lib
portal.dir=webapps/ROOT
server.detector.server.id=tomcat</echo>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${app.server.type}" arg2="weblogic" />
					<then>
						<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=wlserver/modules
global.lib.dir=domains/liferay/lib
portal.dir=domains/liferay/autodeploy/ROOT
server.detector.server.id=weblogic</echo>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${app.server.type}" arg2="websphere" />
					<then>
						<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=javaext
global.lib.dir=lib
portal.dir=profiles/liferay/installedApps/liferay-cell/liferay-portal.ear/liferay-portal.war
server.detector.server.id=websphere</echo>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${app.server.type}" arg2="wildfly" />
					<then>
						<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/app-server.properties">dir=${app.server.dir}
extra.lib.dirs=modules/system/layers/base/javax/mail,modules/system/layers/base/javax/persistence,modules/system/layers/base/javax/servlet,modules/system/layers/base/javax/transaction
global.lib.dir=modules/com/liferay/portal/main
portal.dir=standalone/deployments/ROOT.war
server.detector.server.id=wildfly</echo>
					</then>
				</elseif>
			</if>

			<get-database-property property.name="database.driver" />
			<get-database-property property.name="database.password" />
			<get-database-property property.name="database.url" />
			<get-database-property property.name="database.username" />

			<echo file="${liferay.home}/tools/portal-tools-db-upgrade-client/portal-upgrade-database.properties">jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}</echo>

			<echo append="true" file="${liferay.home}/tools/portal-tools-db-upgrade-client/portal-upgrade-ext.properties">${line.separator}liferay.home=${liferay.home}</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-edge-driver">
		<sequential>
			<if>
				<os family="windows" />
				<then>
					<stop-edge-driver />

					<mirrors-get
						dest="tools/selenium/MicrosoftWebDriver.exe"
						src="http://www.microsoft.com/en-us/download/webdriver/2.0/MicrosoftWebDriver.exe"
					/>
				</then>
				<else>
					<if>
						<equals arg1="${selenium.remote.driver.enabled}" arg2="false" />
						<then>
							<fail message="Operating system is not supported." />
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch-configuration">
		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch6.configuration.ElasticsearchConfiguration.config">logExceptionsOnly="false"</echo>
			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config">logExceptionsOnly="false"</echo>
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch-connection-config">
		<sequential>
			<delete file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConnectionConfiguration-default.config" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-gecko-driver">
		<sequential>
			<stop-gecko-driver />

			<if>
				<os family="mac" />
				<then>
					<property name="selenium.gecko.driver.archive" value="geckodriver-v${selenium.gecko.driver.version}-macos.tar.gz" />
				</then>
				<elseif>
					<os family="unix" />
					<then>
						<property name="selenium.gecko.driver.archive" value="geckodriver-v${selenium.gecko.driver.version}-linux32.tar.gz" />
					</then>
				</elseif>
				<elseif>
					<os family="windows" />
					<then>
						<property name="selenium.gecko.driver.archive" value="geckodriver-v${selenium.gecko.driver.version}-win32.zip" />
					</then>
				</elseif>
				<else>
					<then>
						<fail message="Operating system is not supported." />
					</then>
				</else>
			</if>

			<mirrors-get
				dest="tools/selenium/${selenium.gecko.driver.archive}"
				src="https://github.com/mozilla/geckodriver/releases/download/v${selenium.gecko.driver.version}/${selenium.gecko.driver.archive}"
			/>

			<if>
				<os family="unix" />
				<then>
					<untar
						compression="gzip"
						dest="tools/selenium"
						src="tools/selenium/${selenium.gecko.driver.archive}"
					/>

					<chmod
						file="tools/selenium/geckodriver"
						perm="a+x"
					/>
				</then>
				<else>
					<unzip
						dest="tools/selenium"
						src="tools/selenium/${selenium.gecko.driver.archive}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-ie-driver">
		<sequential>
			<if>
				<os family="windows" />
				<then>
					<property name="selenium.ie.driver.zip" value="IEDriverServer_Win32_${selenium.ie.driver.version}.0.zip" />

					<mirrors-get
						dest="tools/selenium/${selenium.ie.driver.zip}"
						src="http://selenium-release.storage.googleapis.com/${selenium.ie.driver.version}/${selenium.ie.driver.zip}"
					/>

					<stop-ie-driver />

					<unzip
						dest="tools/selenium"
						src="tools/selenium/${selenium.ie.driver.zip}"
					/>
				</then>
				<else>
					<if>
						<equals arg1="${selenium.remote.driver.enabled}" arg2="false" />
						<then>
							<fail message="Operating system is not supported." />
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-jboss-module-configuration">
		<sequential>
			<local name="module.configuration.path" />

			<if>
				<not>
					<available file="${app.server.lib.global.dir}/module.xml" />
				</not>
				<then>
					<property name="module.configuration.path" value="tools/servers/jboss/modules/module.xml" />
				</then>
				<else>
					<property name="module.configuration.path" value="${app.server.lib.global.dir}/module.xml" />
				</else>
			</if>

			<local name="module.configuration.content" />

			<loadfile
				property="module.configuration.content"
				srcFile="${module.configuration.path}"
			>
				<filterchain>
					<filterreader classname="org.apache.tools.ant.filters.LineContains">
						<param type="contains" value="resource-root" />
						<param type="contains" value="petra" />
					</filterreader>
				</filterchain>
			</loadfile>

			<local name="petra.jar.files" />

			<antelope:stringutil if:set="module.configuration.content" property="petra.jar.files" string="${module.configuration.content}">
				<antelope:replace regex="\s*&lt;resource-root path=&quot;" replacement="" />
			</antelope:stringutil>

			<antelope:stringutil if:set="petra.jar.files" property="petra.jar.files" string="${petra.jar.files}">
				<antelope:replace regex="&quot;\s/&gt;[\n\r]*" replacement="," />
			</antelope:stringutil>

			<for if:set="petra.jar.files" list="${petra.jar.files}" param="petra.jar.file">
				<sequential>
					<if>
						<not>
							<available file="${app.server.lib.global.dir}/@{petra.jar.file}" />
						</not>
						<then>
							<local name="regex" />

							<property name="regex" value="\s*&lt;resource-root path=&quot;@{petra.jar.file}&quot;\s/&gt;[\n\r]" />

							<replaceregexp
								file="${module.configuration.path}"
								match="${regex}"
								replace=""
							/>
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="prepare-patching-tool">
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<local name="patching.tool.version.url" />

			<property name="patching.tool.version.url" value="${test.fix.pack.base.url}/patching-tool/${patching.tool.latest.txt}" />

			<if>
				<contains string="${patching.tool.version.url}" substring="mirrors.lax.liferay.com" />
				<then>
					<propertyregex
						input="${patching.tool.version.url}"
						override="true"
						property="patching.tool.version.url"
						regexp="mirrors.lax.liferay.com"
						replace="mirrors-no-cache.lax.liferay.com"
					/>
				</then>
			</if>

			<get
				dest="${basedir}"
				httpusecaches="false"
				src="${patching.tool.version.url}"
			/>

			<local name="patching.tool.version" />

			<loadfile
				property="patching.tool.version"
				srcFile="${patching.tool.latest.txt}"
			>
				<filterchain>
					<striplinebreaks/>
					<trim />
				</filterchain>
			</loadfile>

			<local name="patching.tool.name" />

			<property name="patching.tool.name" value="patching-tool-${patching.tool.version}.zip" />

			<mirrors-get
				dest="${basedir}"
				src="${test.fix.pack.base.url}/patching-tool/${patching.tool.name}"
			/>

			<delete dir="@{patching.tool.dir}" />

			<unzip
				dest="@{patching.tool.dir}/.."
			>
				<fileset
					dir="${basedir}"
					includes="patching-tool*"
				/>
			</unzip>

			<chmod
				perm="a+x"
			>
				<fileset
					dir="@{patching.tool.dir}"
				>
					<include name="*.sh" />
				</fileset>
			</chmod>

			<delete file="${basedir}/${patching.tool.latest.txt}" />
			<delete file="${basedir}/${patching.tool.name}" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-portal-legacy-properties">
		<attribute default="portal-impl/src/portal-ext.properties" name="portal.ext.properties.file.path" />
		<attribute name="portal.major.version" />
		<sequential>
			<var name="portal.legacy.file.content" unset="true" />

			<loadfile
				property="portal.legacy.file.content"
				srcFile="portal-impl/src/portal-legacy-@{portal.major.version}.properties"
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="\$\{resource.repositories.root\}"
				replace="$${liferay.home}"
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="dl.store.cmis.*"
				replace=""
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="dl.store.jcr.fetch.delay=.*"
				replace="dl.store.jcr.fetch.delay=500"
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="dl.store.jcr.fetch.max.failures=.*"
				replace="dl.store.jcr.fetch.max.failures=5"
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="dl.store.jcr.move.version.labels=.*"
				replace="dl.store.jcr.move.version.labels=false"
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="dl.store.s3.*"
				replace=""
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="resource.repositories.root=.*"
				replace=""
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="permissions.user.check.algorithm=.*"
				replace=""
			/>

			<propertyregex
				input="${portal.legacy.file.content}"
				override="true"
				property="portal.legacy.file.content"
				regexp="permissions.view.dynamic.inheritance=.*"
				replace=""
			/>

			<echo append="true" file="@{portal.ext.properties.file.path}">

##
## From portal-legacy-@{portal.major.version}.properties
##

${portal.legacy.file.content}</echo>

			<var name="portal.legacy.file.content" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-safari-driver">
		<sequential>
			<if>
				<os family="mac" />
				<then>
					<echo file="tools/selenium/safaridriver.scpt">
						<![CDATA[
tell application "Safari" to activate
delay 1

tell application "System Events"
	tell process "Safari"
		click menu item "Preferences…" of menu "Safari" of ¬
			menu bar item "Safari" of menu bar 1
		set frontmost to true
		tell window 1
			click button "Advanced" of toolbar 1
			delay 1
			set checkValue to (value of checkbox "Show Develop menu in menu bar" of group 1 of group 1)
			if checkValue is not equal to 1 then
				click checkbox "Show Develop menu in menu bar" of group 1 of group 1
			end if
		end tell
		tell menu bar item "Develop" of menu bar 1
			click
			delay 1
			set checkValue to (value of attribute "AXMenuItemMarkChar" of menu item "Allow Remote Automation" of menu 1)
			if checkValue is not equal to "✓" then
				click menu item "Allow Remote Automation" of menu 1
			else
				key code 53
			end if
		end tell
	end tell
end tell

tell application "Safari" to quit
						]]>
					</echo>

					<execute>
						osascript ${basedir.unix}/tools/selenium/safaridriver.scpt
					</execute>

					<delete file="tools/selenium/safaridriver.scpt" />
				</then>
				<else>
					<fail message="Operating system is not supported." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-saml-algorithm-blacklists">
		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.saml.opensaml.integration.internal.bootstrap.SecurityConfigurationBootstrap.config">blacklisted.algorithms = ["http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384", "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512", "http://www.w3.org/2001/04/xmlenc#sha256", "http://www.w3.org/2001/04/xmldsig-more#sha384", "http://www.w3.org/2001/04/xmlenc#sha512"]</echo>

			<get-testcase-property property.name="app.server.bundles.size" />

			<if>
				<equals arg1="${app.server.bundles.size}" arg2="1" />
				<then>
					<set-app-server-properties app.server.bundle.index="1" />

					<echo file="${test.app.server.liferay.home}/osgi/configs/com.liferay.saml.opensaml.integration.internal.bootstrap.SecurityConfigurationBootstrap.config">blacklisted.algorithms = ["http://www.w3.org/2000/09/xmldsig#rsa-sha1", "http://www.w3.org/2000/09/xmldsig#sha1"]</echo>
				</then>
			</if>

			<print-file file.name="${liferay.home}/osgi/configs/com.liferay.saml.opensaml.integration.internal.bootstrap.SecurityConfigurationBootstrap.config" />

			<print-file file.name="${test.app.server.liferay.home}/osgi/configs/com.liferay.saml.opensaml.integration.internal.bootstrap.SecurityConfigurationBootstrap.config" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-app-server-custom">
		<sequential>
			<ant antfile="build-dist.xml" inheritAll="false" target="unzip-${app.server.type}-custom" />

			<if>
				<equals arg1="${app.server.type}" arg2="weblogic" />
				<then>
					<chmod
						perm="a+x"
					>
						<fileset
							dir="${app.server.weblogic.bin.dir}"
						>
							<include name="**/*.sh" />
						</fileset>
					</chmod>

					<chmod
						perm="a+x"
					>
						<fileset
							dir="${app.server.weblogic.instance.dir}"
						>
							<include name="**/*.sh" />
						</fileset>
					</chmod>

					<local name="weblogic.fix.sh" />

					<property name="weblogic.fix.sh" value="weblogic_fix.sh" />

					<echo file="${weblogic.fix.sh}">
						<![CDATA[
							#!/bin/bash

							DEFAULT_LIFERAY_HOME=/opt/dev/projects/github/liferay-portal/bundles

							APP_SERVER_DIR=${app.server.weblogic.dir}
							LIFERAY_HOME=${liferay.home}

							for file in $(find ${APP_SERVER_DIR} | grep "\.cmd$\|\.domains$\|\.properties$\|\.py$\|\.sh$\|\.txt$\|\.xml$")
							do
								if [[ -f $file ]]
								then
									if [[ -n $(cat $file | grep "${DEFAULT_LIFERAY_HOME}") ]]
									then
										echo $file

										sed -i "s|${DEFAULT_LIFERAY_HOME}|${LIFERAY_HOME}|g" $file
									fi
								fi
							done
						]]>
					</echo>

					<chmod
						perm="a+x"
					>
						<fileset
							dir="."
						>
							<include name="${weblogic.fix.sh}" />
						</fileset>
					</chmod>

					<exec executable="/bin/bash" os="${os.apple},${os.unix}">
						<arg value="${weblogic.fix.sh}" />
					</exec>

					<exec executable="cmd.exe" os="${os.windows}">
						<arg value="${weblogic.fix.sh}" />
					</exec>

					<delete file="${weblogic.fix.sh}" />
				</then>
				<elseif>
					<equals arg1="${app.server.type}" arg2="websphere" />
					<then>
						<replace
							dir="${app.server.websphere.dir}"
							includes="**/*.js,**/*.metadata,**/*.properties,**/*.props,**/*.sh,**/*.txt,**/*.xml"
						>
							<replacefilter
								token="/opt/dev/projects/github/liferay-portal/bundles"
								value="${app.server.parent.dir}"
							/>
						</replace>

						<replace
							dir="${app.server.websphere.dir}"
							includes="**/*.sh"
						>
							<replacefilter
								token="#!/bin/sh"
								value="#!/bin/bash"
							/>
						</replace>

						<chmod
							perm="a+x"
						>
							<fileset
								dir="${app.server.websphere.bin.dir}"
							>
								<include name="**/*.sh" />
							</fileset>
						</chmod>

						<chmod
							perm="a+x"
						>
							<fileset
								dir="${app.server.websphere.dir}"
							>
								<include name="bin/**/*.sh" />
								<include name="java*/**/bin/*" />
							</fileset>
						</chmod>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-bundles">
		<attribute name="unit" />
		<sequential>
			<if>
				<equals arg1="${test.build.bundle.jbosseap6.0}" arg2="true" />
				<then>
					<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-jboss">
						<property name="app.server.jboss.version" value="6.0.1" />
					</ant>
				</then>
			</if>

			<if>
				<and>
					<equals arg1="${test.build.bundle.jbosseap6.1}" arg2="true" />
					<matches pattern="https?://" string="${test.build.portal.war.url}" />
				</and>
				<then>
					<app-server-properties-update>
						app.server.type=jboss
						app.server.jboss.version=6.1.0
						app.server.jboss.dir=${app.server.parent.dir}/jboss-eap-6.1
						app.server.jboss.zip.name=jboss-eap-6.1.0.zip
						app.server.jboss.zip.url=http://www.jboss.org/jbossas/downloads/jboss-eap-6.1.0.zip
					</app-server-properties-update>

					<antcall inheritAll="false" target="prepare-test-bundle">
						<param name="app.server.lib.global.dir" value="${app.server.parent.dir}/jboss-eap-6.1/modules/com/liferay/portal/main" />
						<param name="app.server.portal.dir" value="${app.server.parent.dir}/jboss-eap-6.1/standalone/deployments/ROOT.war" />
						<param name="app.server.type" value="jboss" />
					</antcall>

					<app-server-properties-reset />
				</then>
				<elseif>
					<equals arg1="${test.build.bundle.jbosseap6.1}" arg2="true" />
					<then>
						<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-jboss">
							<property name="app.server.jboss.version" value="6.1.0" />
						</ant>
					</then>
				</elseif>
			</if>

			<if>
				<and>
					<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
					<matches pattern="https?://" string="${test.build.portal.war.url}" />
				</and>
				<then>
					<antcall inheritAll="false" target="prepare-test-bundle">
						<param name="app.server.lib.global.dir" value="${app.server.tcserver.lib.global.dir}" />
						<param name="app.server.portal.dir" value="${app.server.tcserver.portal.dir}" />
						<param name="app.server.type" value="tcserver" />
					</antcall>
				</then>
				<elseif>
					<equals arg1="${test.build.bundle.tcserver}" arg2="true" />
					<then>
						<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-tcserver" />
					</then>
				</elseif>
			</if>

			<if>
				<matches pattern="https?://" string="${test.build.bundle.tomcat.zip.url}" />
				<then>
					<set-tomcat-version-number liferay.portal.bundle="${liferay.portal.bundle}" />

					<antcall inheritAll="false" target="prepare-test-bundle">
						<param name="app.server.type" value="tomcat" />
						<param name="test.app.server.bin.dir" value="${app.server.tomcat.bin.dir}" />
						<param name="test.build.bundle.zip.url" value="${test.build.bundle.tomcat.zip.url}" />
					</antcall>
				</then>
				<else>
					<if>
						<equals arg1="@{unit}" arg2="true" />
						<then>
							<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-tomcat-bare" />

							<antcall target="deploy-additional-jars" />

							<ant dir="portal-kernel" inheritAll="false" target="deploy" />

							<ant dir="portal-test" inheritAll="false" target="deploy" />

							<ant dir="util-java" inheritAll="false" target="deploy" />

							<ant dir="portal-impl" inheritAll="false" target="deploy" />

							<ant dir="portal-impl" inheritAll="false" target="install-portal-snapshot" />
							<ant dir="portal-kernel" inheritAll="false" target="install-portal-snapshot" />
							<ant dir="portal-test" inheritAll="false" target="install-portal-snapshot" />
							<ant dir="util-java" inheritAll="false" target="install-portal-snapshot" />

							<gradle-execute dir="${project.dir}/modules/core" task="deploy">
								<arg value="-Dportal.build=true" />
							</gradle-execute>

							<gradle-execute dir="${project.dir}/modules/apps/petra" task="deploy">
								<arg value="-Dportal.build=true" />
							</gradle-execute>
						</then>
						<else>
							<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-tomcat" />
						</else>
					</if>
				</else>
			</if>

			<setup-testable-tomcat />

			<if>
				<and>
					<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
					<matches pattern="https?://" string="${test.build.portal.war.url}" />
				</and>
				<then>
					<antcall inheritAll="false" target="prepare-test-bundle">
						<param name="app.server.lib.global.dir" value="${app.server.weblogic.lib.global.dir}" />
						<param name="app.server.portal.dir" value="${app.server.weblogic.portal.dir}" />
						<param name="app.server.type" value="weblogic" />
					</antcall>
				</then>
				<elseif>
					<equals arg1="${test.build.bundle.weblogic}" arg2="true" />
					<then>
						<app-server-properties-update>
							app.server.type=weblogic
						</app-server-properties-update>

						<if>
							<equals arg1="${app.server.weblogic.version.build}" arg2="1221" />
							<then>
								<ant antfile="build-dist.xml" inheritAll="false" target="unzip-weblogic-custom" />
							</then>
							<else>
								<ant antfile="build-dist.xml" inheritAll="false" target="unzip-weblogic" />
							</else>
						</if>

						<antcall inheritAll="false" target="deploy" />

						<app-server-properties-reset />
					</then>
				</elseif>
			</if>

			<if>
				<or>
					<and>
						<equals arg1="${test.build.bundle.wildfly}" arg2="true" />
						<matches pattern="https?://" string="${test.build.portal.war.url}" />
					</and>
					<matches pattern="https?://" string="${test.build.bundle.wildfly.zip.url}" />
				</or>
				<then>
					<antcall inheritAll="false" target="prepare-test-bundle">
						<param name="app.server.lib.global.dir" value="${app.server.wildfly.lib.global.dir}" />
						<param name="app.server.portal.dir" value="${app.server.wildfly.portal.dir}" />
						<param name="app.server.type" value="wildfly" />
						<param name="test.app.server.bin.dir" value="${app.server.wildfly.bin.dir}" />
						<param name="test.build.bundle.zip.url" value="${test.build.bundle.wildfly.zip.url}" />
					</antcall>
				</then>
				<elseif>
					<equals arg1="${test.build.bundle.wildfly}" arg2="true" />
					<then>
						<ant antfile="build-dist.xml" inheritAll="false" target="build-dist-wildfly" />
					</then>
				</elseif>
			</if>

			<antcall target="deploy-license-xml" />

			<if>
				<matches pattern="https?://" string="${test.build.plugins.war.zip.url}" />
				<then>
					<mirrors-get
						dest="plugins.war.zip"
						src="${test.build.plugins.war.zip.url}"
					/>

					<unzip
						dest="."
						src="plugins.war.zip"
					>
						<mapper>
							<globmapper
								from="plugins/*"
								to="plugins/marketplace/*"
							/>
						</mapper>
					</unzip>

					<delete file="plugins.war.zip" />
				</then>
			</if>

			<if>
				<matches pattern="https?://" string="${test.extra.apps.zip.urls}" />
				<then>
					<mkdir dir="extraapps" />

					<for list="${test.extra.apps.zip.urls}" param="test.extra.apps.zip.url">
						<sequential>
							<mirrors-get
								dest="extraapps"
								src="@{test.extra.apps.zip.url}"
							/>
						</sequential>
					</for>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-test-cluster-properties">
		<sequential>
			<if>
				<not>
					<equals arg1="${app.server.type}" arg2="tomcat" />
				</not>
				<then>
					<fail>The public test clustering scripts are only available for Tomcat.</fail>
				</then>
			</if>

			<replace
				file="${app.server.tomcat.dir}/conf/server.xml"
				token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
				value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;0&quot;&gt;"
			/>

			<get-testcase-property property.name="app.server.bundles.size" />

			<if>
				<isset property="app.server.bundles.size" />
				<then>
					<var name="app.server.bundle.index" value="1" />

					<antelope:repeat count="${app.server.bundles.size}">
						<set-app-server-properties
							app.server.bundle.index="${app.server.bundle.index}"
						/>

						<replace
							file="${test.app.server.dir}/conf/server.xml"
							token="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;"
							value="&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;${test.app.server.leading.port.number}&quot;&gt;"
						/>

						<math
							datatype="int"
							operand1="${app.server.bundle.index}"
							operand2="1"
							operation="+"
							result="app.server.bundle.index"
						/>
					</antelope:repeat>

					<var name="app.server.bundle.index" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="print-file">
		<attribute name="file.name" />

		<sequential>
			<echo></echo>
			<echo>##</echo>
			<echo>## @{file.name}</echo>
			<echo>##</echo>
			<echo></echo>

			<loadfile
				property="file.content"
				srcFile="@{file.name}"
			/>

			<echo>${file.content}</echo>

			<var name="file.content" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="print-gc-logs">
		<attribute name="tomcat.gc.log" />
		<attribute name="tsant.gc.log" />
		<sequential>
			<if>
				<available file="/tmp/ant-gc.log" />
				<then>
					<loadfile
						property="ant-gc-log"
						srcFile="/tmp/ant-gc.log"
					/>

					<echo>
Ant GC log:

${ant-gc-log}
					</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/ant-gc.log</echo>
				</else>
			</if>

			<if if:true="@{tomcat.gc.log}">
				<available file="/tmp/tomcat-gc.log" />
				<then>
					<loadfile
						property="tomcat-gc-log"
						srcFile="/tmp/tomcat-gc.log"
					/>

					<echo>
Tomcat GC log:

${tomcat-gc-log}
					</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/tomcat-gc.log</echo>
				</else>
			</if>

			<if if:true="@{tsant.gc.log}">
				<available file="/tmp/tsant-gc.log" />
				<then>
					<loadfile
						property="tsant-gc-log"
						srcFile="/tmp/tsant-gc.log"
					/>

					<echo>
	Tsant GC log:

	${tsant-gc-log}</echo>
				</then>
				<else>
					<echo>Unable to read /tmp/tsant-gc.log</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-git-commit-plugins">
		<sequential>
			<beanshell>
				<![CDATA[
					File pluginsDir = null;

					String lpPluginsDirName = project.getProperty("lp.plugins.dir");

					if ((lpPluginsDirName == null) || lpPluginsDirName.equals("")) {
						File projectDir = new File(project.getProperty("project.dir"));

						String projectDirName = projectDir.getName();

						String pluginsDirName = "liferay-plugins" + projectDirName.substring("liferay-portal".length());

						pluginsDir = new File(projectDir.getParent(), pluginsDirName);
					}
					else {
						if (lpPluginsDirName.contains("${basedir.name}")) {
							lpPluginsDirName = lpPluginsDirName.substring(0, lpPluginsDirName.lastIndexOf("/"));
						}

						pluginsDir = new File(lpPluginsDirName);
					}

					project.setProperty("git.plugins.dir", pluginsDir.toString());
				]]>
			</beanshell>

			<exec dir="${git.plugins.dir}" executable="git" outputproperty="git.commit.plugins.rev.parse">
				<arg line="rev-parse HEAD" />
			</exec>

			<echo>Recording ${git.plugins.dir} with ${git.commit.plugins.rev.parse}.</echo>

			<var name="git.plugins.dir" unset="true" />

			<echo file="git-commit-plugins">${git.commit.plugins.rev.parse}</echo>

			<if>
				<isset property="env.JENKINS_HOME" />
				<then>
					<copy
						file="git-commit-plugins"
						todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-git-commit-portal">
		<sequential>
			<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
				<arg line="rev-parse HEAD" />
			</exec>

			<echo file="git-commit-portal">${git.commit.portal.rev.parse}</echo>

			<if>
				<isset property="env.JENKINS_HOME" />
				<then>
					<copy
						file="git-commit-portal"
						todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
					/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="record-test-class-file-names">
		<sequential>
			<fail message="Please set the property ${test.batch.name}." unless="test.batch.name" />

			<local name="portal.branch.name" />

			<condition else="${git.working.branch.name}" property="portal.branch.name" value="${env.TEST_PORTAL_BRANCH_NAME}">
				<isset property="env.TEST_PORTAL_BRANCH_NAME" />
			</condition>

			<local name="top.level.job.name" />

			<condition else="default" property="top.level.job.name" value="${env.TOP_LEVEL_JOB_NAME}">
				<isset property="env.TOP_LEVEL_JOB_NAME" />
			</condition>

			<beanshell>
				<![CDATA[
					import com.liferay.jenkins.results.parser.Job;
					import com.liferay.jenkins.results.parser.JobFactory;
					import com.liferay.jenkins.results.parser.test.clazz.group.AxisTestClassGroup;
					import com.liferay.jenkins.results.parser.test.clazz.group.BatchTestClassGroup;
					import com.liferay.jenkins.results.parser.test.clazz.group.TestClassGroupFactory;

					Job job = JobFactory.newJob(project.getProperty("top.level.job.name"), project.getProperty("env.CI_TEST_SUITE"), project.getProperty("portal.branch.name"), project.getProperty("env.REPOSITORY_NAME"));

					BatchTestClassGroup.BuildProfile buildProfile = BatchTestClassGroup.BuildProfile.PORTAL;

					String testPortalBuildProfile = project.getProperty("build.profile");

					if ((testPortalBuildProfile != null) && testPortalBuildProfile.equals("dxp")) {
						buildProfile = BatchTestClassGroup.BuildProfile.DXP;
					}

					BatchTestClassGroup batchTestClassGroup = TestClassGroupFactory.newBatchTestClassGroup(project.getProperty("test.batch.name"), buildProfile, job);

					int axisCount = batchTestClassGroup.getAxisCount();

					StringBuilder sb = new StringBuilder();

					for (i = 0; i < axisCount; i++) {
						AxisTestClassGroup axisTestClassGroup = batchTestClassGroup.getAxisTestClassGroup(i);

						List testClassGroup = axisTestClassGroup.getTestClassFiles();

						sb.append("TEST_CLASS_GROUP_");
						sb.append(i);
						sb.append("=");

						for (File testClass : testClassGroup) {
							sb.append(testClass.toPath());
							sb.append(",");
						}

						if (!testClassGroup.isEmpty()) {
							sb.setLength(sb.length() - 1);
						}

						sb.append("\n\n");
					}

					sb.append("TEST_CLASS_GROUPS=");

					for (int i = 0; i < axisCount; i++) {
						sb.append(i);
						sb.append(" ");
					}

					if (axisCount > 0) {
						sb.setLength(sb.length() - 1);
					}

					project.setProperty("test.class.file.names.properties.content", sb.toString());
				]]>
			</beanshell>

			<echo file="test.class.file.names.properties">${test.class.file.names.properties.content}</echo>

			<print-file file.name="test.class.file.names.properties" />
		</sequential>
	</macrodef>

	<macrodef name="record-test-csv-report">
		<attribute default="junit" name="test.type" />

		<sequential>
			<local name="test.batch.name" />

			<condition else="@{test.type}-test-csv-report-jdk8" property="test.batch.name" value="${test.batch.name}">
				<isset property="test.batch.name" />
			</condition>

			<local name="top.level.job.name" />

			<condition else="@{test.type}-test-csv-report" property="top.level.job.name" value="${env.TOP_LEVEL_JOB_NAME}">
				<isset property="env.TOP_LEVEL_JOB_NAME" />
			</condition>

			<beanshell>
				<![CDATA[
					import com.liferay.jenkins.results.parser.Job;
					import com.liferay.jenkins.results.parser.JobFactory;
					import com.liferay.jenkins.results.parser.test.clazz.group.BatchTestClassGroup;
					import com.liferay.jenkins.results.parser.test.clazz.group.JUnitBatchTestClassGroup;
					import com.liferay.jenkins.results.parser.test.clazz.group.NPMTestBatchTestClassGroup;
					import com.liferay.jenkins.results.parser.test.clazz.group.TestClassGroupFactory;

					try {
						Job job = JobFactory.newJob(project.getProperty("top.level.job.name"));

						BatchTestClassGroup.BuildProfile buildProfile = BatchTestClassGroup.BuildProfile.PORTAL;

						String testPortalBuildProfile = project.getProperty("build.profile");

						if ((testPortalBuildProfile != null) && testPortalBuildProfile.equals("dxp")) {
							buildProfile = BatchTestClassGroup.BuildProfile.DXP;
						}

						BatchTestClassGroup batchTestClassGroup = TestClassGroupFactory.newBatchTestClassGroup(project.getProperty("test.batch.name"), buildProfile, job);

						if (batchTestClassGroup instanceof JUnitBatchTestClassGroup ||
							batchTestClassGroup instanceof NPMTestBatchTestClassGroup) {

							batchTestClassGroup.writeTestCSVReportFile();
						}
					}
					catch (Exception e) {
						e.printStackTrace();

						throw e;
					}
				]]>
			</beanshell>
		</sequential>
	</macrodef>

	<macrodef name="request-cmis-repository-vm">
		<attribute name="cmis.repository.type" />

		<sequential>
			<local name="cmis.repository.lease.time" />

			<property name="cmis.repository.lease.time" value="1200000" />

			<beanshell>
				<![CDATA[
					import org.json.JSONObject;

					public JSONObject toJSONObject(String url) {
						return new JSONObject(toString(url));
					}

					public String toString(String url) {
						int retryCount = 0;

						while (true) {
							try {
								System.out.println("Downloading URL " + url);

								StringBuilder sb = new StringBuilder();

								URL urlObject = new URL(url);

								HttpURLConnection httpURLConnection = (HttpURLConnection)urlObject.openConnection();

								httpURLConnection.setRequestMethod("GET");
								httpURLConnection.setRequestProperty("Content-Type", "application/json");

								InputStream inputStream = httpURLConnection.getInputStream();

								InputStreamReader inputStreamReader = new InputStreamReader(inputStream);

								BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

								String line = null;

								while ((line = bufferedReader.readLine()) != null) {
									sb.append(line);
								}

								bufferedReader.close();

								System.out.println(sb.toString());

								return sb.toString();
							}
							catch (Exception e) {
								if (retryCount >= 5) {
									throw e;
								}

								System.out.println("Retry in 5 seconds: " + e.getMessage());

								retryCount++;

								Thread.sleep(5000);
							}
						}
					}

					String cmisRepositoryLeaseTime = project.getProperty("cmis.repository.lease.time");
					String cmisRepositoryType = project.getProperty("cmis.repository.type");
					String cmisRepositoryVMHostName = "";
					int minutes = 0;

					StringBuilder sb = new StringBuilder();

					sb.append("http://it.liferay.com/osb-ici-controller-web/vm/allocation/borrow?leaseTime=");
					sb.append(cmisRepositoryLeaseTime);
					sb.append("&resourceType=qa.");
					sb.append(cmisRepositoryType);

					while (true) {
						JSONObject jsonObject = toJSONObject(sb.toString());

						if (minutes >= 30) {
							throw new Exception("No available CMIS servers");
						}

						if (!jsonObject.has("hostname")) {
							System.out.println("Waiting for next available CMIS server: " + cmisRepositoryType);

							Thread.sleep(60000);

							minutes++;

							continue;
						}

						cmisRepositoryVMHostName = jsonObject.get("hostname");

						break;
					}

					System.out.println("Borrowing " + cmisRepositoryVMHostName);

					project.setProperty("cmis.repository.vm.host.name", cmisRepositoryVMHostName);
				]]>
			</beanshell>

			<if>
				<contains string="@{cmis.repository.type}" substring="documentum" />
				<then>
					<get-testcase-property property.name="osgi.app.includes" />

					<if>
						<contains string="${osgi.app.includes}" substring="documentum" />
						<then>
							<pathconvert property="app.bnd.file">
								<fileset
									dir="modules"
									includes="dxp/apps/documentum/app.bnd"
								/>
							</pathconvert>

							<loadproperties srcFile="${app.bnd.file}">
								<filterchain>
									<linecontains>
										<contains value="Liferay-Releng-App-Title" />
									</linecontains>
								</filterchain>
							</loadproperties>

							<if>
								<available file="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg" />
								<then>
									<property name="lpkg.path" value="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg" />
								</then>
								<elseif>
									<available file="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									<then>
										<property name="lpkg.path" value="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									</then>
								</elseif>
							</if>

							<if>
								<isset property="lpkg.path" />
								<then>
									<local name="tstamp.value" />

									<tstamp>
										<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
									</tstamp>

									<local name="lpkg.dir" />

									<property name="lpkg.dir" value="${tstamp.value}/lpkg-dir" />

									<mkdir dir="${lpkg.dir}" />

									<local name="lpkg.impl.include.name" />

									<property name="lpkg.impl.include.name" value="Liferay Documentum Connector - Impl.lpkg" />

									<unzip
										dest="${lpkg.dir}"
										src="${lpkg.path}"
									>
										<patternset>
											<include name="${lpkg.impl.include.name}" />
										</patternset>
									</unzip>

									<local name="lpkg.impl.path" />

									<pathconvert property="lpkg.impl.path" setonempty="false">
										<path>
											<fileset
												dir="${lpkg.dir}"
											>
												<include name="${lpkg.impl.include.name}" />
											</fileset>
										</path>
									</pathconvert>

									<local name="lpkg.impl.dir" />

									<property name="lpkg.impl.dir" value="${tstamp.value}/lpkg-impl-dir" />

									<mkdir dir="${lpkg.impl.dir}" />

									<local name="war.include.name" />

									<property name="war.include.name" value="documentum-hook-*.war" />

									<unzip
										dest="${lpkg.impl.dir}"
										src="${lpkg.impl.path}"
									>
										<patternset>
											<include name="${war.include.name}" />
										</patternset>
									</unzip>

									<local name="war.path" />

									<pathconvert property="war.path" setonempty="false">
										<path>
											<fileset
												dir="${lpkg.impl.dir}"
											>
												<include name="${war.include.name}" />
											</fileset>
										</path>
									</pathconvert>

									<local name="war.dir" />

									<property name="war.dir" value="${tstamp.value}/war-dir" />

									<mkdir dir="${war.dir}" />

									<unzip
										dest="${war.dir}"
										src="${war.path}"
									>
										<flattenmapper />
										<patternset>
											<include name="WEB-INF/classes/dfc.properties" />
										</patternset>
									</unzip>

									<propertyfile file="${war.dir}/dfc.properties">
										<entry key="dfc.docbroker.host[0]" value="${cmis.repository.vm.host.name}" />
									</propertyfile>

									<war
										destfile="${war.path}"
										update="true"
									>
										<zipfileset
											file="${war.dir}/dfc.properties"
											fullpath="WEB-INF/classes/dfc.properties"
										/>
									</war>

									<zip
										destfile="${lpkg.impl.path}"
										update="true"
									>
										<zipfileset
											dir="${lpkg.impl.dir}"
										>
											<include name="${war.include.name}" />
										</zipfileset>
									</zip>

									<zip
										destfile="${lpkg.path}"
										update="true"
									>
										<zipfileset
											dir="${lpkg.dir}"
										>
											<include name="${lpkg.impl.include.name}" />
										</zipfileset>
									</zip>

									<delete dir="${tstamp.value}" />
								</then>
								<else>
									<propertyfile file="${project.dir}/modules/dxp/apps/documentum/documentum-hook/docroot/WEB-INF/src/dfc.properties">
										<entry key="dfc.docbroker.host[0]" value="${cmis.repository.vm.host.name}" />
									</propertyfile>
								</else>
							</if>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="rsync">
		<attribute name="rsync.dest" />
		<attribute name="rsync.src" />

		<sequential>
			<get-master-hostname />

			<var name="rsync.dest" unset="true" />

			<antelope:stringutil property="rsync.dest" string="@{rsync.dest}">
				<antelope:replace regex="\(" replacement="\\(" />
				<antelope:replace regex="\)" replacement="\\)" />
			</antelope:stringutil>

			<var name="rsync.src" unset="true" />

			<antelope:stringutil property="rsync.src" string="@{rsync.src}">
				<antelope:replace regex="\(" replacement="\\(" />
				<antelope:replace regex="\)" replacement="\\)" />
			</antelope:stringutil>

			<execute>
				rsync -avz ${rsync.src} ${master.hostname}::${rsync.dest}
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="set-app-server-properties">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />

		<sequential>
			<var name="test.app.server.bin.dir" unset="true" />
			<var name="test.app.server.classes.portal.dir" unset="true" />
			<var name="test.app.server.deploy.dir" unset="true" />
			<var name="test.app.server.dir" unset="true" />
			<var name="test.app.server.leading.port.number" unset="true" />
			<var name="test.app.server.liferay.home" unset="true" />
			<var name="test.app.server.parent.dir" unset="true" />

			<math
				datatype="int"
				operand1="@{app.server.bundle.index}"
				operand2="8"
				operation="+"
				result="test.app.server.leading.port.number"
			/>

			<if>
				<equals arg1="@{app.server.bundle.index}" arg2="0" />
				<then>
					<var name="test.app.server.bin.dir" value="@{app.server.bin.dir}" />
					<var name="test.app.server.classes.portal.dir" value="${app.server.classes.portal.dir}" />
					<var name="test.app.server.deploy.dir" value="${app.server.deploy.dir}" />
					<var name="test.app.server.dir" value="${app.server.dir}" />
					<var name="test.app.server.liferay.home" value="${liferay.home}" />
					<var name="test.app.server.parent.dir" value="${app.server.parent.dir}" />
				</then>
				<else>
					<antelope:stringutil property="test.app.server.bin.dir" string="@{app.server.bin.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.classes.portal.dir" string="${app.server.classes.portal.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.deploy.dir" string="${app.server.deploy.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<antelope:stringutil property="test.app.server.dir" string="${app.server.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>

					<var name="test.app.server.liferay.home" value="${app.server.parent.dir}-@{app.server.bundle.index}" />

					<antelope:stringutil property="test.app.server.parent.dir" string="${app.server.parent.dir}">
						<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-@{app.server.bundle.index}$2" />
					</antelope:stringutil>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="set-portal-impl-portal-test-ext-properties">
		<sequential>
			<generate-jdbc-properties properties.file="portal-impl/test/portal-test-ext.properties">
				<post-action>
					<echo file="@{properties.file}" append="true"><![CDATA[
module.framework.base.dir=${liferay.home}/osgi

memory.scheduler.org.quartz.threadPool.threadCount=1

persisted.scheduler.org.quartz.threadPool.threadCount=1

sprite.root.dir=/tmp/sprite]]></echo>
				</post-action>
			</generate-jdbc-properties>
		</sequential>
	</macrodef>

	<macrodef name="set-portal-impl-system-ext-properties">
		<sequential>
			<echo file="portal-impl/test/system-ext.properties">com.liferay.portal.kernel.util.ServiceProxyFactory.timeout=300000
log.sanitizer.enabled=false</echo>
		</sequential>
	</macrodef>

	<macrodef name="set-sybase-charset-utf8">
		<sequential>
			<get-database-property property.name="database.password" />
			<get-database-property property.name="database.schema" />
			<get-database-property property.name="database.username" />

			<echo>${env.SYBASE}/${env.SYBASE_ASE}/bin/charset -P${database.password} -S${database.schema} -U${database.username} binary.srt utf8</echo>

			<exec executable="${env.SYBASE}/${env.SYBASE_ASE}/bin/charset" timeout="60000">
				<arg value="-P${database.password}" />
				<arg value="-S${database.schema}" />
				<arg value="-U${database.username}" />
				<arg value="binary.srt" />
				<arg value="utf8" />
			</exec>

			<echo file="set-charset.sql">sp_configure 'default sortorder id', 50, 'utf8'
go
commit
go</echo>

			<print-file file.name="set-charset.sql" />

			<exec executable="${sybase.executable}">
				<arg value="-P${database.password}" />
				<arg value="-S${database.schema}" />
				<arg value="-U${database.username}" />
				<arg line="-i set-charset.sql" />
			</exec>

			<delete file="set-charset.sql" />
			<echo>service sybase restart</echo>

			<exec executable="service">
				<arg value="sybase" />
				<arg value="restart" />
			</exec>

			<echo>Sleep for 30 seconds.</echo>

			<sleep seconds="30" />

			<echo>service sybase restart</echo>

			<exec executable="service">
				<arg value="sybase" />
				<arg value="restart" />
			</exec>

			<echo>Sleep for 30 seconds.</echo>

			<sleep seconds="30" />

			<waitfor maxwait="60" maxwaitunit="second">
				<socket port="5000" server="localhost" />
			</waitfor>

			<echo file="get-charset.sql">sp_helpsort
go</echo>

			<print-file file.name="get-charset.sql" />

			<exec executable="${sybase.executable}">
				<arg value="-P${database.password}" />
				<arg value="-S${database.schema}" />
				<arg value="-U${database.username}" />
				<arg line="-i get-charset.sql" />
			</exec>

			<delete file="get-charset.sql" />
		</sequential>
	</macrodef>

	<macrodef name="set-tomcat-version-number">
		<attribute name="liferay.portal.bundle" />

		<sequential>
			<if>
				<equals arg1="@{liferay.portal.bundle}" arg2="6.0.6" />
				<then>
					<var name="app.server.tomcat.version" value="6.0.29" />
				</then>
				<elseif>
					<equals arg1="@{liferay.portal.bundle}" arg2="6.0.12" />
					<then>
						<var name="app.server.tomcat.version" value="6.0.32" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="6.1.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.1.30" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="7.0.40" />
					</then>
				</elseif>
				<elseif>
					<equals arg1="@{liferay.portal.bundle}" arg2="6.1.20" />
					<then>
						<var name="app.server.tomcat.version" value="7.0.27" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.0" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.3" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.3" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.4" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.5" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.6" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.7" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.8" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.9" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.10" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.11" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.12" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.13" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="7.0.42" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.4" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.5" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.14" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.15" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.16" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.17" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.18" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.19" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.20" />
						<equals arg1="@{liferay.portal.bundle}" arg2="6.2.10.21" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="7.0.62" />
					</then>
				</elseif>
				<elseif>
					<contains string="@{liferay.portal.bundle}" substring="6.2" />
					<then>
						<var name="app.server.tomcat.version" value="7.0.90" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.0" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.3" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.4" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.5" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.6" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.2" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.3" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.4" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.5" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.6" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.7" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.8" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.9" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.10" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.11" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="8.0.32" />
					</then>
				</elseif>
				<elseif>
					<equals arg1="@{liferay.portal.bundle}" arg2="7.0.10.12" />
					<then>
						<var name="app.server.tomcat.version" value="8.0.53" />
					</then>
				</elseif>
				<elseif>
					<contains string="@{liferay.portal.bundle}" substring="7.0" />
					<then>
						<var name="app.server.tomcat.version" value="8.0.53" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.0" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.10" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.10.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.10.2" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="9.0.6" />
					</then>
				</elseif>
				<elseif>
					<equals arg1="@{liferay.portal.bundle}" arg2="7.1.10.3" />
					<then>
						<var name="app.server.tomcat.version" value="9.0.17" />
					</then>
				</elseif>
				<elseif>
					<or>
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.1" />
						<equals arg1="@{liferay.portal.bundle}" arg2="7.1.2" />
					</or>
					<then>
						<var name="app.server.tomcat.version" value="9.0.10" />
					</then>
				</elseif>
			</if>

			<var name="app.server.tomcat.dir" value="${app.server.parent.dir}/tomcat-${app.server.tomcat.version}" />
			<var name="app.server.tomcat.bin.dir" value="${app.server.parent.dir}/tomcat-${app.server.tomcat.version}/bin" />
			<var name="app.server.tomcat.classes.portal.dir" value="${app.server.parent.dir}/tomcat-${app.server.tomcat.version}/webapps/ROOT/WEB-INF/classes" />
			<var name="app.server.tomcat.lib.global.dir" value="${app.server.parent.dir}/tomcat-${app.server.tomcat.version}/lib/ext" />
			<var name="app.server.tomcat.lib.portal.dir" value="${app.server.parent.dir}/tomcat-${app.server.tomcat.version}/webapps/ROOT/WEB-INF/lib" />
			<var name="app.server.tomcat.zip.name" value="apache-tomcat-${app.server.tomcat.version}.zip" />
			<var name="app.server.tomcat.zip.url" value="http://archive.apache.org/dist/tomcat/tomcat-9/v${app.server.tomcat.version}/bin/${app.server.tomcat.zip.name}" />

			<echo append="true" file="app.server.${user.name}.properties">
				app.server.tomcat.dir=${app.server.tomcat.dir}
				app.server.tomcat.bin.dir=${app.server.tomcat.bin.dir}
				app.server.tomcat.classes.portal.dir=${app.server.tomcat.classes.portal.dir}
				app.server.tomcat.lib.global.dir=${app.server.tomcat.lib.global.dir}
				app.server.tomcat.lib.portal.dir=${app.server.tomcat.lib.portal.dir}
				app.server.tomcat.version=${app.server.tomcat.version}
				app.server.tomcat.zip.name=${app.server.tomcat.zip.name}
				app.server.tomcat.zip.url=${app.server.tomcat.zip.url}
			</echo>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-jboss">
		<sequential>
			<setup-testable-jboss-jsp-configuration />
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-jboss-jsp-configuration">
		<sequential>
			<if>
				<not>
					<resourcecontains
						resource="${app.server.jboss.instance.dir}/configuration/standalone.xml"
						substring="source-vm"
					/>
				</not>
				<then>
					<replace
						file="${app.server.jboss.instance.dir}/configuration/standalone.xml"
					>
						<replacetoken><![CDATA[jsp-configuration development="true"]]></replacetoken>
						<replacevalue><![CDATA[jsp-configuration development="true" source-vm="1.8" target-vm="1.8"]]></replacevalue>
					</replace>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat">
		<sequential>
			<setup-testable-tomcat-logging />

			<setup-testable-tomcat-osgi-modules />

			<setup-testable-tomcat-setenv />
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-aspectj-agent">
		<sequential>
			<if>
				<not>
					<resourcecontains
						resource="${app.server.tomcat.dir}/bin/setenv.sh"
						substring="${aspectj.agent}"
					/>
				</not>
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.sh">
						<![CDATA[
if [ "$1" = "aspectj" ]
then
	CATALINA_OPTS="${CATALINA_OPTS} ${aspectj.agent} -Dorg.aspectj.weaver.loadtime.configuration=${aspectj.configuration}"

	shift
fi
						]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-jacoco-agent">
		<sequential>
			<if>
				<not>
					<available file="${app.server.tomcat.dir}/bin/jacocoagent.jar" />
				</not>
				<then>
					<copy
						file="${jacoco.agent.jar}"
						todir="${app.server.tomcat.dir}/bin"
					/>
				</then>
			</if>

			<var name="jacoco.agent" value="-javaagent:${app.server.tomcat.dir}/bin/jacocoagent.jar${jacoco.agent.configuration}" />

			<if>
				<not>
					<resourcecontains
						resource="${app.server.tomcat.dir}/bin/setenv.sh"
						substring="${jacoco.agent}"
					/>
				</not>
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.sh">
						<![CDATA[
if [ "$1" = "jacoco" ]
then
	JACOCO_OPTS="${jacoco.agent}"

	CATALINA_OPTS="${CATALINA_OPTS} ${JACOCO_OPTS}"

	shift
fi
						]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-jpda-address">
		<sequential>
			<if>
				<not>
					<resourcecontains
						resource="${app.server.tomcat.dir}/bin/setenv.sh"
						substring="JPDA_ADDRESS"
					/>
				</not>
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.sh">
						<![CDATA[
JPDA_ADDRESS="8000"
						]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-logging">
		<sequential>
			<if>
				<and>
					<equals arg1="@{testable.tomcat.debug.logging}" arg2="on" />
					<not>
						<resourcecontains
							resource="${app.server.tomcat.dir}/conf/logging.properties"
							substring="org.apache.catalina.level"
						/>
					</not>
				</and>
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/conf/logging.properties">
						<![CDATA[
org.apache.catalina.level=ALL

org.apache.catalina.loader.WebappClassLoader.level=INFO
org.apache.catalina.loader.WebappLoader.level=INFO
org.apache.catalina.startup.ClassLoaderFactory.level=INFO]]>
					</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-osgi-modules">
		<sequential>
			<condition else="${env.TEST_BATCH_NAME}" property="test.batch.name" value="${test.batch.name}">
				<isset property="test.batch.name" />
			</condition>

			<if>
				<or>
					<contains string="${test.batch.name}" substring="integration" />
					<contains string="${test.batch.name}" substring="unit" />
				</or>
				<then>
					<mkdir dir="${liferay.home}/osgi/test" />

					<copy
						todir="${liferay.home}/osgi/modules"
					>
						<fileset
							dir="${liferay.home}/osgi/test"
						/>
					</copy>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="setup-testable-tomcat-setenv">
		<sequential>
			<setup-testable-tomcat-jacoco-agent />

			<setup-testable-tomcat-aspectj-agent />

			<setup-testable-tomcat-jpda-address />
		</sequential>
	</macrodef>

	<macrodef name="start-android-device">
		<sequential>
			<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

			<echo file="${user.home}/.android/ddms.cfg">pingId=0</echo>

			<execute>
				echo no | ${mobile.android.home}/tools/android create avd -f -n deviceName -t android-19
			</execute>

			<echo append="true" file="${user.home}/.android/avd/deviceName.avd/config.ini">
				hw.keyboard=yes
			</echo>

			<exec executable="/bin/bash" os="${os.apple},${os.unix}" spawn="true">
				<arg value="-c" />
				<arg value="${mobile.android.home}/tools/emulator -avd deviceName -no-boot-anim" />
			</exec>

			<exec executable="cmd.exe" os="${os.windows}">
				<arg value="/c" />
				<arg value="${mobile.android.home}/tools/emulator -avd deviceName -no-boot-anim" />
			</exec>

			<echo file="wait_for_android_device.sh">
				<![CDATA[
					#!/bin/bash

					bootanim=""

					until [[ $bootanim =~ "stopped" ]];
					do
						bootanim=`${mobile.android.home}/platform-tools/adb shell getprop init.svc.bootanim`

						sleep 1
					done
				]]>
			</echo>

			<chmod
				file="wait_for_android_device.sh"
				perm="a+x"
			/>

			<exec executable="${basedir}/wait_for_android_device.sh" timeout="300000" />

			<delete file="wait_for_android_device.sh" />

			<execute>
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/swipe_down.sh /data/local
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/swipe_up.sh /data/local
				${mobile.android.home}/platform-tools/adb push ${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/dependencies/mobile/tap.sh /data/local

				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/swipe_down.sh
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/swipe_up.sh
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell chmod 0777 /data/local/tap.sh

				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell settings put system pointer_location 1
				${mobile.android.home}/platform-tools/adb -s emulator-5554 shell settings put system show_touches 1
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server">
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="true" name="delete.liferay.home" />
		<attribute default="" name="testable.portal.started.marker.file" />

		<sequential>
			<start-app-server-cmd
				app.server.bundle.index="@{app.server.bundle.index}"
				delete.liferay.home="@{delete.liferay.home}"
				test.docker.environment="${test.docker.environment}"
				testable.portal.started.marker.file="@{testable.portal.started.marker.file}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="start-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="true" name="delete.liferay.home" />
		<attribute default="host" name="docker.network.name" />
		<attribute default="false" name="test.docker.environment" />
		<attribute default="" name="testable.portal.started.marker.file" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.index="@{app.server.bundle.index}"
			/>

			<local name="portal.not.started" />

			<waitfor maxwait="1" maxwaitunit="second" timeoutproperty="portal.not.started">
				<socket port="${test.app.server.leading.port.number}080" server="localhost" />
			</waitfor>

			<if>
				<isset property="portal.not.started" />
				<then>
					<if>
						<not>
							<equals arg1="@{testable.portal.started.marker.file}" arg2="" />
						</not>
						<then>
							<echo file="@{testable.portal.started.marker.file}" message="1" />
						</then>
					</if>

					<if>
						<or>
							<equals arg1="${app.server.type}" arg2="jboss" />
							<equals arg1="${app.server.type}" arg2="wildfly" />
						</or>
						<then>
							<echo file="${test.app.server.deploy.dir}/ROOT.war.dodeploy"></echo>
						</then>
					</if>

					<get-testcase-property property.name="portal.version" />

					<if>
						<equals arg1="@{delete.liferay.home}" arg2="true" />
						<then>
							<antcall target="delete-liferay-home">
								<param name="keep.hypersonicdb" value="true" />
							</antcall>
						</then>
					</if>

					<delete failonerror="false" includeemptydirs="true">
						<fileset
							dir="${test.app.server.dir}/logs"
							excludes="catalina.*.log"
						/>
					</delete>

					<get-java-jdk-bundle-version test.batch.name="${test.batch.name}" />

					<get-java-jdk-bundle-type test.batch.name="${test.batch.name}" />

					<get-java-jdk-home type="${java.jdk.bundle.type}" version="${java.jdk.bundle.version}" />

					<if>
						<equals arg1="${test.ant.launched.by.selenium}" arg2="true" />
						<then>
							<parallel>
								<if>
									<istrue value="${test.docker.environment}" />
									<then>
										<echo>docker run -d -p ${test.app.server.leading.port.number}080:${test.app.server.leading.port.number}080 -v ${app.server.parent.dir}:${app.server.parent.dir} --cidfile=docker.process.pid --network=@{docker.network.name} openjdk:8-alpine ${app.server.bin.dir}/${app.server.start.executable} ${app.server.start.executable.arg.line}</echo>

										<parallel>
											<exec executable="docker">
												<arg line="run -d" />
												<arg line="-p ${test.app.server.leading.port.number}080:${test.app.server.leading.port.number}080" />
												<arg value="-v" />
												<arg value="${app.server.parent.dir}:${app.server.parent.dir}" />
												<arg value="--cidfile=docker.process.pid" />
												<arg value="--network=@{docker.network.name}" />
												<arg value="openjdk:8u191-jdk-alpine3.8" />
												<arg value="${app.server.bin.dir}/${app.server.start.executable}" />
												<arg value="${app.server.start.executable.arg.line}" />
											</exec>
										</parallel>
									</then>
									<else>
										<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" resolveexecutable="true">
											<arg line="${app.server.start.executable.arg.line}" />
											<env key="JAVA_HOME" path="${java.jdk.home}" />
										</exec>
									</else>
								</if>

								<wait-for-app-server app.server.bin.dir="@{app.server.bin.dir}" app.server.bundle.index="@{app.server.bundle.index}" />
							</parallel>
						</then>
						<else>
							<get-testcase-property property.name="ext.plugins.includes" />

							<parallel>
								<if>
									<not>
										<isset property="ext.plugins.includes" />
									</not>
									<then>
										<sequential>
											<wait-for-app-server app.server.bin.dir="@{app.server.bin.dir}" app.server.bundle.index="@{app.server.bundle.index}" />
										</sequential>
									</then>
								</if>

								<daemons>
									<if>
										<istrue value="${test.docker.environment}" />
										<then>
											<echo>docker run -d -p ${test.app.server.leading.port.number}080:${test.app.server.leading.port.number}080 -v ${app.server.parent.dir}:${app.server.parent.dir} --cidfile=docker.process.pid --network=@{docker.network.name} openjdk:8-alpine ${app.server.bin.dir}/${app.server.start.executable} ${app.server.start.executable.arg.line}</echo>

											<exec executable="docker">
												<arg line="run -d" />
												<arg line="-p ${test.app.server.leading.port.number}080:${test.app.server.leading.port.number}080" />
												<arg value="-v" />
												<arg value="${app.server.parent.dir}:${app.server.parent.dir}" />
												<arg value="--cidfile=docker.process.pid" />
												<arg value="--network=@{docker.network.name}" />
												<arg value="openjdk:8u191-jdk-alpine3.8" />
												<arg value="${app.server.bin.dir}/${app.server.start.executable}" />
												<arg value="${app.server.start.executable.arg.line}" />
											</exec>
										</then>
										<else>
											<exec dir="${test.app.server.bin.dir}" executable="${app.server.start.executable}" failonerror="true" resolveexecutable="true">
												<arg line="${app.server.start.executable.arg.line}" />
												<env key="JAVA_HOME" path="${java.jdk.home}" />
											</exec>
										</else>
									</if>
								</daemons>
							</parallel>
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-appium">
		<sequential>
			<if>
				<or>
					<equals arg1="${browser.type}" arg2="android" />
					<equals arg1="${browser.type}" arg2="androidchrome" />
				</or>
				<then>
					<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

					<parallel>
						<daemons>
							<exec executable="/bin/bash" os="${os.apple},${os.unix}">
								<env key="ANDROID_HOME" value="${mobile.android.home}" />
								<env key="PATH" value="${env.PATH}:${mobile.android.home}/tools:${mobile.android.home}/platform-tools" />
								<arg value="-c" />
								<arg value="${appium.unix.cmd}" />
							</exec>

							<exec dir="${appium.win32.dir}" executable="cmd.exe" os="${os.windows}">
								<env key="ANDROID_HOME" value="${mobile.android.home}" />
								<env key="Path" value="${env.Path}:${mobile.android.home}/tools:${mobile.android.home}/platform-tools" />
								<arg value="/c" />
								<arg value="${appium.win32.cmd}" />
							</exec>
						</daemons>
					</parallel>
				</then>
				<elseif>
					<equals arg1="${browser.type}" arg2="iossafari" />
					<then>
						<parallel>
							<daemons>
								<exec executable="/bin/bash" os="${os.apple}">
									<arg value="-c" />
									<arg value="${appium.unix.cmd}" />
								</exec>
							</daemons>
						</parallel>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-docker-database">
		<sequential>
			<get-database-property property.name="database.host" />
			<get-database-property property.name="database.docker.database.options" />
			<get-database-property property.name="database.docker.image" />
			<get-database-property property.name="database.docker.run.options" />

			<property name="database.docker.database.options" value="" />
			<property name="database.docker.run.options" value="" />

			<local name="database.docker.network.run.option" />

			<condition else="" property="database.docker.network.run.option" value="--network=${env.DOCKER_NETWORK_NAME}">
				<isset property="env.DOCKER_NETWORK_NAME" />
			</condition>

			<local name="docker.start.script" />

			<property name="docker.start.script" value="docker_start.sh" />

			<echo file="${docker.start.script}">
				<![CDATA[
					docker run \
						--detach \
						--hostname=${database.host} \
						--interactive \
						--name=${database.host} \
						--tty \
						\
						${database.docker.network.run.option} \
						${database.docker.run.options} \
						\
						${database.docker.image} \
						\
						${database.docker.database.options}
				]]>
			</echo>

			<chmod
				perm="a+x"
			>
				<fileset
					dir="."
					includes="${docker.start.script}"
				/>
			</chmod>

			<exec executable="/bin/bash" os="${os.apple},${os.unix}">
				<arg value="${docker.start.script}" />
			</exec>

			<exec executable="cmd.exe" os="${os.windows}">
				<arg value="${docker.start.script}" />
			</exec>

			<delete file="${docker.start.script}" />

			<if>
				<or>
					<equals arg1="${database.type}" arg2="mariadb" />
					<equals arg1="${database.type}" arg2="mysql" />
				</or>
				<then>
					<property location="${project.dir}/setup.sh" name="setup.sh.file" />

					<local name="database.name" />

					<condition else="MariaDB" property="database.name" value="MySQL">
						<equals arg1="${database.type}" arg2="mysql" />
					</condition>

					<get-database-property property.name="database.host" />
					<get-database-property property.name="database.version" />

					<echo file="${setup.sh.file}">
						<![CDATA[
							#!/bin/bash

							while ! mysqladmin ping --host=${database.host} --silent
							do
								echo "Waiting for ${database.name} ${database.version} to be ready"

								sleep 10
							done
						]]>
					</echo>

					<get-database-property property.name="database.host" />

					<execute>
						<![CDATA[
							docker cp ${setup.sh.file} ${database.host}:/tmp/setup.sh

							docker exec ${database.host} /bin/bash /tmp/setup.sh
						]]>
					</execute>
				</then>
				<elseif>
					<equals arg1="${database.type}" arg2="oracle" />
					<then>
						<property location="${project.dir}/setup.sh" name="setup.sh.file" />

						<get-database-property property.name="database.version" />

						<echo file="${setup.sh.file}">
							<![CDATA[
								#!/bin/bash

								sqlplus ${oracle.admin.user}/${oracle.admin.password} @/tmp/setup.sql

								while [[ "$(${ORACLE_HOME}/bin/lsnrctl status | grep READY)" == "" ]]
								do
									echo "Waiting for Oracle ${database.version} to be ready"

									sleep 10
								done

								${ORACLE_HOME}/bin/lsnrctl status
							]]>
						</echo>

						<property location="${project.dir}/setup.sql" name="setup.sql.file" />

						<echo file="${setup.sql.file}">
							<![CDATA[
								alter system set result_cache_max_size=24M scope=spfile;
								alter system set sga_target=4928M scope=spfile;
								alter system set shared_pool_reserved_size=40M scope=spfile;

								quit;
							]]>
						</echo>

						<get-database-property property.name="database.host" />

						<execute>
							<![CDATA[
								docker cp ${setup.sh.file} ${database.host}:/tmp/setup.sh
								docker cp ${setup.sql.file} ${database.host}:/tmp/setup.sql

								docker exec ${database.host} /bin/bash /tmp/setup.sh
							]]>
						</execute>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${database.type}" arg2="postgresql" />
					<then>
						<property location="setup.sh" name="setup.sh.file" />

						<get-database-property property.name="database.version" />

						<echo file="${setup.sh.file}">
							<![CDATA[
								#!/bin/bash

								while [[ "$(pg_isready | grep 'accepting connections')" == "" ]]
								do
									echo "Waiting for PostgreSQL ${database.version} to be ready"

									sleep 10
								done

								pg_isready
							]]>
						</echo>

						<get-database-property property.name="database.host" />

						<execute>
							<![CDATA[
								docker cp ${setup.sh.file} ${database.host}:/tmp/setup.sh

								docker exec ${database.host} /bin/bash /tmp/setup.sh
							]]>
						</execute>
					</then>
				</elseif>
				<elseif>
					<equals arg1="${database.type}" arg2="sybase" />
					<then>
						<property location="setup.sh" name="setup.sh.file" />

						<get-database-property property.name="database.version" />

						<echo file="${setup.sh.file}">
							<![CDATA[
								#!/bin/bash

								while ! nc -z ${database.host} 5000
								do
									echo "Waiting for Sybase ${database.version} to be ready"

									sleep 10
								done
							]]>
						</echo>

						<get-database-property property.name="database.host" />

						<execute>
							<![CDATA[
								docker cp ${setup.sh.file} ${database.host}:/tmp/setup.sh

								docker exec ${database.host} /bin/bash /tmp/setup.sh
							]]>
						</execute>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-lcs-app-server">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="8" name="app.server.leading.port.number" />

		<sequential>
			<parallel>
				<sequential>
					<waitfor maxwait="5" maxwaitunit="minute" timeoutproperty="app.server.waiting.timeout">
						<socket port="@{app.server.leading.port.number}080" server="localhost" />
					</waitfor>
				</sequential>
				<daemons>
					<exec dir="@{app.server.bin.dir}" executable="${app.server.start.executable}" failonerror="true" resolveexecutable="true">
						<arg line="${app.server.start.executable.arg.line}" />
					</exec>
				</daemons>
			</parallel>

			<if>
				<equals arg1="@{app.server.bundle.index}" arg2="0" />
				<then>
					<record action="stop" name="${project.dir}/log" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-test-smtp-server">
		<sequential>
			<mirrors-get
				dest="${test.smtp.server.dir}/MockMock.jar"
				src="${test.smtp.server.url}"
			/>

			<parallel>
				<daemons>
					<java
						fork="true"
						jar="${test.smtp.server.dir}/MockMock.jar"
					>
						<arg line="-p 25000" />
					</java>
				</daemons>
			</parallel>
		</sequential>
	</macrodef>

	<macrodef name="stop-android-device">
		<sequential>
			<fail message="Please set the property ${mobile.android.home}." unless="mobile.android.home" />

			<execute>
				${mobile.android.home}/platform-tools/adb emu kill
				${mobile.android.home}/tools/android delete avd -n deviceName
			</execute>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server">
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="0" name="app.server.explicit.stop.count" />

		<sequential>
			<if>
				<istrue value="${test.docker.environment}" />
				<then>
					<stop-app-server-docker-cmd
						app.server.bundle.index="@{app.server.bundle.index}"
						app.server.explicit.stop.count="@{app.server.explicit.stop.count}"
					/>
				</then>
				<else>
					<stop-app-server-cmd
						app.server.bundle.index="@{app.server.bundle.index}"
						app.server.explicit.stop.count="@{app.server.explicit.stop.count}"
					/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="0" name="app.server.explicit.stop.count" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.index="@{app.server.bundle.index}"
			/>

			<get-java-jdk-bundle-version test.batch.name="${test.batch.name}" />

			<get-java-jdk-bundle-type test.batch.name="${test.batch.name}" />

			<get-java-jdk-home type="${java.jdk.bundle.type}" version="${java.jdk.bundle.version}" />

			<parallel>
				<daemons>
					<exec dir="${test.app.server.bin.dir}" executable="${app.server.stop.executable}" resolveexecutable="true">
						<arg line="${app.server.stop.executable.arg.line}" />
						<env key="JAVA_HOME" path="${java.jdk.home}" />
					</exec>
				</daemons>
				<sequential>
					<if>
						<isset property="env.HOSTNAME" />
						<then>
							<property name="server.host" value="${env.HOSTNAME}" />
						</then>
						<else>
							<property name="server.host" value="localhost" />
						</else>
					</if>

					<waitfor maxwait="5" maxwaitunit="minute" timeoutproperty="app.server.stopping.timeout">
						<and>
							<not>
								<socket port="${test.app.server.leading.port.number}080" server="localhost" />
							</not>
							<not>
								<socket port="${test.app.server.leading.port.number}099" server="${server.host}" />
							</not>
						</and>
					</waitfor>

					<if>
						<equals arg1="${app.server.type}" arg2="wildfly" />
						<then>
							<retry retrycount="10">
								<sequential>
									<execute>
										<![CDATA[
											jps > jps_output
										]]>
									</execute>

									<trycatch property="shutdown.error">
										<try>
											<if>
												<resourcecontains
													resource="jps_output"
													substring="jboss-modules.jar"
												/>
												<then>
													<fail />
												</then>
											</if>
										</try>
										<catch>
											<sleep seconds="5" />

											<fail message="Server failed to fully shut down." />
										</catch>
									</trycatch>
								</sequential>
							</retry>

							<delete file="jps_output" />
						</then>
					</if>

					<if>
						<and>
							<isset property="app.server.stopping.timeout" />
							<not>
								<equals arg1="${app.server.type}" arg2="tcserver" />
							</not>
						</and>
						<then>
							<get-jstack-output process.name="Bootstrap" />

							<if>
								<and>
									<equals arg1="${app.server.type}" arg2="weblogic" />
									<isset property="env.HOSTNAME" />
								</and>
								<then>
									<replaceregexp
										file="${app.server.weblogic.bin.dir}/stopWebLogic.sh"
										flags="g"
										match="(t3:\/\/)[^:]*(:\d+)"
										replace="\1${env.HOSTNAME}\2"
									/>
								</then>
							</if>

							<fail message="Server is still available at ${app.server.waiting.url}.${line.separator}${jstack.output}">
								<condition>
									<equals arg1="@{app.server.explicit.stop.count}" arg2="3" />
								</condition>
							</fail>

							<math
								datatype="int"
								operand1="@{app.server.explicit.stop.count}"
								operand2="1"
								operation="+"
								result="app.server.explicit.stop.count"
							/>

							<stop-app-server
								app.server.bundle.index="@{app.server.bundle.index}"
								app.server.explicit.stop.count="${app.server.explicit.stop.count}"
							/>
						</then>
					</if>
				</sequential>
			</parallel>
		</sequential>
	</macrodef>

	<macrodef name="stop-app-server-docker-cmd">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="0" name="app.server.explicit.stop.count" />

		<sequential>
			<set-app-server-properties
				app.server.bin.dir="@{app.server.bin.dir}"
				app.server.bundle.index="@{app.server.bundle.index}"
			/>

			<loadfile
				property="docker.process.pid"
				srcfile="docker.process.pid"
			/>

			<exec executable="docker">
				<arg line="container stop ${docker.process.pid}" />
			</exec>

			<exec executable="docker">
				<arg line="container rm ${docker.process.pid}" />
			</exec>

			<delete file="docker.process.pid" />
		</sequential>
	</macrodef>

	<macrodef name="stop-appium">
		<sequential>
			<exec executable="/bin/bash" os="${os.apple},${os.unix}">
				<arg value="-c" />
				<arg value="killall node" />
			</exec>

			<exec executable="/bin/bash" os="${os.unix}">
				<arg value="-c" />
				<arg value="fuser -k 9515/tcp" />
			</exec>

			<exec executable="cmd.exe" os="${os.windows}">
				<arg value="/c" />
				<arg value="tskill node" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="stop-chrome-driver">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<execute failonerror="false">
						killall chromedriver
					</execute>
				</then>
				<else>
					<execute failonerror="false">
						taskkill.exe /F /IM chromedriver.exe
					</execute>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-docker-database">
		<sequential>
			<get-database-property property.name="database.host" />

			<local name="docker.stop.script" />

			<property name="docker.stop.script" value="docker_stop.sh" />

			<echo file="${docker.stop.script}">
				<![CDATA[
					docker_rm_list=$(docker ps -a -q --filter="name=${env.HOSTNAME}_")

					if [[ "${docker_rm_list}" != "" ]]
					then
						docker kill ${docker_rm_list}

						docker rm ${docker_rm_list}
					fi
				]]>
			</echo>

			<chmod
				perm="a+x"
			>
				<fileset
					dir="."
					includes="${docker.stop.script}"
				/>
			</chmod>

			<exec executable="/bin/bash" failonerror="false" os="${os.apple},${os.unix}">
				<arg value="${docker.stop.script}" />
			</exec>

			<exec executable="cmd.exe" failonerror="false" os="${os.windows}">
				<arg value="${docker.stop.script}" />
			</exec>

			<delete file="${docker.stop.script}" />
		</sequential>
	</macrodef>

	<macrodef name="stop-edge-driver">
		<sequential>
			<exec executable="taskkill.exe">
				<arg line="/F /IM MicrosoftWebDriver.exe" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="stop-gecko-driver">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<execute failonerror="false">
						killall geckodriver
					</execute>
				</then>
				<else>
					<execute failonerror="false">
						taskkill.exe /F /IM geckodriver.exe
					</execute>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-ie-driver">
		<sequential>
			<exec executable="taskkill.exe">
				<arg line="/F /IM IEDriverServer.exe" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="stop-lcs-app-server">
		<attribute default="${app.server.bin.dir}" name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />
		<attribute default="8" name="app.server.leading.port.number" />

		<sequential>
			<if>
				<equals arg1="@{app.server.bundle.index}" arg2="0" />
				<then>
					<record action="start" name="${project.dir}/log" />
				</then>
			</if>

			<exec dir="@{app.server.bin.dir}" executable="${app.server.stop.executable}" resolveexecutable="true">
				<arg line="${app.server.stop.executable.arg.line}" />
			</exec>

			<waitfor maxwait="1" maxwaitunit="minute">
				<not>
					<socket port="@{app.server.leading.port.number}080" server="localhost" />
				</not>
			</waitfor>
		</sequential>
	</macrodef>

	<macrodef name="stop-one-java-process">
		<attribute name="process.name" />

		<sequential>
			<execute>
				<![CDATA[
					jps > jps_output
				]]>
			</execute>

			<local name="jps.output" />

			<loadfile
				property="jps.output"
				srcfile="jps_output"
			/>

			<if>
				<contains string="${jps.output}" substring="@{process.name}" />
				<then>
					<local name="java.process.pid" />

					<propertyregex
						input="${jps.output}"
						override="true"
						property="java.process.pid"
						regexp="(|[\S\s]*\n)([0-9]+) \S*@{process.name}[\S\s]*"
						replace="\2"
					/>

					<if>
						<os family="unix" />
						<then>
							<execute>
								<![CDATA[
									kill ${java.process.pid}
								]]>
							</execute>
						</then>
						<elseif>
							<os family="windows" />
							<then>
								<execute>
									<![CDATA[
										taskkill /f /pid ${java.process.pid}
									]]>
								</execute>
							</then>
						</elseif>
					</if>
				</then>
			</if>

			<delete file="jps_output" />
		</sequential>
	</macrodef>

	<macrodef name="uninstall-patches">
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<delete file="@{patching.tool.dir}/default.properties" />

			<if>
				<available file="${app.server.parent.dir}/.liferay-home" />
				<then>
					<execute dir="@{patching.tool.dir}" failonerror="true">
						patching-tool${file.suffix.bat} auto-discovery
						patching-tool${file.suffix.bat} revert -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>
				</then>
				<else>
					<echo file="@{patching.tool.dir}/default.properties">global.lib.path=${app.server.lib.global.dir}
liferay.home=${liferay.home}
patching.mode=binary
war.path=${app.server.portal.dir}/</echo>

					<execute dir="@{patching.tool.dir}" failonerror="true">
						patching-tool${file.suffix.bat} revert -force
						patching-tool${file.suffix.bat} update-plugins
					</execute>
				</else>
			</if>

			<delete file="@{patching.tool.dir}/logs/patching-tool.log" />

			<execute dir="@{patching.tool.dir}" failonerror="true">
				patching-tool${file.suffix.bat} info
			</execute>

			<for param="patch.file.path">
				<fileset
					dir="@{patching.tool.dir}/patches"
					erroronmissingdir="false"
					id="fileset.id"
				>
					<include name="*.zip" />
				</fileset>
				<sequential>
					<local name="patch.file.base.name" />

					<propertyregex
						input="@{patch.file.path}"
						property="patch.name"
						regexp=".*liferay-(fix-pack-)?(.*-\d{4})(-build\d*)?(-src)?.zip"
						replace="\2"
					/>

					<fail message="${patch.name} was not reverted.">
						<condition>
							<not>
								<resourcecontains
									resource="@{patching.tool.dir}/logs/patching-tool.log"
									substring="[ I] ${patch.name} :: Currently not installed"
								/>
							</not>
						</condition>
					</fail>
				</sequential>
			</for>

			<delete dir="@{patching.tool.dir}/patches" />

			<mkdir dir="@{patching.tool.dir}/patches" />
		</sequential>
	</macrodef>

	<macrodef name="validate-installed-patch">
		<attribute name="patch.file.zip.url" />
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<delete file="@{patching.tool.dir}/logs/patching-tool.log" />

			<execute dir="@{patching.tool.dir}">
				patching-tool${file.suffix.bat} info
			</execute>

			<local name="patch.name" />

			<propertyregex
				input="@{patch.file.zip.url}"
				property="patch.name"
				regexp=".*liferay-(fix-pack-)?(.*-\d{4})(-build\d*)?(-src)?.zip"
				replace="\2"
			/>

			<fail message="${patch.name} was not installed.">
				<condition>
					<not>
						<resourcecontains
							resource="@{patching.tool.dir}/logs/patching-tool.log"
							substring="[*I] ${patch.name} :: Installed"
						/>
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<macrodef name="validate-installed-patches">
		<attribute default="${app.server.parent.dir}/patching-tool" name="patching.tool.dir" />

		<sequential>
			<delete file="@{patching.tool.dir}/logs/patching-tool.log" />

			<execute dir="@{patching.tool.dir}">
				patching-tool${file.suffix.bat} info
			</execute>

			<for param="patch.file.path">
				<fileset
					dir="@{patching.tool.dir}/patches"
					erroronmissingdir="false"
					id="fileset.id"
				>
					<include name="*.zip" />
				</fileset>
				<sequential>
					<local name="patch.name" />

					<propertyregex
						input="@{patch.file.path}"
						property="patch.name"
						regexp=".*liferay-(fix-pack-)?(.*-\d{4})(-build\d*)?(-src)?.zip"
						replace="\2"
					/>

					<fail message="${patch.name} was not installed.">
						<condition>
							<not>
								<resourcecontains
									resource="@{patching.tool.dir}/logs/patching-tool.log"
									substring="[*I] ${patch.name} :: Installed"
								/>
							</not>
						</condition>
					</fail>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="wait-for-app-server">
		<attribute name="app.server.bin.dir" />
		<attribute default="0" name="app.server.bundle.index" />

		<sequential>
			<wait-for-app-server-log />

			<local name="app.server.waiting.url" />

			<get-testcase-property property.name="portal.context" />

			<if>
				<isset property="portal.context" />
				<then>
					<property name="app.server.waiting.url" value="http://localhost:${test.app.server.leading.port.number}080/${portal.context}/web/guest" />
				</then>
				<else>
					<property name="app.server.waiting.url" value="http://localhost:${test.app.server.leading.port.number}080/web/guest" />
				</else>
			</if>

			<local name="app.server.waiting.timeout" />

			<echo>Waiting for ${app.server.waiting.url} to load</echo>

			<waitfor maxwait="${timeout.app.server.wait}" maxwaitunit="second" timeoutproperty="app.server.waiting.timeout">
				<http url="${app.server.waiting.url}" />
			</waitfor>

			<if>
				<isset property="app.server.waiting.timeout" />
				<then>
					<get-jstack-output process.name="Bootstrap" />

					<stop-app-server app.server.bundle.index="@{app.server.bundle.index}" />

					<fail if="app.server.waiting.timeout" message="No server is available at ${app.server.waiting.url}${line.separator}${jstack.output}" />
				</then>
			</if>

			<echo>${app.server.waiting.url} has loaded</echo>
		</sequential>
	</macrodef>

	<macrodef name="wait-for-app-server-log">
		<sequential>
			<if>
				<and>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<isset property="test.app.server.dir" />
				</and>
				<then>
					<local name="wait.for.app.server.log.timed.out.message" />

					<beanshell>
						<![CDATA[
							import org.apache.commons.io.FileUtils;

							import org.apache.tools.ant.DirectoryScanner;

							public String getCatalinaLogFilesContent() {
								Map catalinaLogFiles = new TreeMap();

								DirectoryScanner directoryScanner = new DirectoryScanner();

								directoryScanner.setIncludes(new String[] {project.getProperty("test.app.server.dir") + "/logs/catalina.*.log"});

								directoryScanner.scan();

								for (String filePath : directoryScanner.getIncludedFiles()) {
									String osName = project.getProperty("os.name");

									osName = osName.toLowerCase();

									if (osName.contains("win")) {
										filePath = filePath.replace("/", "\\");
									}

									File file = new File(filePath);

									catalinaLogFiles.put(Long.toString(file.lastModified()), file);
								}

								StringBuilder sb = new StringBuilder();

								SortedSet keys = new TreeSet(catalinaLogFiles.keySet());

								for (String key : keys) {
									File file = catalinaLogFiles.get(key);

									sb.append(FileUtils.readFileToString(file));
								}

								return sb.toString();
							}

							System.out.println("Waiting for server startup message");

							int timeout = Integer.parseInt(project.getProperty("timeout.app.server.wait"));

							int second = 0;

							while (true) {
								try {
									String content = getCatalinaLogFilesContent();

									if (content.contains("Server startup in")) {
										break;
									}
								}
								catch (Exception e) {
									e.printStackTrace();
								}

								if (second >= timeout) {
									project.setProperty("wait.for.app.server.log.timed.out.message", "Unable to find startup message after " + (timeout / 60) + " minutes.");

									break;
								}

								second++;

								Thread.sleep(1000);
							}
						]]>
					</beanshell>

					<if>
						<isset property="wait.for.app.server.log.timed.out.message" />
						<then>
							<get-jstack-output process.name="Bootstrap" />

							<fail message="${wait.for.app.server.log.timed.out.message}${line.separator}${jstack.output}" />
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<target name="build-sql-file">
		<get-testcase-property property.name="portal.version" />

		<if>
			<isset property="portal.version" />
			<then>
				<if>
					<equals arg1="${portal.version}" arg2="6.1.2" />
					<then>
						<property name="portal.version.url.path" value="6.1.2-ga3" />
					</then>
					<elseif>
						<equals arg1="${portal.version}" arg2="6.2.3" />
						<then>
							<property name="portal.version.url.path" value="6.2.3-ga4" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${portal.version}" arg2="6.2.5" />
						<then>
							<property name="portal.version.url.path" value="6.2.5-ga6" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${portal.version}" arg2="7.0.4" />
						<then>
							<property name="portal.version.url.path" value="7.0.4-ga5" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${portal.version}" arg2="7.1.3" />
						<then>
							<property name="portal.version.url.path" value="7.1.3-ga4" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${portal.version}" arg2="7.2.0" />
						<then>
							<property name="portal.version.url.path" value="7.2.0-ga1" />
						</then>
					</elseif>
					<else>
						<property name="portal.version.url.path" value="${portal.version}" />
					</else>
				</if>

				<if>
					<or>
						<equals arg1="${portal.version}" arg2="6.0.6" />
						<equals arg1="${portal.version}" arg2="6.1.2" />
						<equals arg1="${portal.version}" arg2="6.2.3" />
						<equals arg1="${portal.version}" arg2="6.2.5" />
						<equals arg1="${portal.version}" arg2="7.0.4" />
						<equals arg1="${portal.version}" arg2="7.1.3" />
						<equals arg1="${portal.version}" arg2="7.2.0" />
					</or>
					<then>
						<propertycopy from="sql.legacy.base.url[ce]" name="sql.legacy.base.url" />
					</then>
					<else>
						<propertycopy from="sql.legacy.base.url[ee]" name="sql.legacy.base.url" />
					</else>
				</if>

				<propertycopy from="sql.legacy.zip[${portal.version}]" name="sql.legacy.zip" />

				<delete dir="sql/legacy" failonerror="false" />

				<tstamp>
					<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
				</tstamp>

				<mirrors-get
					dest="${tstamp.value}.zip"
					src="${sql.legacy.base.url}/${portal.version.url.path}/${sql.legacy.zip}"
				/>

				<unzip
					dest="sql/legacy/${portal.version}"
					src="${tstamp.value}.zip"
				>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<delete file="${tstamp.value}.zip" />
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${database.type}" arg2="hypersonic" />
			</not>
			<then>
				<get-testcase-property property.name="databases.size" />

				<if>
					<and>
						<isset property="databases.size" />
						<or>
							<equals arg1="${database.type}" arg2="mysql" />
							<equals arg1="${database.type}" arg2="mariadb" />
						</or>
					</and>
					<then>
						<var name="database.index" value="1" />

						<echo file="create.sql">drop database if exists lportal;
create database lportal character set utf8;</echo>

						<antelope:repeat count="${databases.size}">
							<echo append="true" file="create.sql">

drop database if exists lportal${database.index};
create database lportal${database.index} character set utf8;</echo>

							<math
								datatype="int"
								operand1="${database.index}"
								operand2="1"
								operation="+"
								result="database.index"
							/>
						</antelope:repeat>

						<var name="database.index" unset="true" />
					</then>
					<elseif>
						<and>
							<isset property="databases.size" />
							<equals arg1="${database.type}" arg2="postgresql" />
						</and>
						<then>
							<echo file="create.sql">
drop database lportal;
create database lportal encoding = 'UNICODE';</echo>

							<echo append="true" file="create.sql">

drop database lportal${databases.size};
create database lportal${databases.size} encoding = 'UNICODE';</echo>
						</then>
					</elseif>
					<else>
						<if>
							<or>
								<not>
									<isset property="sql.dir" />
								</not>
								<not>
									<isset property="sql.file" />
								</not>
							</or>
							<then>
								<get-testcase-property property.name="database.bare.enabled" />

								<if>
									<equals arg1="${database.bare.enabled}" arg2="true" />
									<then>
										<var name="database.create.suffix" value="-bare" />
									</then>
								</if>

								<property name="sql.dir" value="sql\create${database.create.suffix}\" />

								<if>
									<equals arg1="${database.type}" arg2="mariadb" />
									<then>
										<property name="sql.file" value="create${database.create.suffix}-mysql.sql" />
									</then>
									<elseif>
										<equals arg1="${database.type}" arg2="sqlserver" />
										<then>
											<property name="sql.file" value="create${database.create.suffix}-sql-server.sql" />
										</then>
									</elseif>
									<else>
										<property name="sql.file" value="create${database.create.suffix}-${database.type}.sql" />
									</else>
								</if>
							</then>
						</if>

						<copy
							file="${sql.dir}${sql.file}"
							tofile="create.sql"
						/>
					</else>
				</if>

				<get-database-property property.name="database.device.name" />

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<get-database-property property.name="database.password" />
						<get-database-property property.name="database.username" />

						<replace
							file="create.sql"
						>
							<replacetoken>drop database lportal;</replacetoken>
							<replacevalue></replacevalue>
						</replace>
						<replace
							file="create.sql"
						>
							<replacetoken>connect to lportal;</replacetoken>
							<replacevalue>update db cfg for lportal using logprimary 2;
update db cfg for lportal using logsecond 254;
connect to lportal;</replacevalue>
						</replace>
						<replace
							file="create.sql"
						>
							<replacetoken>create database lportal pagesize 8192;</replacetoken>
							<replacevalue>create database lportal pagesize 32768 temporary tablespace managed by automatic storage;</replacevalue>
						</replace>

						<if>
							<isset property="databases.size" />
							<then>
								<echo append="true" file="create.sql">

disconnect lportal;
create database lportal${databases.size} pagesize 32768 temporary tablespace managed by automatic storage;
update db cfg for lportal${databases.size} using logprimary 2;
update db cfg for lportal${databases.size} using logsecond 254;</echo>
							</then>
						</if>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<replace
								file="create.sql"
							>
								<replacetoken>grant connect,resource to &amp;1;</replacetoken>
								<replacevalue>grant connect,resource to &amp;1;
	grant unlimited tablespace to &amp;1;</replacevalue>
							</replace>

							<if>
								<isset property="databases.size" />
								<then>
									<replace
										file="create.sql"
									>
										<replacetoken>grant connect,resource to &amp;1;
	grant unlimited tablespace to &amp;1;</replacetoken>
										<replacevalue>grant all privileges to &amp;1;</replacevalue>
									</replace>
									<replace
										file="create.sql"
									>
										<replacetoken>quit</replacetoken>
										<replacevalue></replacevalue>
									</replace>

									<echo append="true" file="create.sql">
	drop user lportal1 cascade;
	create user lportal1 identified by lportal1;
	grant connect,resource to lportal1;
	grant unlimited tablespace to lportal1;
	quit</echo>
								</then>
							</if>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<replace
								file="create.sql"
							>
								<replacefilter>
									<replacetoken>use master
exec sp_dboption 'lportal', 'allow nulls by default' , true
go

exec sp_dboption 'lportal', 'select into/bulkcopy/pllsort' , true
go

use lportal</replacetoken>
									<replacevalue><![CDATA[use lportal
go]]></replacevalue>
								</replacefilter>
							</replace>

							<if>
								<isset property="databases.size" />
								<then>
									<echo append="true" file="create.sql">

use master
go

drop database lportal${databases.size}
go

create database lportal${databases.size}
go

alter database lportal${databases.size} on default=1400
go

alter database lportal${databases.size} with override
go

exec sp_dboption 'lportal${databases.size}', 'allow nulls by default' , true
go

exec sp_dboption 'lportal${databases.size}', 'select into/bulkcopy/pllsort' , true
go

use lportal${databases.size}
go

checkpoint
go</echo>
								</then>
							</if>
						</then>
					</elseif>
				</if>

				<get-database-property property.name="database.schema" />

				<if>
					<not>
						<equals arg1="${database.schema}" arg2="lportal" />
					</not>
					<then>
						<replaceregexp
							file="create.sql"
							flags="g"
							match="lportal"
							replace="${database.schema}"
						/>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="check-config">
		<check-config />
	</target>

	<target name="check-inet-address">
		<if>
			<equals arg1="${app.server.type}" arg2="jboss" />
			<then>
				<exec executable="/bin/bash" outputproperty="inet.address">
					<arg value="-c" />
					<arg value="ifconfig eth0:0 | grep 'inet ' | sed -e 's/^[[:space:]]* inet \(addr:\)\?\([0-9\.]\+\).*/\2/'" />
				</exec>

				<if>
					<equals arg1="${inet.address}" arg2="127.0.0.1" />
					<then>
						<replace
							file="${app.server.jboss.instance.dir}/configuration/standalone.xml"
						>
							<replacefilter>
								<replacetoken><![CDATA[<inet-address value="${jboss.bind.address:127.0.0.1}"/>]]></replacetoken>
								<replacevalue><![CDATA[<nic name="eth0:0" />]]></replacevalue>
							</replacefilter>
							<replacefilter>
								<replacetoken><![CDATA[<inet-address value="${jboss.bind.address.management:127.0.0.1}"/>]]></replacetoken>
								<replacevalue><![CDATA[<nic name="eth0:0" />]]></replacevalue>
							</replacefilter>
						</replace>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="clean-app-server-deploy-dir">
		<delete failonerror="false" includeemptydirs="true">
			<fileset
				dir="${app.server.deploy.dir}"
				excludes=",*.dodeploy,*.rar,*.sar/**,*.xml,.autodeploystatus/**,liferay-portal/**,liferay-portal.war/**,marketplace-portlet/**,portal-compat-hook/**,security/**,root/**,ROOT/**,ROOT.war/**,tunnel-web/**,tunnel-web.war/**"
			/>
		</delete>
	</target>

	<target name="clean-up-bundles">
		<delete file="test.${user.name}.properties" />

		<antcall target="delete-liferay-home" />

		<delete includeemptydirs="true">
			<fileset
				dir="${app.server.parent.dir}"
				excludes="*.zip"
			/>
		</delete>
	</target>

	<target name="clean-up-db2-processes">
		<if>
			<os family="unix" />
			<then>
				<echo file="clean_up_db2_processes.sh">
					<![CDATA[
						#!/bin/bash

						db2 db2stop force

						for i in "m" "q" "s"
						do
							for j in `ipcs -$i | grep db2 | cut -c12-21`
							do
								echo "ipcrm -$i $j"

								ipcrm -$i $j
							done
						done
					]]>
				</echo>

				<chmod
					file="clean_up_db2_processes.sh"
					perm="a+x"
				/>

				<exec executable="${basedir}/clean_up_db2_processes.sh" />

				<delete file="clean_up_db2_processes.sh" />
			</then>
		</if>
	</target>

	<target name="clean-up-java-processes">
		<if>
			<os family="unix" />
			<then>
				<echo file="clean_up_java_processes.sh">
					<![CDATA[
						#!/bin/bash

						for i in `ps -o pid,args -e | grep /opt/java/jdk | grep -v ant | grep -v grep | grep -v jenkins | cut -c1-5`
						do
							echo "Killing $i"

							kill -9 $i
						done
					]]>
				</echo>

				<chmod
					file="clean_up_java_processes.sh"
					perm="a+x"
				/>

				<exec executable="${basedir}/clean_up_java_processes.sh" />

				<delete file="clean_up_java_processes.sh" />
			</then>
		</if>
	</target>

	<target name="clean-up-logs">
		<delete failonerror="false" file="${project.dir}/console-shut-down" />
	</target>

	<target name="clean-up-mobile-device">
		<get-testcase-property property.name="browser.type" />

		<if>
			<equals arg1="${browser.type}" arg2="android" />
			<then>
				<stop-android-device />
			</then>
		</if>
	</target>

	<target name="clean-up-selenium-driver">
		<if>
			<equals arg1="${browser.type}" arg2="chrome" />
			<then>
				<stop-chrome-driver />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="edge" />
			<then>
				<stop-edge-driver />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="firefox" />
			<then>
				<stop-gecko-driver />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="internetexplorer" />
			<then>
				<stop-ie-driver />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${browser.type}" arg2="android" />
				<equals arg1="${browser.type}" arg2="androidchrome" />
				<equals arg1="${browser.type}" arg2="iossafari" />
			</or>
			<then>
				<stop-appium />
			</then>
		</if>
	</target>

	<target name="clean-up-sybase-processes">
		<if>
			<os family="unix" />
			<then>
				<echo file="clean_up_sybase_processes.sh">
					<![CDATA[
						#!/bin/bash

						for i in `ps -o pid,args -e | grep /opt/sybase | grep -v grep | cut -c1-5`
						do
							echo "Killing $i"

							kill -9 $i
						done
					]]>
				</echo>

				<chmod
					file="clean_up_sybase_processes.sh"
					perm="a+x"
				/>

				<exec executable="${basedir}/clean_up_sybase_processes.sh" />

				<delete file="clean_up_sybase_processes.sh" />
			</then>
		</if>
	</target>

	<target name="clean-up-web-xml">
		<copy
			file="portal-web/docroot/WEB-INF/web.xml"
			overwrite="true"
			tofile="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml"
		/>
	</target>

	<target name="clean-version-override">
		<fail message="Please set the property ${module.dir}." unless="module.dir" />

		<gradle-execute dir="${portal.dir}/modules" task="cleanVersionOverride">
			<arg value="-b" />
			<arg value="releng.gradle" />
			<arg value="-PgitRepoPath=${module.dir}" />
		</gradle-execute>
	</target>

	<target name="copy-cluster-log">
		<local name="log.dir" />

		<condition else="${app.server.parent.dir}-${app.server.bundle.index}/logs" property="log.dir" value="${app.server.parent.dir}/logs">
			<or>
				<not>
					<isset property="app.server.bundle.index" />
				</not>
				<equals arg1="${app.server.bundle.index}" arg2="0" />
			</or>
		</condition>

		<for param="log.file">
			<path>
				<fileset
					dir="${log.dir}"
				>
					<include name="*.log" />
				</fileset>
			</path>
			<sequential>
				<copy
					file="@{log.file}"
					overwrite="true"
					tofile="${liferay.home}/cluster${app.server.bundle.index}.log"
				/>
			</sequential>
		</for>
	</target>

	<target name="copy-log-file">
		<for param="log.file">
			<path>
				<fileset
					dir="${liferay.home}/logs"
				>
					<include name="*.log" />
				</fileset>
			</path>
			<sequential>
				<copy
					file="@{log.file}"
					overwrite="true"
					tofile="log"
				/>
			</sequential>
		</for>
	</target>

	<target name="copy-optional-jars">
		<get-database-property property.name="database.version" />

		<if>
			<and>
				<equals arg1="${database.type}" arg2="db2" />
			</and>
			<then>
				<delete failonerror="false" includeemptydirs="true">
					<fileset
						dir="${app.server.lib.global.dir}"
						includes="${jdbc.db2.driver}"
					/>
				</delete>

				<for list="${jdbc.db2.driver}" param="jdbc.driver">
					<sequential>
						<mirrors-get
							dest="${todir}"
							src="${test.jdbc.drivers.url}/db2/${database.version}/@{jdbc.driver}"
						/>

						<tstamp>
							<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
						</tstamp>

						<mkdir dir="${tstamp.value}" />

						<unzip
							dest="${tstamp.value}"
							src="${todir}/@{jdbc.driver}"
						/>

						<if>
							<available file="${tstamp.value}/META-INF/MANIFEST.MF" />
							<then>
								<replaceregexp
									file="${tstamp.value}/META-INF/MANIFEST.MF"
									match="Class-Path: pdq.jar\s+"
									replace=""
								/>

								<print-file file.name="${tstamp.value}/META-INF/MANIFEST.MF" />
							</then>
						</if>

						<delete file="${todir}/@{jdbc.driver}" />

						<zip
							basedir="${tstamp.value}"
							destfile="${todir}/@{jdbc.driver}"
						/>

						<delete dir="${tstamp.value}" />
					</sequential>
				</for>
			</then>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="mariadb" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.mariadb.driver}" />
					</not>
				</and>
				<then>
					<copy
						todir="${todir}"
					>
						<fileset
							dir="lib/development"
							includes="${jdbc.mariadb.driver}"
						/>
					</copy>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="mysql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.mysql.driver}" />
					</not>
				</and>
				<then>
					<copy
						todir="${todir}"
					>
						<fileset
							dir="lib/development"
							includes="${jdbc.mysql.driver}"
						/>
					</copy>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="oracle" />
				</and>
				<then>
					<delete failonerror="false" includeemptydirs="true">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.oracle.driver}"
						/>
					</delete>

					<mirrors-get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/oracle/${database.version}/${jdbc.oracle.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="postgresql" />
					<not>
						<available file="${app.server.lib.global.dir}/${jdbc.postgresql.driver}" />
					</not>
				</and>
				<then>
					<copy
						todir="${todir}"
					>
						<fileset
							dir="lib/development"
							includes="${jdbc.postgresql.driver}"
						/>
					</copy>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${database.type}" arg2="sqlserver" />
				<then>
					<delete failonerror="false" includeemptydirs="true">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.sqlserver.driver}"
						/>
					</delete>

					<mirrors-get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/sqlserver/${database.version}/${jdbc.sqlserver.driver}"
					/>
				</then>
			</elseif>
			<elseif>
				<and>
					<equals arg1="${database.type}" arg2="sybase" />
				</and>
				<then>
					<delete failonerror="false" includeemptydirs="true">
						<fileset
							dir="${app.server.lib.global.dir}"
							includes="${jdbc.sybase.driver}"
						/>
					</delete>

					<mirrors-get
						dest="${todir}"
						src="${test.jdbc.drivers.url}/sybase/${database.version}/${jdbc.sybase.driver}"
					/>
				</then>
			</elseif>
		</if>

		<if>
			<or>
				<equals arg1="${app.server.type}" arg2="jboss" />
				<equals arg1="${app.server.type}" arg2="wildfly" />
			</or>
			<then>
				<propertycopy from="app.server.${app.server.type}.lib.global.dir" name="app.server.lib.global.dir" override="true" />

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<replace
							file="${app.server.lib.global.dir}/module.xml"
						>
							<replacetoken><![CDATA[<resource-root path="hsql.jar" />]]></replacetoken>
							<replacevalue>
								<![CDATA[
									<resource-root path="db2jcc4.jar" />
									<resource-root path="db2jcc_license_cu.jar" />
									<resource-root path="hsql.jar" />
								]]>
							</replacevalue>
						</replace>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="mariadb" />
						<then>
							<replace
								file="${app.server.lib.global.dir}/module.xml"
							>
								<replacetoken><![CDATA[<resource-root path="hsql.jar" />]]></replacetoken>
								<replacevalue>
									<![CDATA[
										<resource-root path="hsql.jar" />
										<resource-root path="mariadb.jar" />
									]]>
								</replacevalue>
							</replace>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<replace
								file="${app.server.lib.global.dir}/module.xml"
							>
								<replacetoken><![CDATA[<resource-root path="hsql.jar" />]]></replacetoken>
								<replacevalue>
									<![CDATA[
										<resource-root path="hsql.jar" />
										<resource-root path="ojdbc6.jar" />
									]]>
								</replacevalue>
							</replace>
						</then>
					</elseif>
					<else>
						<replace
							file="${app.server.lib.global.dir}/module.xml"
						>
							<replacetoken><![CDATA[<resource-root path="hsql.jar" />]]></replacetoken>
							<replacevalue>
								<![CDATA[
									<resource-root path="hsql.jar" />
									<resource-root path="mysql.jar" />
								]]>
							</replacevalue>
						</replace>
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="curl-execute">
		<fail message="Please set the property ${curl.args}." unless="curl.args" />

		<exec executable="curl">
			<arg line="${curl.args}" />
		</exec>
	</target>

	<target name="delete-liferay-home">
		<if>
			<not>
				<equals arg1="${delete.liferay.home}" arg2="false" />
			</not>
			<then>
				<if>
					<not>
						<isset property="test.app.server.liferay.home" />
					</not>
					<then>
						<set-app-server-properties />
					</then>
				</if>

				<get-testcase-property property.name="portal.version" />

				<if>
					<isset property="portal.version" />
					<then>
						<delete dir="${test.app.server.liferay.home}/osgi/state" />
					</then>
					<else>
						<if>
							<not>
								<equals arg1="${keep.cached.app.server.data}" arg2="true" />
							</not>
							<then>
								<delete failonerror="false" includeemptydirs="true">
									<fileset
										dir="${test.app.server.liferay.home}/data"
									>
										<exclude if:true="${keep.hypersonicdb}" name="hypersonic/lportal.properties" />
										<exclude if:true="${keep.hypersonicdb}" name="hypersonic/lportal.script" />
									</fileset>
								</delete>
							</then>
						</if>

						<delete dir="${test.app.server.liferay.home}/logs" />
						<delete dir="${test.app.server.liferay.home}/osgi/state" />
						<delete dir="${test.app.server.liferay.home}/work" />

						<delete file="${test.app.server.liferay.home}/portal-setup-wizard.properties" />
					</else>
				</if>
			</then>
		</if>

		<delete dir="/tmp/sprite" />
	</target>

	<target name="deploy-dependency-jars">
		<get-testcase-property property.name="liferay.training.dependency.jars" />

		<if>
			<isset property="liferay.training.dependency.jars" />
			<then>
				<for list="${liferay.training.dependency.jars}" param="liferay.training.dependency.jar">
					<sequential>
						<local name="training.dependency.file.name" />

						<basename file="${liferay.training.dir}/@{liferay.training.dependency.jar}" property="training.dependency.file.name" />

						<echo>Copying ${liferay.training.dir}/@{liferay.training.dependency.jar} to ${liferay.home}/deploy/${training.dependency.file.name}.</echo>

						<copy
							file="${liferay.training.dir}/@{liferay.training.dependency.jar}"
							todir="${liferay.home}/deploy"
						/>
					</sequential>
				</for>
			</then>
		</if>

		<condition else="${app.server.parent.dir}-${app.server.bundle.index}/deploy" property="deploy.dir" value="${app.server.parent.dir}/deploy">
			<or>
				<not>
					<isset property="app.server.bundle.index" />
				</not>
				<equals arg1="${app.server.bundle.index}" arg2="0" />
			</or>
		</condition>

		<echo>Deploy directory is ${deploy.dir}.</echo>

		<if>
			<not>
				<isset property="liferay.dependency.jars" />
			</not>
			<then>
				<get-testcase-property property.name="liferay.dependency.jars" />
			</then>
		</if>

		<property name="liferay.dependency.dir" value="${project.dir}/portal-web/test/functional/com/liferay/portalweb/dependencies" />

		<if>
			<isset property="liferay.dependency.jars" />
			<then>
				<property name="liferay.dependency.jars" value="${liferay.dependency.jars}" />

				<if>
					<available file="${liferay.dependency.dir}/${liferay.dependency.jars}" type="dir" />
					<then>
						<echo>Archiving ${liferay.dependency.dir}/${liferay.dependency.jars} to ${project.dir}/tmp/${liferay.dependency.jars}.</echo>

						<jar
							basedir="${liferay.dependency.dir}/${liferay.dependency.jars}"
							destfile="${project.dir}/tmp/${liferay.dependency.jars}"
							manifest="${liferay.dependency.dir}/${liferay.dependency.jars}/META-INF/MANIFEST.MF"
						/>

						<echo>Copying ${project.dir}/tmp/${liferay.dependency.jars} to ${deploy.dir}/${liferay.dependency.jars}.</echo>

						<copy
							file="${project.dir}/tmp/${liferay.dependency.jars}"
							todir="${deploy.dir}"
						/>
					</then>
					<else>
						<echo>Copying ${liferay.dependency.dir}/${liferay.dependency.jars} to ${deploy.dir}/${liferay.dependency.jars}.</echo>

						<copy
							file="${liferay.dependency.dir}/${liferay.dependency.jars}"
							todir="${deploy.dir}"
						/>
					</else>
				</if>
			</then>
			<else>
				<echo>The property "liferay.dependency.jars" is not set.</echo>
			</else>
		</if>
	</target>

	<target name="deploy-extra-apps">
		<get-testcase-property property.name="extraapps.plugins.includes" />

		<if>
			<isset property="extraapps.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-extra-apps">
					<property name="plugins.includes" value="${extraapps.plugins.includes}" />
				</ant>
			</then>
		</if>
	</target>

	<target name="deploy-latest-marketplace-apps">
		<get-testcase-property property.name="deploy.latest.marketplace.app.disabled" />

		<if>
			<and>
				<available file="${liferay.home}/osgi/marketplace" />
				<not>
					<equals arg1="${deploy.latest.marketplace.app.disabled}" arg2="true" />
				</not>
			</and>
			<then>
				<for param="app.file.path">
					<path>
						<fileset
							dir="${liferay.home}/osgi/marketplace"
						>
							<include name="*.lpkg" />
						</fileset>
					</path>
					<sequential>
						<local name="app.file.name" />

						<propertyregex
							input="@{app.file.path}"
							override="true"
							property="app.file.name"
							regexp=".*[/\\]marketplace[/\\](.+\.lpkg)"
							replace="\1"
						/>

						<local name="sync.connector.override" />

						<if>
							<matches pattern="https?://" string="${test.build.fix.pack.zip.url}" />
							<then>
								<get-fixpack-version patch.file.zip.url="${test.build.fix.pack.zip.url}" />

								<beanshell>
									<![CDATA[
										String appFileName = project.getProperty("app.file.name");
										String fixpackVersion = project.getProperty("fixpack.version");

										if (appFileName.equals("Liferay Sync Connector.lpkg") && (fixpackVersion != null)) {
											int fixpackVersionInt = Integer.valueOf(fixpackVersion);

											if (fixpackVersionInt < 19) {
												project.setProperty("sync.connector.override", "false");
											}
										}
									]]>
								</beanshell>
							</then>
						</if>

						<if>
							<and>
								<available file="${project.dir}/plugins/marketplace/${app.file.name}" />
								<not>
									<contains string="${test.latest.marketplace.apps.exclude}" substring="${app.file.name}" />
								</not>
								<not>
									<equals arg1="${sync.connector.override}" arg2="false" />
								</not>
							</and>
							<then>
								<echo>Copying ${project.dir}/plugins/marketplace/${app.file.name} to ${liferay.home}/osgi/marketplace/${app.file.name}.</echo>

								<delete file="${liferay.home}/osgi/marketplace/${app.file.name}" />

								<copy
									file="${project.dir}/plugins/marketplace/${app.file.name}"
									tofile="${liferay.home}/osgi/marketplace/${app.file.name}"
								/>
							</then>
						</if>
					</sequential>
				</for>

				<for list="${test.latest.marketplace.apps.include}" param="app.file.name">
					<sequential>
						<if>
							<available file="${project.dir}/plugins/marketplace/@{app.file.name}" />
							<then>
								<echo>Copying ${project.dir}/plugins/marketplace/@{app.file.name} to ${liferay.home}/osgi/marketplace/@{app.file.name}.</echo>

								<delete failonerror="false" file="${liferay.home}/osgi/marketplace/@{app.file.name}" />

								<copy
									file="${project.dir}/plugins/marketplace/@{app.file.name}"
									tofile="${liferay.home}/osgi/marketplace/@{app.file.name}"
								/>
							</then>
						</if>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<target name="deploy-lcs-environment-token">
		<if>
			<and>
				<isset property="portal.lcs.license.url" />
				<matches pattern="https?://" string="${portal.lcs.license.url}" />
			</and>
			<then>
				<mirrors-get
					dest="${selenium.output.dir.name}"
					src="${portal.lcs.license.url}"
				/>
			</then>
		</if>

		<get-testcase-property property.name="app.server.bundles.size" />

		<if>
			<isset property="app.server.bundles.size" />
			<then>
				<var name="app.server.bundle.index" value="1" />

				<antelope:repeat count="${app.server.bundles.size}">
					<var name="test.app.server.parent.dir" value="${app.server.parent.dir}-${app.server.bundle.index}" />

					<copy
						todir="${test.app.server.parent.dir}/data"
					>
						<fileset
							dir="${selenium.output.dir.name}"
							includes="lcs-aatf-*.aatf"
						/>
					</copy>

					<math
						datatype="int"
						operand1="${app.server.bundle.index}"
						operand2="1"
						operation="+"
						result="app.server.bundle.index"
					/>
				</antelope:repeat>

				<var name="app.server.bundle.index" unset="true" />
				<var name="test.app.server.parent.dir" unset="true" />
			</then>
		</if>

		<move
			todir="${app.server.parent.dir}/data"
		>
			<fileset
				dir="${selenium.output.dir.name}"
				includes="lcs-aatf-*.aatf"
			/>
		</move>
	</target>

	<target name="deploy-license-xml">
		<get-testcase-property property.name="deploy.lcs.token.file" />

		<if>
			<and>
				<matches pattern="https?://" string="${test.build.license.xml.zip.url}" />
				<not>
					<equals arg1="${deploy.lcs.token.file}" arg2="true" />
				</not>
			</and>
			<then>
				<mkdir dir="${liferay.home}/deploy" />

				<mirrors-get
					dest="${liferay.home}/deploy/license.xml"
					src="${test.build.license.xml.zip.url}"
				/>
			</then>
		</if>
	</target>

	<target name="deploy-osgi-apps">
		<get-testcase-property property.name="osgi.app.includes" />

		<if>
			<isset property="osgi.app.includes" />
			<then>
				<for list="${osgi.app.includes}" param="osgi.app.name">
					<sequential>
						<antelope:stringutil property="osgi.app.name" string="@{osgi.app.name}">
							<antelope:trim />
						</antelope:stringutil>

						<local name="app.dir.includes" />

						<condition else="apps/${osgi.app.name}" property="app.dir.includes" value="apps/${osgi.app.name},dxp/apps/${osgi.app.name}">
							<equals arg1="${build.profile}" arg2="dxp" />
						</condition>

						<for param="app.dir">
							<path>
								<dirset
									dir="modules"
									includes="${app.dir.includes}"
								/>
							</path>
							<sequential>
								<local name="Liferay-Releng-App-Title" />

								<property file="@{app.dir}/app.bnd" />

								<if>
									<available file="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									<then>
										<delete file="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									</then>
								</if>

								<if>
									<available file="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg" />
									<then>
										<echo>Copying ${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg to ${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg.</echo>

										<copy
											file="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg"
											tofile="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg"
										/>
									</then>
									<elseif>
										<available file="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg" />
										<then>
											<echo>Copying ${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg to ${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg.</echo>

											<copy
												file="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg"
												tofile="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg"
											/>
										</then>
									</elseif>
									<else>
										<echo>Deploying all relevant modules that make up ${Liferay-Releng-App-Title}.lpkg.</echo>

										<local name="app.name" />

										<propertyregex
											input="@{app.dir}"
											property="app.name"
											regexp=".*\/(.*)"
											select="\1"
										/>

										<move
											failonerror="false"
											file="@{app.dir}/settings.gradle"
											tofile="@{app.dir}/settings.gradle.temp"
											verbose="true"
										/>

										<for param="module.dir.path">
											<path>
												<dirset
													dir="@{app.dir}"
												>
													<exclude name="**/*-test*" />
													<include name="**" />
													<present targetdir="@{app.dir}">
														<mapper
															from="*"
															to="*/bnd.bnd"
															type="glob"
														/>
													</present>
												</dirset>
											</path>
											<sequential>
												<if>
													<contains string="${test.modules.force.deploy}" substring="${app.name}" />
													<then>
														<echo file="@{module.dir.path}/.lfrbuild-portal" />
													</then>
												</if>
											</sequential>
										</for>

										<gradle-execute dir="@{app.dir}" task="deploy">
											<arg value="clean" />
										</gradle-execute>

										<for param="module.dir.path">
											<path>
												<dirset
													dir="@{app.dir}"
												>
													<include name="**/*-test*" />
												</dirset>
											</path>
											<sequential>
												<basename file="@{module.dir.path}" property="module.war.name" />

												<delete failonerror="false" verbose="true">
													<fileset
														dir="${liferay.home}/deploy"
													>
														<include name="${module.war.name}*" />
													</fileset>
												</delete>
											</sequential>
										</for>

										<ant antfile="build.xml" dir="modules" target="build-app-lpkg">
											<property name="app.name" value="${osgi.app.name}" />
											<property name="output.dir" value="${liferay.home}/osgi/marketplace" />
											<property name="osgi.dir" value="${liferay.home}/osgi" />
										</ant>

										<gradle-execute dir="@{app.dir}" task="clean" />

										<move
											failonerror="false"
											file="@{app.dir}/settings.gradle.temp"
											tofile="@{app.dir}/settings.gradle"
										/>
									</else>
								</if>
							</sequential>
						</for>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<target name="deploy-osgi-module-configurations">
		<var name="osgi.module.configurations.index" value="1" />

		<get-testcase-property property.name="osgi.module.configurations" />

		<for delimiter=":" list="${osgi.module.configurations}" param="configuration">
			<sequential>
				<echo file="${liferay.home}/osgi/configs/${osgi.module.configurations.index}">@{configuration}</echo>

				<math
					datatype="int"
					operand1="${osgi.module.configurations.index}"
					operand2="1"
					operation="+"
					result="osgi.module.configurations.index"
				/>
			</sequential>
		</for>

		<var name="osgi.module.configuration.file.names.index" value="1" />

		<get-testcase-property property.name="osgi.module.configuration.file.names" />

		<for delimiter=":" list="${osgi.module.configuration.file.names}" param="file.names">
			<sequential>
				<if>
					<available file="${liferay.home}/osgi/configs/${osgi.module.configuration.file.names.index}" />
					<then>
						<move
							file="${liferay.home}/osgi/configs/${osgi.module.configuration.file.names.index}"
							overwrite="true"
							tofile="${liferay.home}/osgi/configs/@{file.names}"
						/>

						<math
							datatype="int"
							operand1="${osgi.module.configuration.file.names.index}"
							operand2="1"
							operation="+"
							result="osgi.module.configuration.file.names.index"
						/>
					</then>
				</if>
			</sequential>
		</for>

		<pathconvert property="osgi.configs">
			<path>
				<fileset
					dir="${liferay.home}/osgi/configs"
				/>
			</path>
		</pathconvert>

		<for delimiter=":" list="${osgi.configs}" param="osgi.config">
			<sequential>
				<print-file file.name="@{osgi.config}" />
			</sequential>
		</for>
	</target>

	<target name="deploy-osgi-modules">
		<get-testcase-property property.name="osgi.modules.includes" />

		<if>
			<isset property="osgi.modules.includes" />
			<then>
				<echo file="tools/sdk/build.${user.name}.properties">auto.deploy.dir=${liferay.home}/deploy</echo>

				<local name="osgi.module.pattern" />

				<if>
					<equals arg1="${osgi.modules.includes}" arg2="revert-schema-version" />
					<then>
						<property name="osgi.module.pattern" value="**/test/**" />
					</then>
					<else>
						<property name="osgi.module.pattern" value="**/apps/**" />
					</else>
				</if>

				<antelope:stringutil property="osgi.modules.includes.pattern" string="${osgi.module.pattern}/${osgi.modules.includes}">
					<antelope:replace regex="," replacement=",${osgi.module.pattern}/" />
				</antelope:stringutil>

				<pathconvert pathsep="," property="osgi.modules.paths">
					<dirset
						dir="modules"
						includes="${osgi.modules.includes.pattern}"
					>
						<or>
							<present targetdir="modules">
								<mapper
									from="*"
									to="*/build.gradle"
									type="glob"
								/>
							</present>
							<present targetdir="modules">
								<mapper
									from="*"
									to="*/build.xml"
									type="glob"
								/>
							</present>
						</or>
					</dirset>
				</pathconvert>

				<for list="${osgi.modules.paths}" parallel="true" param="osgi.module.path">
					<sequential>
						<local name="module.base.dir" />
						<local name="osgi.module.command.prefix" />

						<dirname file="@{osgi.module.path}" property="module.base.dir" />

						<move
							failonerror="false"
							file="${module.base.dir}/settings.gradle"
							tofile="${module.base.dir}/settings.gradle.temp"
							verbose="true"
						/>

						<gradle-execute dir="@{osgi.module.path}" forcedcacheenabled="false" task="deploy">
							<arg value="clean" />
						</gradle-execute>

						<move
							failonerror="false"
							file="${module.base.dir}/settings.gradle.temp"
							tofile="${module.base.dir}/settings.gradle"
						/>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<target name="deploy-project-templates">
		<if>
			<equals arg1="${project.templates}" arg2="mvc-portlet" />
			<then>
				<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}" task="generateSampleProject" />

				<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplemvc" task="assemble" />

				<copy
					file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplemvc/build/libs/samplemvc-1.0.0.jar"
					todir="${liferay.home}/deploy"
				/>
			</then>
			<elseif>
				<equals arg1="${project.templates}" arg2="rest" />
				<then>
					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}" task="generateSampleProject" />

					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplerest" task="assemble" />

					<copy
						file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplerest/build/libs/samplerest-1.0.0.jar"
						todir="${liferay.home}/deploy"
					/>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${project.templates}" arg2="service-builder" />
				<then>
					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}" task="generateSampleProject" />

					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/foo" task="buildService" />

					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/foo" task="assemble" />

					<copy
						file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/foo/foo-api/build/libs/foo.api-1.0.0.jar"
						todir="${liferay.home}/deploy"
					/>

					<copy
						file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/foo/foo-service/build/libs/foo.service-1.0.0.jar"
						todir="${liferay.home}/deploy"
					/>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${project.templates}" arg2="theme" />
				<then>
					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}" task="generateSampleProject" />

					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/sampletheme" task="assemble" />

					<copy
						file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/sampletheme/build/libs/sampletheme.war"
						todir="${liferay.home}/deploy"
					/>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${project.templates}" arg2="war-mvc-portlet" />
				<then>
					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}" task="generateSampleProject" />

					<gradle-execute dir="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplewarmvcportlet" task="assemble" />

					<copy
						file="${project.dir}/modules/sdk/project-templates/project-templates-${project.templates}/build/samplewarmvcportlet/build/libs/samplewarmvcportlet.war"
						todir="${liferay.home}/deploy"
					/>
				</then>
			</elseif>
		</if>
	</target>

	<target name="deploy-specified-plugins">

		<!--
		Deploy plugin files to the deploy directory.
		-->

		<get-testcase-property property.name="ext.plugins.includes" />

		<if>
			<isset property="ext.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="ext" />
					<property name="plugins.includes" value="${ext.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="hook.plugins.includes" />

		<if>
			<isset property="hook.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="hooks" />
					<property name="plugins.includes" value="${hook.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="layouttpl.plugins.includes" />

		<if>
			<isset property="layouttpl.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="layouttpl" />
					<property name="plugins.includes" value="${layouttpl.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="portlet.plugins.includes" />

		<if>
			<isset property="portlet.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="portlets" />
					<property name="plugins.includes" value="${portlet.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="theme.plugins.includes" />

		<if>
			<isset property="theme.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="themes" />
					<property name="plugins.includes" value="${theme.plugins.includes}" />
				</ant>
			</then>
		</if>

		<get-testcase-property property.name="web.plugins.includes" />

		<if>
			<isset property="web.plugins.includes" />
			<then>
				<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
					<property name="plugin.types" value="webs" />
					<property name="plugins.includes" value="${web.plugins.includes}" />
				</ant>
			</then>
		</if>
	</target>

	<target name="deploy-sql-zip">
		<if>
			<matches pattern="https?://" string="${test.sql.zip.url}" />
			<then>
				<mirrors-get
					dest="sql/release-sql.zip"
					src="${test.sql.zip.url}"
				/>

				<unzip
					dest="sql/"
					src="sql/release-sql.zip"
				>
					<patternset
						includes="liferay-*/**"
					/>
					<mapper
						from="[^/]+/(create.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>
			</then>
		</if>
	</target>

	<target name="generate-changelog">
		<record-git-commit-plugins />
		<record-git-commit-portal />

		<tstamp>
			<format pattern="EEEE, d MMMM yyyy, hh:mm aa" property="build.tstamp.value" />
		</tstamp>

		<property name="changelog.dir" value="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}" />

		<math
			datatype="int"
			operand1="${env.BUILD_NUMBER}"
			operand2="1"
			operation="-"
			result="previous.build.number"
		/>

		<property name="previous.changelog.dir" value="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${previous.build.number}" />

		<if>
			<and>
				<available file="${previous.changelog.dir}/git-build-log.html" />
				<available file="${previous.changelog.dir}/git-commit-plugins" />
				<available file="${previous.changelog.dir}/git-commit-portal" />
			</and>
			<then>
				<loadfile
					property="previous.git.commit.plugins.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-plugins"
				/>

				<loadfile
					property="previous.git.commit.portal.rev.parse"
					srcfile="${previous.changelog.dir}/git-commit-portal"
				/>

				<copy
					file="${previous.changelog.dir}/git-build-log.html"
					tofile="${changelog.dir}/git-build-log.html"
				/>

				<if>
					<equals arg1="${git.commit.plugins.rev.parse}" arg2="${previous.git.commit.plugins.rev.parse}" />
					<then>
						<property name="git.log.content.plugins" value="No Changes" />
					</then>
					<else>
						<execute dir="${lp.plugins.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-plugins-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.plugins.rev.parse}...${git.commit.plugins.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.plugins"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<if>
					<equals arg1="${git.commit.portal.rev.parse}" arg2="${previous.git.commit.portal.rev.parse}" />
					<then>
						<property name="git.log.content.portal" value="No Changes" />
					</then>
					<else>
						<execute dir="${project.dir}">
							<![CDATA[git log --pretty=format:'<a href="https://github.com/liferay/liferay-portal-ee/commit/'%H'" target="_blank">'%H'</a>''<br />'%an'<br />'%s'<br /><br />' ${previous.git.commit.portal.rev.parse}...${git.commit.portal.rev.parse} > ${changelog.dir}/git.log]]>
						</execute>

						<loadfile
							property="git.log.content.portal"
							srcfile="${changelog.dir}/git.log"
						/>
					</else>
				</if>

				<replace
					file="${changelog.dir}/git-build-log.html"
				>
					<replacetoken><![CDATA[<!-- NEXT -->]]></replacetoken>
					<replacevalue expandproperties="true"><![CDATA[<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>
			<div id="update">
				<h2>
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>

				<div id="portal">
					<h4>
						Portal Git Log:
					</h4>
					<p>
						${git.log.content.portal}
					</p>
				</div>

				<div id="plugins">
					<h4>
						Plugins Git Log:
					</h4>
					<p>
						${git.log.content.plugins}
					</p>
				</div>
			</div>
		</div>
				]]></replacevalue>
				</replace>
			</then>
			<else>
				<echo file="${changelog.dir}/git-build-log.html"><![CDATA[<!DOCTYPE html>
<html>
	<head>
		<title>Git Build Log</title>
		<style>
			body {
				font-family: Helvetica, Arial, sans-serif;
				margin: 5%;
				padding: 0;
			}

			h2 {
				font-size: 17px;
				letter-spacing: 0.04em;
			}

			h4 {
				border-left: 1px solid #BABABA;
				color: #555;
				font-size: 20px;
				font-weight: 100;
				line-height: 30px;
				margin: 20px 20px 0;
				padding: 0 0 20px 10px;
			}

			p {
				font-size: 12px;
			}

			#updateWrapper:after {
				clear: both;
				content: "";
				display: table;
			}

			#update h2 {
				background-color: #4D9CD1;
				color: #FFF;
				padding: 15px;
			}

			.divider {
				background-color: #999;
				box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.5);
				height: 1px;
				margin: 15px 0 25px;
				width: 100%;
			}

			#plugins {
				float: right;
			}

			#portal {
				float: left;
			}

			#plugins, #portal {
				width: 48%;
			}

			#plugins p, #portal p {
				border-radius: 8px;
				-moz-border-radius: 8px;
				-webkit-border-radius: 8px;
				box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-moz-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				-webkit-box-shadow: inset 0px 1px 6px -1px rgba(0, 0, 0, 0.5);
				margin-top: 0;
				padding: 10px;
				word-wrap: break-word;
			}

			#plugins a, #portal a {
				color: #3D7CA6;
				font-family: Monaco, "Liberation Mono", Courier, monospace;
				font-weight: bold;
				text-decoration: none;
			}

			#plugins a:hover, #portal a:hover {
				text-decoration: underline;
			}
		</style>
	</head>
	<body>

		<!-- NEXT -->

		<div id="updateWrapper">
			<div class="divider"></div>

			<br />

			<div id="update">
				<h2>
					Initial Commit<br />
					Build #${env.BUILD_NUMBER} - ${env.JOB_NAME} - ${build.tstamp.value}<br />
					Portal: ${git.commit.portal.rev.parse}<br />
					Plugins: ${git.commit.plugins.rev.parse}
				</h2>
			</div>
		</div>
	</body>
</html>
				]]></echo>
			</else>
		</if>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${basedir}"
		/>

		<copy
			file="${changelog.dir}/git-build-log.html"
			todir="${env.JENKINS_HOME}/userContent/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}"
		/>
	</target>

	<target name="hot-deploy-osgi-apps">
		<get-testcase-property property.name="hot.deploy.osgi.app.includes" />

		<if>
			<isset property="hot.deploy.osgi.app.includes" />
			<then>
				<for list="${hot.deploy.osgi.app.includes}" param="osgi.app.name">
					<sequential>
						<antelope:stringutil property="osgi.app.name" string="@{osgi.app.name}">
							<antelope:trim />
						</antelope:stringutil>

						<local name="app.dir.includes" />

						<condition else="apps/${osgi.app.name}" property="app.dir.includes" value="apps/${osgi.app.name},dxp/apps/${osgi.app.name}">
							<equals arg1="${build.profile}" arg2="dxp" />
						</condition>

						<for param="app.dir">
							<path>
								<dirset
									dir="modules"
									includes="${app.dir.includes}"
								/>
							</path>
							<sequential>
								<local name="Liferay-Releng-App-Title" />

								<property file="@{app.dir}/app.bnd" />

								<if>
									<available file="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									<then>
										<delete file="${liferay.home}/osgi/marketplace/${Liferay-Releng-App-Title}.lpkg" />
									</then>
								</if>

								<gradle-execute dir="@{app.dir}" task="clean" />

								<if>
									<available file="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg" />
									<then>
										<echo>Copying ${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg to ${liferay.home}/deploy/${Liferay-Releng-App-Title}.lpkg.</echo>

										<copy
											file="${project.dir}/plugins/dist/${Liferay-Releng-App-Title}.lpkg"
											tofile="${liferay.home}/deploy/${Liferay-Releng-App-Title}.lpkg"
										/>
									</then>
									<elseif>
										<available file="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg" />
										<then>
											<echo>Copying ${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg to ${liferay.home}/deploy/${Liferay-Releng-App-Title}.lpkg.</echo>

											<copy
												file="${project.dir}/plugins/marketplace/${Liferay-Releng-App-Title}.lpkg"
												tofile="${liferay.home}/deploy/${Liferay-Releng-App-Title}.lpkg"
											/>
										</then>
									</elseif>
									<else>
										<echo>Generating and hot deploying all relevant modules that make up ${Liferay-Releng-App-Title}.lpkg.</echo>

										<for param="module.dir.path">
											<path>
												<dirset
													dir="@{app.dir}"
												>
													<exclude name="**/*-test*" />
													<present targetdir="@{app.dir}">
														<mapper
															from="*"
															to="*/bnd.bnd"
															type="glob"
														/>
													</present>
												</dirset>
											</path>
											<sequential>
												<if>
													<contains string="${test.modules.force.deploy}" substring="@{osgi.app.name}" />
													<then>
														<echo file="@{module.dir.path}/.lfrbuild-portal" />
													</then>
												</if>
											</sequential>
										</for>

										<gradle-execute dir="@{app.dir}" task="deploy">
											<arg value="clean" />
											<arg value="-Pliferay.home=${liferay.home}/osgi-temp" />
										</gradle-execute>

										<move
											todir="${liferay.home}/deploy-temp"
										>
											<fileset
												dir="${liferay.home}/deploy/"
												includes="**/*"
											/>
										</move>

										<ant antfile="build.xml" dir="modules" target="build-app-lpkg">
											<property name="app.name" value="${osgi.app.name}" />
											<property name="output.dir" value="${liferay.home}/deploy" />
											<property name="osgi.dir" value="${liferay.home}/osgi-temp/osgi" />
										</ant>

										<delete dir="${liferay.home}/osgi-temp" failonerror="false" />

										<if>
											<available file="${liferay.home}/deploy-temp" />
											<then>
												<move
													todir="${liferay.home}/deploy"
												>
													<fileset
														dir="${liferay.home}/deploy-temp/"
														includes="**/*"
													/>
												</move>

												<delete dir="${liferay.home}/deploy-temp" failonerror="false" />
											</then>
										</if>
									</else>
								</if>

								<sleep seconds="5" />

								<for param="lpkg.file.path">
									<path>
										<fileset
											dir="${liferay.home}/deploy"
										>
											<include name="*${Liferay-Releng-App-Title}*.lpkg" />
										</fileset>
									</path>
									<sequential>
										<echo>Disabling restart requirement for @{lpkg.file.path}</echo>

										<unzip
											dest="${liferay.home}/lpkg-unzip-temp"
											src="@{lpkg.file.path}"
										/>

										<echo append="true" file="${liferay.home}/lpkg-unzip-temp/liferay-marketplace.properties" message="${line.separator}" />

										<echo append="true" file="${liferay.home}/lpkg-unzip-temp/liferay-marketplace.properties">restart-required=false</echo>

										<zip
											destfile="@{lpkg.file.path}"
											update="true"
										>
											<zipfileset
												dir="${liferay.home}/lpkg-unzip-temp"
												includes="liferay-marketplace.properties"
											/>
										</zip>

										<delete dir="${liferay.home}/lpkg-unzip-temp" failonerror="false" />
									</sequential>
								</for>
							</sequential>
						</for>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<target name="install-patch">
		<fail message="Please set the property ${patch.file.zip.url}." unless="patch.file.zip.url" />

		<local name="patching.tool.dir" />

		<condition else="${app.server.parent.dir}-${install.patch.cluster.node.index}/patching-tool" property="patching.tool.dir" value="${app.server.parent.dir}/patching-tool">
			<or>
				<not>
					<isset property="install.patch.cluster.node.index" />
				</not>
				<equals arg1="${install.patch.cluster.node.index}" arg2="0" />
			</or>
		</condition>

		<if>
			<matches pattern="http:\/\/.*\/(Liferay[^\/]*\.lpkg)" string="${patch.file.zip.url}" />
			<then>
				<install-lpkg-patch patch.file.zip.url="${patch.file.zip.url}" />
			</then>
			<else>
				<install-patch patching.tool.dir="${patching.tool.dir}" patch.file.zip.url="${patch.file.zip.url}" />

				<validate-installed-patch patching.tool.dir="${patching.tool.dir}" patch.file.zip.url="${patch.file.zip.url}" />
			</else>
		</if>
	</target>

	<target name="install-patches">
		<fail message="Please set the property ${patch.file.zip.url}." unless="patch.file.zip.url" />

		<local name="patching.tool.dir" />

		<condition else="${app.server.parent.dir}-${install.patch.cluster.node.index}/patching-tool" property="patching.tool.dir" value="${app.server.parent.dir}/patching-tool">
			<or>
				<not>
					<isset property="install.patch.cluster.node.index" />
				</not>
				<equals arg1="${install.patch.cluster.node.index}" arg2="0" />
			</or>
		</condition>

		<if>
			<matches pattern="http:\/\/.*\/(Liferay[^\/]*\.lpkg)" string="${patch.file.zip.url}" />
			<then>
				<install-lpkg-patch patch.file.zip.url="${patch.file.zip.url}" />
			</then>
			<else>
				<if>
					<or>
						<contains string="${patch.file.zip.url}" substring="hotfix" />
						<contains string="${patch.file.zip.url}" substring="security" />
					</or>
					<then>
						<install-patch-dependencies patch.file.zip.url="${patch.file.zip.url}" />
					</then>
				</if>

				<install-patch patching.tool.dir="${patching.tool.dir}" patch.file.zip.url="${patch.file.zip.url}" />

				<validate-installed-patches patching.tool.dir="${patching.tool.dir}" />
			</else>
		</if>
	</target>

	<target name="kill-spi">
		<if>
			<os family="unix" />
			<then>
				<execute>
					kill -9 pgrep -n java
				</execute>
			</then>
			<else>
				<execute>
					taskkill.exe /F /FI "imagename eq java.exe" /FI "memusage lt 700000" /FI "memusage gt 600000"
				</execute>
			</else>
		</if>
	</target>

	<target name="merge-test-results">
		<mkdir dir="test-results" />

		<parallel timeout="1800000">
			<junitreport todir="test-results">
				<fileset
					dir="modules"
					erroronmissingdir="false"
				>
					<exclude name="**/node_modules/**/TEST-*.xml" />
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="portal-impl/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="portal-kernel/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="portal-web/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="tools/tck/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="util-java/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="util-taglib/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="${blade.samples.dir}/liferay-workspace/tests"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="${liferay.jenkins.dir}/commands/custom-scripts/test-results"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="${liferay.faces.bridge.impl.dir}/tck/bridge-tck-main-portlet"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="${liferay.faces.bridge.impl.dir}/test/integration"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<fileset
					dir="${liferay.faces.portal.dir}/test/integration"
					erroronmissingdir="false"
				>
					<include name="**/TEST-*.xml" />
				</fileset>
				<report format="frames" todir="test-results/html" />
			</junitreport>
		</parallel>

		<replaceregexp
			file="test-results/TESTS-TestSuites.xml"
			flags="g"
			match="\s*\&lt;/?propert[^\n^\r]*[\n\r]"
			replace=""
		/>

		<replaceregexp
			file="test-results/TESTS-TestSuites.xml"
			flags="g"
			match="&lt;system-out&gt;[\s\S]*?&lt;\/system-out&gt;"
			replace="&lt;system-out&gt;&lt;\/system-out&gt;"
		/>

		<replaceregexp
			file="test-results/TESTS-TestSuites.xml"
			flags="g"
			match="&lt;system-err&gt;[\s\S]*?&lt;\/system-err&gt;"
			replace="&lt;system-err&gt;&lt;\/system-err&gt;"
		/>

		<echo message="A report with all the test results can be found at test-results/html/index.html." />
	</target>

	<target name="move-file">
		<fail message="Please set the property ${file}." unless="file" />
		<fail message="Please set the property ${tofile}." unless="tofile" />

		<if>
			<available file="${file}" />
			<then>
				<move
					file="${file}"
					tofile="${tofile}"
				/>

				<echo message="Moved file ${file} to ${tofile}." />
			</then>
			<else>
				<echo message="File ${file} does not exist." />
			</else>
		</if>
	</target>

	<target name="portal-ext-properties-update">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<if>
			<equals arg1="${app.server.bundle.index}" arg2="0" />
			<then>
				<var name="test.app.server.classes.portal.dir" value="${app.server.classes.portal.dir}" />
			</then>
			<else>
				<antelope:stringutil property="test.app.server.classes.portal.dir" string="${app.server.classes.portal.dir}">
					<antelope:replace regex="(${app.server.parent.dir})(.*)" replacement="$1-${app.server.bundle.index}$2" />
				</antelope:stringutil>
			</else>
		</if>

		<if>
			<equals arg1="${add.new.properties}" arg2="true" />
			<then>
				<echo append="true" file="${test.app.server.classes.portal.dir}/portal-ext.properties">
${update.properties}</echo>
			</then>
			<else>
				<replace
					file="${test.app.server.classes.portal.dir}/portal-ext.properties"
					token="${update.properties.original}"
					value="${update.properties}"
				/>
			</else>
		</if>

		<apply-portal-ext-properties />
	</target>

	<target name="prepare-ip-address-update">
		<get-testcase-property property.name="testcase.url" />

		<if>
			<contains string="${testcase.url}" substring=":1]" />
			<then>
				<replace
					file="${app.server.bin.dir}/setenv${file.suffix.bat}"
				>
					<replacetoken><![CDATA[-Djava.net.preferIPv4Stack=true]]></replacetoken>
					<replacevalue><![CDATA[-Djava.net.preferIPv4Stack=false]]></replacevalue>
				</replace>
			</then>
		</if>
	</target>

	<target name="prepare-lcs-gateway-bundle">
		<ant antfile="build-dist.xml" inheritAll="false" target="unzip-tomcat">
			<property name="app.server.parent.dir" value="${app.server.parent.dir}/gateway" />
		</ant>

		<replaceregexp
			file="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/conf/server.xml"
			flags="g"
			match="=&quot;8(\d\d\d)&quot;"
			replace="=&quot;7\1&quot;"
		/>

		<copy
			file="${project.dir}/lib/portal/log4j.jar"
			tofile="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/lib/log4j.jar"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/gateway/plugins/webs/osb-lcs-gateway-web/docroot/WEB-INF/src/gateway-ext.properties"
			tofile="${lp.plugins.dir}/webs/osb-lcs-gateway-web/docroot/WEB-INF/src/gateway-ext.properties"
		/>

		<delete dir="${lp.plugins.dir}/dist" failonerror="false" />

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" inheritAll="false" target="clean" />

		<ant dir="${lp.plugins.dir}" target="war">
			<property name="plugins.includes" value="${plugins.includes.gateway}" />
		</ant>

		<copy
			todir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/webapps"
		>
			<fileset
				dir="${lp.plugins.dir}/dist"
			/>
		</copy>
	</target>

	<target name="prepare-lcs-portal-bundle">
		<antcall target="prepare-portal-ext-properties" />

		<antcall inheritAll="false" target="rebuild-database" />

		<loadfile
			property="lcs.portal.bundle.properties"
			srcFile="${lfrsite-lcs.dir}/jenkins/development/portal/artifacts/liferay/portal-ext.properties"
		/>

		<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties">

${lcs.portal.bundle.properties}</echo>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/artifacts/liferay/portal-log4j-ext.xml"
			tofile="${app.server.classes.global.dir}/portal-log4j-ext.xml"
		/>

		<replace
			file="${app.server.bin.dir}/setenv${file.suffix.bat}"
		>
			<replacetoken><![CDATA[-Djava.net.preferIPv4Stack=true]]></replacetoken>
			<replacevalue><![CDATA[-Djava.net.preferIPv4Stack=true -Dportal:ldap.auth.search.filter=\"(&(mail=@email_address@)(member=cn=Liferay\5C, Inc.,ou=Organizations,ou=liferay.com,o=Liferay))\" -Dportal:ldap.import.user.search.filter=\"(&(objectClass=inetOrgPerson)(member=cn=Liferay\5C, Inc.,ou=Organizations,ou=liferay.com,o=Liferay))\"]]></replacevalue>
		</replace>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
			tofile="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
			tofile="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/osb-lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
			tofile="${lp.plugins.dir}/portlets/osb-lcs-portlet/docroot/WEB-INF/src/META-INF/portal-log4j.xml"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/portlets/osb-lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
			tofile="${lp.plugins.dir}/portlets/osb-lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/portal/plugins/webs/file-repository-web/docroot/WEB-INF/web.xml"
			tofile="${lp.plugins.dir}/webs/file-repository-web/docroot/WEB-INF/web.xml"
		/>

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" target="clean" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins">
			<property name="plugins.includes" value="${plugins.includes.portal}" />
		</ant>
	</target>

	<target name="prepare-lcs-portlet-bundle">
		<chmod
			perm="a+x"
		>
			<fileset
				dir="${app.server.parent.dir}/patching-tool"
			>
				<include name="*.sh" />
			</fileset>
		</chmod>

		<delete file="${app.server.parent.dir}/patching-tool/default.properties" />

		<execute dir="${app.server.parent.dir}/patching-tool">
			patching-tool${file.suffix.bat} auto-discovery
			patching-tool${file.suffix.bat} setup
		</execute>

		<replace
			file="${app.server.dir}/bin/setenv${file.suffix.bat}"
		>
			<replacetoken><![CDATA[-XX:MaxPermSize=256m]]></replacetoken>
			<replacevalue><![CDATA[-javaagent:../../patching-tool/lib/patching-tool-agent.jar]]></replacevalue>
		</replace>

		<echo file="${lp.plugins.dir}/portlets/lcs-portlet/docroot/WEB-INF/src/portlet-ext.properties">#QA AWS

osb.lcs.gateway.web.host.name=${osb.lcs.gateway.web.host.name}
osb.lcs.gateway.web.host.port=${osb.lcs.gateway.web.host.port}

osb.lcs.portlet.host.name=${osb.lcs.portlet.host.name}
osb.lcs.portlet.host.port=${osb.lcs.portlet.host.port}

osb.lcs.portlet.oauth.consumer.key=${osb.lcs.portlet.oauth.consumer.key}
osb.lcs.portlet.oauth.consumer.secret=${osb.lcs.portlet.oauth.consumer.secret}</echo>

		<property name="plugins.includes" value="lcs-portlet" />

		<ant dir="${lp.plugins.dir}" target="clean" />

		<ant dir="${lp.plugins.dir}" target="compile" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins" />
	</target>

	<target name="prepare-lcs-processor-bundle">
		<ant antfile="build-dist.xml" inheritAll="false" target="unzip-tomcat">
			<property name="app.server.parent.dir" value="${app.server.parent.dir}/processor" />
		</ant>

		<replaceregexp
			file="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/conf/server.xml"
			flags="g"
			match="=&quot;8(\d\d\d)&quot;"
			replace="=&quot;9\1&quot;"
		/>

		<copy
			file="${project.dir}/lib/portal/log4j.jar"
			tofile="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/lib/log4j.jar"
		/>

		<copy
			file="${lfrsite-lcs.dir}/jenkins/development/processor/plugins/webs/osb-lcs-processor-web/docroot/WEB-INF/src/processor-ext.properties"
			tofile="${lp.plugins.dir}/webs/osb-lcs-processor-web/docroot/WEB-INF/src/processor-ext.properties"
		/>

		<delete dir="${lp.plugins.dir}/dist" failonerror="false" />

		<property file="${lfrsite-lcs.dir}/jenkins/build.development.properties" />

		<ant dir="${lp.plugins.dir}" inheritAll="false" target="clean" />

		<ant dir="${lp.plugins.dir}" target="war">
			<property name="plugins.includes" value="${plugins.includes.processor}" />
		</ant>

		<copy
			todir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/webapps"
		>
			<fileset
				dir="${lp.plugins.dir}/dist"
			/>
		</copy>
	</target>

	<target name="prepare-log4j-ext-xml">
		<var name="dialect.detector.log.level" value="INFO" />

		<if>
			<equals arg1="${database.type}" arg2="hypersonic" />
			<then>
				<var name="dialect.detector.log.level" value="ERROR" />
			</then>
		</if>

		<get-testcase-property property.name="database.bare.enabled" />

		<var name="release.local.service.impl.log.level" value="WARN" />

		<if>
			<equals arg1="${database.bare.enabled}" arg2="true" />
			<then>
				<var name="release.local.service.impl.log.level" value="ERROR" />
			</then>
		</if>

		<echo file="${app.server.classes.portal.dir}/META-INF/portal-log4j-ext.xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender class="org.apache.log4j.ConsoleAppender" name="CONSOLE">
		<layout class="org.apache.log4j.EnhancedPatternLayout">
			<param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%t][%c{1}:%L] %m%n" />
		</layout>
	</appender>

	<appender class="org.apache.log4j.rolling.RollingFileAppender" name="TEXT_FILE">
		<rollingPolicy class="org.apache.log4j.rolling.TimeBasedRollingPolicy">
			<param name="FileNamePattern" value="@liferay.home@/logs/liferay@spi.id@.%d{yyyy-MM-dd}.log" />
		</rollingPolicy>

		<layout class="org.apache.log4j.EnhancedPatternLayout">
			<param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%t][%c{1}:%L] %m%n" />
		</layout>
	</appender>

	<appender class="org.apache.log4j.rolling.RollingFileAppender" name="XML_FILE">
		<rollingPolicy class="org.apache.log4j.rolling.TimeBasedRollingPolicy">
			<param name="FileNamePattern" value="@liferay.home@/logs/liferay@spi.id@.%d{yyyy-MM-dd}.xml" />
		</rollingPolicy>

		<layout class="org.apache.log4j.xml.XMLLayout">
			<param name="LocationInfo" value="true" />
		</layout>
	</appender>

	<category name="com.liferay.frontend.js.spa.web.internal.servlet.taglib">
		<priority value="DEBUG" />
	</category>

	<category name="com.liferay.portal.dao.orm.hibernate.VerifySessionFactoryWrapper">
		<priority value="INFO" />
	</category>

	<category name="com.liferay.portal.equinox.log.bridge.internal">
		<priority value="DEBUG" />
	</category>

	<category name="com.liferay.portal.service.impl.ReleaseLocalServiceImpl">
		<priority value="${release.local.service.impl.log.level}" />
	</category>

	<category name="com.liferay.portal.spring.hibernate.DialectDetector">
		<priority value="${dialect.detector.log.level}" />
	</category>

	<root>
		<priority value="INFO" />
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="TEXT_FILE" />
		<appender-ref ref="XML_FILE" />
	</root>
</log4j:configuration>]]></echo>

		<echo file="${liferay.home}/osgi/log4j/com.liferay.portal.osgi.web.wab.generator.impl-log4j-ext.xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<category name="com.liferay.portal.osgi.web.wab.generator.internal.WabGenerator">
		<priority value="ERROR" />
	</category>

	<category name="com.liferay.portal.osgi.web.wab.generator.internal.processor.WabProcessor">
		<priority value="WARN" />
	</category>
</log4j:configuration>]]></echo>

		<echo file="${liferay.home}/osgi/log4j/com.liferay.portal.search.elasticsearch6.impl-log4j-ext.xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<category name="com.liferay.portal.search.elasticsearch6.internal.connection.EmbeddedElasticsearchConnection">
		<priority value="ERROR" />
	</category>
</log4j:configuration>]]></echo>

		<echo file="${liferay.home}/osgi/log4j/com.liferay.portal.search.elasticsearch7.impl-log4j-ext.xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<category name="com.liferay.portal.search.elasticsearch7.internal.connection.EmbeddedElasticsearchConnection">
		<priority value="ERROR" />
	</category>
</log4j:configuration>]]></echo>

		<echo file="${liferay.home}/osgi/log4j/org.apache.aries.jax.rs.whiteboard-log4j-ext.xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<category name="com.liferay.oauth2.provider.rest.internal.endpoint.liferay.LiferayOAuthDataProvider">
		<priority value="ERROR" />
	</category>

	<category name="org.apache.cxf.rs.security.oauth2.services.AbstractOAuthService">
		<priority value="ERROR" />
	</category>
</log4j:configuration>]]></echo>
	</target>

	<target name="prepare-mobile-device">
		<stop-android-device />

		<start-android-device />
	</target>

	<target name="prepare-osgi-module-configurations">
		<get-testcase-property property.name="osgi.module.configurations" />

		<if>
			<not>
				<available file="${liferay.home}/osgi/configs/com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config" />
			</not>
			<then>
				<prepare-blacklist-configuration />
			</then>
		</if>

		<get-testcase-property property.name="captcha.enabled" />

		<if>
			<not>
				<equals arg1="${captcha.enabled}" arg2="true" />
			</not>
			<then>
				<prepare-captcha-configuration />
			</then>
		</if>

		<prepare-elasticsearch-configuration />
	</target>

	<target name="prepare-patching-tool">
		<prepare-patching-tool patching.tool.dir="${app.server.parent.dir}/patching-tool" />
	</target>

	<target name="prepare-portal-ext-properties">
		<delete file="portal-impl/src/portal-ext.properties" />

		<if>
			<and>
				<isset property="test.base.dir.name" />
				<available file="${test.base.dir.name}/portal.properties" />
			</and>
			<then>
				<copy
					file="${test.base.dir.name}/portal.properties"
					tofile="portal-impl/src/portal-ext.properties"
				/>
			</then>
		</if>

		<get-database-property property.name="database.driver" />
		<get-database-property property.name="database.password" />
		<get-database-property property.name="database.url" />
		<get-database-property property.name="database.username" />
		<get-database-property property.name="database.version" />

		<echo append="true" file="portal-impl/src/portal-ext.properties">

liferay.home=${liferay.home}

plugin.notifications.enabled=false

jdbc.default.jndi.name=

jdbc.default.driverClassName=${database.driver}
jdbc.default.url=${database.url}
jdbc.default.username=${database.username}
jdbc.default.password=${database.password}

// HikariCP

jdbc.default.connectionTimeout=600000
jdbc.default.maximumPoolSize=20
jdbc.default.minimumIdle=0

jdbc.counter.maximumPoolSize=5
jdbc.counter.minimumIdle=0

// Tomcat

jdbc.default.initialSize=0
jdbc.default.maxActive=20
jdbc.default.maxIdle=0
jdbc.default.minIdle=0

jdbc.counter.initialSize=0
jdbc.counter.maxActive=5
jdbc.counter.maxIdle=0
jdbc.counter.minIdle=0

browser.launcher.url=

setup.wizard.enabled=false

mail.send.blacklist=

mail.session.jndi.name=

module.framework.properties.initial.system.check.enabled=true

sprite.root.dir=/tmp/sprite

memory.scheduler.org.quartz.threadPool.threadCount=1

persisted.scheduler.org.quartz.threadPool.threadCount=1

virtual.hosts.default.site.name=

com.liferay.portal.servlet.filters.strip.StripFilter=true

web.server.http.port=8080

admin.email.from.address=test@liferay.com

announcements.email.to.address=noreply@liferay.com</echo>

		<if>
			<equals arg1="${database.type}" arg2="oracle" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties"><![CDATA[
jdbc.default.connectionProperties=oracle.jdbc.ReadTimeout=0;oracle.net.CONNECT_TIMEOUT=0]]></echo>
			</then>
		</if>

		<get-testcase-property property.name="cluster.enabled" />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">
cluster.link.autodetect.address=

cluster.link.enabled=true

web.server.display.node=true</echo>
				<echo file="${liferay.home}/osgi/configs/com.liferay.portal.store.file.system.configuration.FileSystemStoreConfiguration.config">rootDir=&quot;${liferay.home}/data/document_library&quot;</echo>
			</then>
		</if>

		<get-testcase-property property.name="cluster.jdbc.ping" />

		<if>
			<equals arg1="${cluster.jdbc.ping}" arg2="true" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

cluster.link.channel.properties.control=${project.dir}/portal-web/test/functional/com/liferay/portalweb/dependencies/clustering_jdbc_ping.xml</echo>
			</then>
		</if>

		<get-testcase-property property.name="cluster.node.ip" />

		<if>
			<equals arg1="${cluster.node.ip}" arg2="true" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">
cluster.link.bind.addr["cluster-link-control"]=${ip.address}
cluster.link.bind.addr["cluster-link-udp"]=${ip.address}</echo>
			</then>
		</if>

		<get-testcase-property property.name="custom.properties" />

		<if>
			<isset property="custom.properties" />
			<then>
				<prepare-custom-properties custom.properties="${custom.properties}" />
			</then>
		</if>

		<get-testcase-property property.name="database.jndi.enabled" />

		<if>
			<equals arg1="${database.jndi.enabled}" arg2="true" />
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
				>
					<replacetoken>jdbc.default.jndi.name=</replacetoken>
					<replacevalue>jdbc.default.jndi.name=jdbc/LiferayPool</replacevalue>
				</replace>
			</then>
		</if>

		<if>
			<equals arg1="${database.type}" arg2="db2" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

hibernate.dialect=com.liferay.portal.dao.orm.hibernate.DB2Dialect
custom.sql.function.isnull=CAST(? AS VARCHAR(32672)) IS NULL
custom.sql.function.isnotnull=CAST(? AS VARCHAR(32672)) IS NOT NULL</echo>
			</then>
			<elseif>
				<equals arg1="${database.type}" arg2="sybase" />
				<then>
					<echo append="true" file="portal-impl/src/portal-ext.properties">

hibernate.dialect=org.hibernate.dialect.SybaseDialect
custom.sql.function.isnull=CONVERT(VARCHAR,?) IS NULL
custom.sql.function.isnotnull=CONVERT(VARCHAR,?) IS NOT NULL</echo>
				</then>
			</elseif>
		</if>

		<if>
			<equals arg1="${database.type}" arg2="oracle" />
			<then>
				<if>
					<equals arg1="${database.version}" arg2="11.2.0.1.0" />
					<then>
						<property name="oracle.instance.name" value="xe" />
					</then>
					<elseif>
						<and>
							<equals arg1="${database.version}" arg2="12.2.0.1" />
							<os family="windows" />
						</and>
						<then>
							<property name="oracle.instance.name" value="orcl" />
						</then>
					</elseif>
					<else>
						<property name="oracle.instance.name" value="oracl" />
					</else>
				</if>

				<replaceregexp
					file="portal-impl/src/portal-ext.properties"
					match="(jdbc:oracle:.*)oracl"
					replace="\1${oracle.instance.name}"
				/>
			</then>
		</if>

		<if>
			<and>
				<isset property="google.drive.integration.client.id.1" />
				<isset property="google.drive.integration.client.refresh.token.1" />
				<isset property="google.drive.integration.client.secret.1" />
			</and>
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">
google.drive.integration.client.id.1=${google.drive.integration.client.id.1}

google.drive.integration.client.refresh.token.1=${google.drive.integration.client.refresh.token.1}

google.drive.integration.client.secret.1=${google.drive.integration.client.secret.1}</echo>
			</then>
		</if>

		<if>
			<equals arg1="${hot.deploy.dependency.management.enabled}" arg2="false" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

hot.deploy.dependency.management.enabled=false</echo>
			</then>
		</if>

		<if>
			<equals arg1="${java.security}" arg2="true" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

portal.security.manager.strategy=liferay</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${app.server.type}" arg2="weblogic" />
				<equals arg1="${app.server.type}" arg2="websphere" />
				<equals arg1="${javascript.fast.load}" arg2="false" />
			</or>
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

javascript.fast.load=false</echo>
			</then>
		</if>

		<get-testcase-property property.name="blacklist.portal.profile.names.remove" />

		<if>
			<isset property="blacklist.portal.profile.names.remove" />
			<then>
				<beanshell>
					<![CDATA[
						StringBuilder sb = new StringBuilder();

						String blacklistPortalProfileNamesString = project.getProperty("blacklist.portal.profile.names");

						List blacklistPortalProfileNames = new ArrayList(Arrays.asList(blacklistPortalProfileNamesString.split(",")));

						String blacklistPortalProfileNamesRemoveString = project.getProperty("blacklist.portal.profile.names.remove");

						List blacklistPortalProfileNamesRemove = new ArrayList(Arrays.asList(blacklistPortalProfileNamesRemoveString.split(",")));

						blacklistPortalProfileNames.removeAll(blacklistPortalProfileNamesRemove);

						for (int i = 0; i < blacklistPortalProfileNames.size(); i++) {
							sb.append(blacklistPortalProfileNames.get(i));

							if ((i + 1) < blacklistPortalProfileNames.size()) {
								sb.append(",");
							}
						}

						project.setProperty("blacklist.portal.profile.names", sb.toString());
					]]>
				</beanshell>
			</then>
		</if>

		<echo append="true" file="portal-impl/src/portal-ext.properties">

module.framework.properties.blacklist.portal.profile.names=${blacklist.portal.profile.names}</echo>

		<if>
			<equals arg1="${app.server.type}" arg2="tcserver" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

session.cookie.use.full.hostname=true
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="portal.version" />

		<propertyregex
			input="${portal.version}"
			property="portal.major.version"
			regexp="(\d+\.\d+)\.\d+"
			select="\1"
		/>

		<if>
			<equals arg1="${portal.major.version}" arg2="5.1" />
			<then>
				<prepare-portal-legacy-properties portal.major.version="5.1" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
			</or>
			<then>
				<prepare-portal-legacy-properties portal.major.version="5.2" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
			</or>
			<then>
				<prepare-portal-legacy-properties portal.major.version="6.0" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
			</or>
			<then>
				<prepare-portal-legacy-properties portal.major.version="6.1" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portal.major.version}" arg2="5.1" />
				<equals arg1="${portal.major.version}" arg2="5.2" />
				<equals arg1="${portal.major.version}" arg2="6.0" />
				<equals arg1="${portal.major.version}" arg2="6.1" />
				<equals arg1="${portal.major.version}" arg2="6.2" />
			</or>
			<then>
				<prepare-portal-legacy-properties portal.major.version="6.2" />

				<echo append="true" file="portal-impl/src/portal-ext.properties">

upgrade.processes=${upgrade.processes.master}</echo>
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.5" />
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="#permissions.user.check.algorithm=5"
					value="permissions.user.check.algorithm=5"
				/>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="#permissions.view.dynamic.inheritance=false"
					value="permissions.view.dynamic.inheritance=false"
				/>
			</then>
		</if>

		<if>
			<isset property="set.permission.algorithm.6" />
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="permissions.user.check.algorithm=5"
					value=""
				/>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="permissions.view.dynamic.inheritance=false"
					value=""
				/>
			</then>
		</if>

		<get-testcase-property property.name="setup.wizard.enabled" />

		<if>
			<equals arg1="${setup.wizard.enabled}" arg2="true" />
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="setup.wizard.enabled=false"
					value=""
				/>

				<echo append="true" file="portal-impl/src/portal-ext.properties">

include-and-override=${liferay.home}/portal-setup-wizard.properties</echo>
			</then>
		</if>

		<if>
			<isset property="test.set.default.portal.properties" />
			<then>
				<echo file="portal-impl/src/portal-ext.properties">liferay.home=${liferay.home}</echo>
			</then>
		</if>

		<get-testcase-property property.name="test.smtp.server.enabled" />

		<if>
			<isset property="test.smtp.server.enabled" />
			<then>
				<echo append="true" file="portal-impl/src/portal-ext.properties">

mail.session.mail.smtp.port=25000</echo>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-6.1.0.27" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-7.0.0.7" />
				<equals arg1="${vm.vmdk.suffix}" arg2="websphere-8.0.0.0" />
			</or>
			<then>
				<replace
					file="portal-impl/src/portal-ext.properties"
					token="liferay.home=${liferay.home}"
					value="liferay.home=C:/WINDOWS/system32/config/systemprofile/liferay"
				/>

				<echo append="true" file="portal-impl/src/portal-ext.properties">

auto.deploy.dest.dir=C:/WINDOWS/system32/config/systemprofile/liferay/websphere-deploy</echo>
			</then>
		</if>

		<apply-portal-ext-properties />
	</target>

	<target name="prepare-portal-properties">
		<replace
			file="portal-impl/src/portal.properties"
		>
			<replacefilter
				token="#upgrade.processes="
				value="upgrade.processes="
			/>
			<replacefilter
				token="#com.liferay.portal.upgrade.UpgradeProcess_"
				value="com.liferay.portal.upgrade.UpgradeProcess_"
			/>
			<replacefilter
				token="verify.frequency=0"
				value="verify.frequency=1"
			/>
		</replace>
	</target>

	<target name="prepare-portal-ssl">
		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<if>
					<os family="unix" />
					<then>
						<exec dir="${app.server.parent.dir}" executable="/bin/bash">
							<arg value="-c" />
							<arg value="keytool -genkey -alias tomcat -dname CN=localhost -keyalg RSA -keypass liferay -storepass liferay -keystore keystore.jks" />
						</exec>
					</then>
					<elseif>
						<os family="windows" />
						<then>
							<exec dir="${app.server.parent.dir}" executable="cmd">
								<arg value="/c" />
								<arg value="keytool -genkey -alias tomcat -dname CN=localhost -keyalg RSA -keypass liferay -storepass liferay -keystore keystore.jks" />
							</exec>
						</then>
					</elseif>
				</if>

				<replace
					file="${app.server.dir}/conf/server.xml"
					token="&lt;Service name=&quot;Catalina&quot;&gt;"
					value="&lt;Service name= &quot;Catalina&quot;&gt;${line.separator}    &lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;${line.separator}           maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;${line.separator}           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;${app.server.parent.dir}/keystore.jks&quot; keystorePass=&quot;liferay&quot; /&gt;"
				/>
			</then>
			<else>
				<fail message="Enabling SSL for ${app.server.type} is not supported." />
			</else>
		</if>
	</target>

	<target name="prepare-portlet-ext-properties">
		<for list="${test.case.available.property.names}" param="test.case.available.property.name">
			<sequential>
				<if>
					<contains string="@{test.case.available.property.name}" substring="portlet.properties.com.liferay" />
					<then>
						<get-testcase-property property.name="@{test.case.available.property.name}" />

						<propertycopy from="@{test.case.available.property.name}" name="osgi.module.custom.properties" silent="true" />

						<if>
							<isset property="osgi.module.custom.properties" />
							<then>
								<propertyregex
									input="@{test.case.available.property.name}"
									override="true"
									property="osgi.module.name"
									regexp="portlet\.properties\.(.*)"
									select="\1"
								/>

								<pathconvert property="osgi.module.jar.file">
									<path>
										<fileset
											dir="${liferay.home}/osgi"
										>
											<include name="**/${osgi.module.name}.jar" />
										</fileset>
									</path>
								</pathconvert>

								<echo file="${liferay.home}/tmp/portlet-ext.properties">${osgi.module.custom.properties}</echo>

								<jar
									destfile="${osgi.module.jar.file}"
									update="true"
								>
									<fileset
										dir="${liferay.home}/tmp"
									>
										<include name="portlet-ext.properties" />
									</fileset>
								</jar>

								<delete dir="${liferay.home}/tmp" />
							</then>
						</if>
					</then>
				</if>

				<var name="osgi.module.custom.properties" unset="true" />
				<var name="osgi.module.jar.file" unset="true" />
				<var name="osgi.module.name" unset="true" />
			</sequential>
		</for>
	</target>

	<target name="prepare-poshi-runner-properties">
		<get-ip-address />

		<echo append="true" file="${test.ext.properties.file}">
			component.names=${component.names}
			get.location.max.retries=${test.get.location.max.retries}
			get.location.timeout=${test.get.location.timeout}
			ignore.errors.file.name=${project.dir}/portal-web/test-ignorable-error-lines.xml
			ip.address=${ip.address}
			liferay.home.dir.name=${liferay.home}
			output.dir.name=${selenium.output.dir.name}
			product.names=${product.names}
			project.dir=${project.dir}
			test.case.available.property.names=${test.case.available.property.names}
			test.console.log.file.name=${liferay.home}/logs/liferay.*.xml
			test.console.shut.down.file.name=${project.dir}/console-shut-down
			test.csv.report.property.names=${test.csv.report.property.names}
			test.dependencies.dir.name=dependencies
			test.poshi.warnings.file.name=${project.dir}/poshi-warnings.xml
			test.retry.command.wait.time=${test.retry.command.wait.time}
		</echo>

		<propertycopy from="browser.firefox.bin.file[${browser.firefox.version}]" name="browser.firefox.bin.file" silent="true" />

		<if>
			<isset property="browser.chrome.bin.args" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					browser.chrome.bin.args=${browser.chrome.bin.args}
				</echo>
			</then>
		</if>

		<if>
			<isset property="browser.chrome.bin.file" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					browser.chrome.bin.file=${browser.chrome.bin.file}
				</echo>
			</then>
		</if>

		<if>
			<isset property="browser.firefox.bin.file" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					browser.firefox.bin.file=${browser.firefox.bin.file}
				</echo>
			</then>
		</if>

		<if>
			<isset property="print.java.process.on.fail" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					print.java.process.on.fail=${print.java.process.on.fail}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.base.dir.name=${test.base.dir.name}
				</echo>
			</then>
			<else>
				<echo append="true" file="${test.ext.properties.file}">
					test.base.dir.name=test/
				</echo>
			</else>
		</if>

		<if>
			<and>
				<isset property="test.batch.max.group.size" />
				<isset property="test.batch.property.query" />
			</and>
			<then>
				<if>
					<os family="windows" />
					<then>
						<antelope:stringutil property="test.batch.property.query" string="${test.batch.property.query}">
							<antelope:replace regex="&quot;" replacement="\\\\\&quot;" />
						</antelope:stringutil>
					</then>
				</if>

				<echo append="true" file="${test.ext.properties.file}">
					test.batch.property.query=${test.batch.property.query}
					test.batch.max.group.size=${test.batch.max.group.size}
					test.batch.max.subgroup.size=${test.batch.max.subgroup.size}
					test.batch.run.type=${test.batch.run.type}
				</echo>
			</then>
			<elseif>
				<and>
					<isset property="test.batch.max.group.size" />
					<isset property="test.batch.property.names" />
					<isset property="test.batch.property.values" />
				</and>
				<then>
					<echo append="true" file="${test.ext.properties.file}">
						test.batch.max.group.size=${test.batch.max.group.size}
						test.batch.max.subgroup.size=${test.batch.max.subgroup.size}
						test.batch.property.names=${test.batch.property.names}
						test.batch.property.values=${test.batch.property.values}
						test.batch.run.type=${test.batch.run.type}
					</echo>
				</then>
			</elseif>
		</if>

		<if>
			<isset property="test.build.fix.pack.zip.url" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.build.fix.pack.zip.url=${test.build.fix.pack.zip.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.build.fix.pack.zip.url.previous" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.build.fix.pack.zip.url.previous=${test.build.fix.pack.zip.url.previous}
				</echo>
			</then>
		</if>

		<for list="${test.case.available.property.names}" param="test.case.available.property.name">
			<sequential>
				<if>
					<isset property="test.case.available.property.values[@{test.case.available.property.name}]" />
					<then>
						<echo append="true" file="${test.ext.properties.file}">
							test.case.available.property.values[@{test.case.available.property.name}]=${test.case.available.property.values[@{test.case.available.property.name}]}
						</echo>
					</then>
				</if>
			</sequential>
		</for>

		<if>
			<isset property="test.case.required.property.names" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.case.required.property.names=${test.case.required.property.names}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.class" />
			<then>
				<if>
					<contains string="${test.class}" substring="," />
					<then>
						<echo append="true" file="${test.ext.properties.file}">
							test.name=${test.class}
						</echo>
					</then>
					<else>
						<get-poshi-test-name />

						<echo append="true" file="${test.ext.properties.file}">
							test.name=${poshi.test.name}
						</echo>
					</else>
				</if>
			</then>
		</if>

		<if>
			<isset property="test.include.dir.names" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.include.dir.names=${test.include.dir.names}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.pause.on.failure" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.pause.on.failure=${test.pause.on.failure}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.run.environment" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.run.environment=${test.run.environment}
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.subrepo.dirs" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.subrepo.dirs=${test.subrepo.dirs}
				</echo>
			</then>
		</if>

		<if>
			<contains string="${test.class}" substring="," />
			<then>
				<propertyregex
					input="${test.class}"
					override="false"
					property="test.name.skip.portal.instance"
					regexp="(.*?),.*"
					replace="\1"
				/>

				<if>
					<contains string="${test.name.skip.portal.instance}" substring="." />
					<then>
						<propertyregex
							input="${test.name.skip.portal.instance}"
							override="true"
							property="test.name.skip.portal.instance"
							regexp=".*\.(.*)"
							replace="\1"
						/>
					</then>
				</if>

				<echo append="true" file="${test.ext.properties.file}">
					test.portal.instance=true
					test.name.skip.portal.instance=${test.name.skip.portal.instance}
				</echo>
			</then>
			<else>
				<echo append="true" file="${test.ext.properties.file}">
					test.portal.instance=${test.portal.instance}
				</echo>
			</else>
		</if>
	</target>

	<target name="prepare-selenium">
		<if>
			<matches pattern="[0-9]+_[0-9]+" string="${test.class}" />
			<then>
				<get-test-class />
			</then>
		</if>

		<delete file="${test.ext.properties.file}" />

		<antcall target="prepare-poshi-runner-properties">
			<param name="test.class" value="${test.class}" />
		</antcall>

		<antcall target="prepare-selenium-app-server-properties" />
		<antcall target="prepare-selenium-browser" />
		<antcall target="prepare-selenium-database-properties" />
		<antcall target="prepare-selenium-email-properties" />
		<antcall target="prepare-selenium-facebook-properties" />
		<antcall target="prepare-selenium-google-properties" />
		<antcall target="prepare-selenium-onedrive-properties" />
		<antcall target="prepare-selenium-openid-properties" />
		<antcall target="prepare-selenium-recaptcha-properties" />
		<antcall target="prepare-selenium-required-properties" />
		<antcall target="prepare-selenium-sharepoint-properties" />
		<antcall target="prepare-selenium-testcase-properties" />

		<if>
			<isset property="legacy.theme.ids" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					theme.ids=${legacy.theme.ids}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.branch" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					liferay.portal.branch=${liferay.portal.branch}
				</echo>
			</then>
		</if>

		<if>
			<isset property="liferay.portal.bundle" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					liferay.portal.bundle=${liferay.portal.bundle}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.url" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.url=${marketplace.url}
				</echo>
			</then>
		</if>

		<if>
			<isset property="osb.lcs.portlet.host.name" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					osb.lcs.portlet.host.name=${osb.lcs.portlet.host.name}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${tear.down.before.test}" arg2="true" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					tear.down.before.test=true
				</echo>
			</then>
		</if>

		<if>
			<not>
				<isset property="test.assert.console.errors" />
			</not>
			<then>
				<get-testcase-property property.name="test.assert.console.errors" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${test.assert.console.errors}" arg2="false" />
				<equals arg1="${test.assert.console.errors}" arg2="true" />
			</or>
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.assert.console.errors=${test.assert.console.errors}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.assert.liferay.errors}" arg2="false" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.assert.liferay.errors=false
				</echo>
			</then>
		</if>

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.base.dir.name=${test.base.dir.name}
				</echo>
			</then>
			<else>
				<echo append="true" file="${test.ext.properties.file}">
					test.base.dir.name=${basedir.unix}/portal-web/test/functional/com/liferay/portalweb/
				</echo>
			</else>
		</if>

		<if>
			<and>
				<contains string="${test.class}" substring="," />
				<equals arg1="${test.batch.run.type}" arg2="sequential" />
			</and>
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.skip.tear.down=false
				</echo>
			</then>
			<elseif>
				<isset property="test.skip.tear.down" />
				<then>
					<echo append="true" file="${test.ext.properties.file}">
						test.skip.tear.down=${test.skip.tear.down}
					</echo>
				</then>
			</elseif>
		</if>

		<if>
			<contains string="${test.class}" substring="#" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					testing.class.method=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.save.screenshot}" arg2="true" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					save.screenshot=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.save.web.page}" arg2="true" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					save.web.page=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${test.selenium.implementation}" arg2="selenium" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					selenium.implementation=com.thoughtworks.selenium.Selenium
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-app-server-properties">
		<if>
			<isset property="app.server.type" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					app.server.type=${app.server.type}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-browser">
		<get-testcase-property property.name="browser.type" />

		<echo append="true" file="${test.ext.properties.file}">
			browser.type=${browser.type}
			browser.version=${browser.version}
		</echo>

		<if>
			<or>
				<equals arg1="${browser.type}" arg2="android" />
				<equals arg1="${browser.type}" arg2="androidchrome" />
				<equals arg1="${browser.type}" arg2="iossafari" />
			</or>
			<then>
				<stop-appium />

				<start-appium />

				<echo append="true" file="${test.ext.properties.file}">
					mobile.android.home=${mobile.android.home}
					mobile.browser=true
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="android" />
			<then>
				<antcall target="prepare-mobile-device" />
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="androidchrome" />
			<then>
				<exec executable="/bin/bash" os="${os.apple},${os.unix}" outputproperty="mobile.device.name">
					<arg value="-c" />
					<arg value="${mobile.android.home}/platform-tools/adb devices" />
				</exec>

				<propertyregex
					input="${mobile.device.name}"
					override="true"
					property="mobile.device.name"
					regexp=".*\n([A-z0-9]*)"
					select="\1"
				/>

				<echo append="true" file="${test.ext.properties.file}">
					mobile.device.name=${mobile.device.name}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="chrome" />
			<then>
				<prepare-chrome-driver />

				<echo append="true" file="${test.ext.properties.file}">
					selenium.chrome.driver.executable=${selenium.chrome.driver.executable}
					selenium.chrome.driver.version=${selenium.chrome.driver.version}
					selenium.executable.dir.name=${selenium.executable.dir.name}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="edge" />
			<then>
				<prepare-edge-driver />

				<echo append="true" file="${test.ext.properties.file}">
					selenium.executable.dir.name=${selenium.executable.dir.name}
				</echo>
			</then>
		</if>

		<if>
			<and>
				<equals arg1="${browser.firefox.version}" arg2="52.0" />
				<equals arg1="${browser.type}" arg2="firefox" />
			</and>
			<then>
				<prepare-gecko-driver />

				<echo append="true" file="${test.ext.properties.file}">
					selenium.executable.dir.name=${selenium.executable.dir.name}
					selenium.gecko.driver.executable=${selenium.gecko.driver.executable}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="internetexplorer" />
			<then>
				<prepare-ie-driver />

				<echo append="true" file="${test.ext.properties.file}">
					selenium.executable.dir.name=${selenium.executable.dir.name}
					selenium.ie.driver.executable=${selenium.ie.driver.executable}
					selenium.ie.driver.version=${selenium.ie.driver.version}
				</echo>
			</then>
		</if>

		<if>
			<equals arg1="${browser.type}" arg2="safari" />
			<then>
				<prepare-safari-driver />
			</then>
		</if>

		<if>
			<equals arg1="${selenium.remote.driver.enabled}" arg2="true" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					selenium.desired.capabilities.platform=${selenium.desired.capabilities.platform}
					selenium.remote.driver.enabled=${selenium.remote.driver.enabled}
					selenium.remote.driver.hub=${selenium.remote.driver.hub}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-database-properties">
		<for list="${database.types}" param="database.type">
			<sequential>
				<if>
					<isset property="database.@{database.type}.driver" />
					<then>
						<local name="database.driver" />

						<propertycopy from="database.@{database.type}.driver" name="database.driver" />

						<echo append="true" file="${test.ext.properties.file}">
							database.@{database.type}.driver=${database.driver}
						</echo>
					</then>
				</if>

				<if>
					<isset property="database.@{database.type}.password" />
					<then>
						<local name="database.password" />

						<propertycopy from="database.@{database.type}.password" name="database.password" />

						<echo append="true" file="${test.ext.properties.file}">
							database.@{database.type}.password=${database.password}
						</echo>
					</then>
				</if>

				<if>
					<isset property="database.@{database.type}.schema" />
					<then>
						<local name="database.schema" />

						<propertycopy from="database.@{database.type}.schema" name="database.schema" />

						<echo append="true" file="${test.ext.properties.file}">
							database.@{database.type}.schema=${database.schema}
						</echo>
					</then>
				</if>

				<if>
					<isset property="database.@{database.type}.url" />
					<then>
						<local name="database.url" />

						<propertycopy from="database.@{database.type}.url" name="database.url" />

						<echo append="true" file="${test.ext.properties.file}">
							database.@{database.type}.url=${database.url}
						</echo>
					</then>
				</if>

				<if>
					<isset property="database.@{database.type}.username" />
					<then>
						<local name="database.username" />

						<propertycopy from="database.@{database.type}.username" name="database.username" />

						<echo append="true" file="${test.ext.properties.file}">
							database.@{database.type}.username=${database.username}
						</echo>
					</then>
				</if>
			</sequential>
		</for>

		<if>
			<isset property="database.type" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					database.type=${database.type}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-email-properties">
		<if>
			<isset property="email.address.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.address.1=${email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.address.2=${email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.address.3=${email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.4" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.address.4=${email.address.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.address.5" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.address.5=${email.address.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.password.1=${email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.password.2=${email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.password.3=${email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.4" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.password.4=${email.password.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="email.password.5" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					email.password.5=${email.password.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.address.1=${lcs.email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.address.2=${lcs.email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.address.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.address.3=${lcs.email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.id.1=${lcs.email.id.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.id.2=${lcs.email.id.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.id.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.id.3=${lcs.email.id.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.password.1=${lcs.email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.password.2=${lcs.email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="lcs.email.password.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					lcs.email.password.3=${lcs.email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.address.1=${marketplace.email.address.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.address.2=${marketplace.email.address.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.address.3=${marketplace.email.address.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.4" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.address.4=${marketplace.email.address.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.address.5" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.address.5=${marketplace.email.address.5}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.password.1=${marketplace.email.password.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.password.2=${marketplace.email.password.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.password.3=${marketplace.email.password.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.4" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.password.4=${marketplace.email.password.4}
				</echo>
			</then>
		</if>

		<if>
			<isset property="marketplace.email.password.5" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					marketplace.email.password.5=${marketplace.email.password.5}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-facebook-properties">
		<if>
			<isset property="facebook.application.id" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					facebook.application.id=${facebook.application.id}
				</echo>
			</then>
		</if>

		<if>
			<isset property="facebook.application.secret" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					facebook.application.secret=${facebook.application.secret}
				</echo>
			</then>
		</if>

		<if>
			<isset property="facebook.email" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					facebook.email=${facebook.email}
				</echo>
			</then>
		</if>

		<if>
			<isset property="facebook.password" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					facebook.password=${facebook.password}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-google-properties">
		<if>
			<isset property="google.api.key.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.api.key.1=${google.api.key.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.api.key.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.api.key.2=${google.api.key.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.api.key.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.api.key.3=${google.api.key.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.id.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.id.1=${google.client.id.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.id.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.id.2=${google.client.id.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.id.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.id.3=${google.client.id.3}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.secret.1" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.secret.1=${google.client.secret.1}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.secret.2" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.secret.2=${google.client.secret.2}
				</echo>
			</then>
		</if>

		<if>
			<isset property="google.client.secret.3" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					google.client.secret.3=${google.client.secret.3}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-onedrive-properties">
		<if>
			<isset property="onedrive.client.id" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					onedrive.client.id=${onedrive.client.id}
				</echo>
			</then>
		</if>

		<if>
			<isset property="onedrive.client.secret" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					onedrive.client.secret=${onedrive.client.secret}
				</echo>
			</then>
		</if>

		<if>
			<isset property="onedrive.tenant" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					onedrive.tenant=${onedrive.tenant}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-openid-properties">
		<if>
			<isset property="openid.password" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					openid.password=${openid.password}
				</echo>
			</then>
		</if>

		<if>
			<isset property="openid.username" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					openid.username=${openid.username}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-recaptcha-properties">
		<if>
			<isset property="recaptcha.private.key" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					recaptcha.private.key=${recaptcha.private.key}
				</echo>
			</then>
		</if>

		<if>
			<isset property="recaptcha.public.key" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					recaptcha.public.key=${recaptcha.public.key}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-required-properties">
		<get-test-url />

		<echo append="true" file="${test.ext.properties.file}">
			portal.url=${test.url}
			selenium.executable.dir=${basedir.unix}/tools/selenium/
			selenium.logger.enabled=${test.selenium.logger.enabled}
			test.class.command.name=${test.class}
		</echo>
	</target>

	<target name="prepare-selenium-sharepoint-properties">
		<if>
			<isset property="sharepoint.oauth.authorization.grant.endpoint" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.authorization.grant.endpoint=${sharepoint.oauth.authorization.grant.endpoint}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.authorization.token.endpoint" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.authorization.token.endpoint=${sharepoint.oauth.authorization.token.endpoint}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.client.id" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.client.id=${sharepoint.oauth.client.id}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.client.secret" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.client.secret=${sharepoint.oauth.client.secret}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.configuration.name" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.configuration.name=${sharepoint.oauth.configuration.name}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.configuration.resource" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.configuration.resource=${sharepoint.oauth.configuration.resource}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.configuration.scope" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.configuration.scope=${sharepoint.oauth.configuration.scope}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.site.domain" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.site.domain=${sharepoint.oauth.site.domain}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.tenant.id" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.tenant.id=${sharepoint.oauth.tenant.id}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.user.name" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.user.name=${sharepoint.oauth.user.name}
				</echo>
			</then>
		</if>

		<if>
			<isset property="sharepoint.oauth.user.password" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					sharepoint.oauth.user.password=${sharepoint.oauth.user.password}
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-selenium-testcase-properties">
		<get-testcase-property property.name="cmis.repository.type" />

		<if>
			<or>
				<equals arg1="${cmis.repository.type}" arg2="documentum6" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2010" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2013" />
			</or>
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					cmis.repository.vm.host.name=${cmis.repository.vm.host.name}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="ignore.errors" />

		<if>
			<isset property="ignore.errors" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					ignore.errors=${ignore.errors}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="ignore.errors.delimiter" />

		<if>
			<isset property="ignore.errors.delimiter" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					ignore.errors.delimiter=${ignore.errors.delimiter}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="test.assert.javascript.errors" />

		<if>
			<equals arg1="${test.assert.javascript.errors}" arg2="false" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.assert.javascript.errors=false
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="test.assert.warning.exceptions" />

		<if>
			<isset property="test.assert.warning.exceptions" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.assert.warning.exceptions=${test.assert.warning.exceptions}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="test.name.skip.portal.instance" />

		<if>
			<isset property="test.name.skip.portal.instance" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					test.name.skip.portal.instance=${test.name.skip.portal.instance}
				</echo>
			</then>
		</if>

		<get-testcase-property property.name="theme.file.name" />

		<if>
			<isset property="theme.file.name" />
			<then>
				<propertyregex
					input="${theme.file.name}"
					override="true"
					property="zipfileset.includes"
					regexp="([^\.]+)(\.[^\s]+)"
					replace="\1*\2"
				/>

				<if>
					<resourcecount count="0" when="greater">
						<zipfileset
							dir="${liferay.home}/osgi/war"
							includes="${zipfileset.includes}"
						>
							<patternset>
								<include name="**/private.lar" />
							</patternset>
						</zipfileset>
					</resourcecount>
					<then>
						<echo append="true" file="${test.ext.properties.file}">
							theme.contains.resources=true
						</echo>
					</then>
				</if>
			</then>
		</if>

		<property name="default.timeout.explicit.wait" value="${timeout.explicit.wait}" />

		<get-testcase-property property.name="timeout.explicit.wait" />

		<if>
			<isset property="timeout.explicit.wait" />
			<then>
				<echo append="true" file="${test.ext.properties.file}">
					timeout.explicit.wait=${timeout.explicit.wait}
				</echo>
			</then>
			<else>
				<echo append="true" file="${test.ext.properties.file}">
					timeout.explicit.wait=${default.timeout.explicit.wait}
				</echo>
			</else>
		</if>
	</target>

	<target name="prepare-so-plugins">
		<set-tomcat-version-number liferay.portal.bundle="${liferay.portal.bundle}" />

		<property file="${lp.plugins.dir}/portlets/so-portlet/docroot/WEB-INF/liferay-releng.properties" />

		<property name="plugins.includes" value="so-portlet,${dependent-apps}" />

		<ant antfile="build-test-plugins.xml" target="deploy-simple-server-plugins" />
	</target>

	<target name="prepare-system-ext-properties">
		<echo file="${app.server.classes.portal.dir}/system-ext.properties">com.liferay.portal.kernel.util.ServiceProxyFactory.timeout=300000
liferay.mode=test
log.sanitizer.enabled=false</echo>

		<get-testcase-property property.name="custom.system.properties" />

		<if>
			<isset property="custom.system.properties" />
			<then>
				<prepare-custom-properties
					custom.properties="${custom.system.properties}"
					properties.file="${app.server.classes.portal.dir}/system-ext.properties"
				/>
			</then>
		</if>
	</target>

	<target name="prepare-test-build">
		<record-git-commit-portal />

		<antcall inheritAll="false" target="compile" />

		<prepare-test-bundles unit="false" />

		<if>
			<not>
				<equals arg1="${test.build.unit}" arg2="true" />
			</not>
			<then>
				<antcall target="record-test-case-method-names" />
			</then>
		</if>

		<antcall inheritAll="false" target="compile-test" />

		<record-test-class-file-names />

		<antcall inheritAll="false" target="record-test-plugin-names" />

		<echo if:set="env.JENKINS_HOME">
ANT_OPTS=${env.ANT_OPTS}</echo>

		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-db2-processes" />
		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />
	</target>

	<target name="prepare-test-build-custom">
		<app-server-properties-update>
			app.server.type=${app.server.type}
		</app-server-properties-update>

		<antcall inheritAll="false" target="update-sdk-properties" />

		<prepare-test-app-server-custom />

		<ant inheritAll="false" target="deploy" />

		<app-server-properties-reset />
	</target>

	<target name="prepare-test-build-unit">
		<record-git-commit-portal />

		<antcall inheritAll="false" target="compile" />

		<prepare-test-bundles unit="true" />

		<antcall inheritAll="false" target="compile-test" />

		<record-test-class-file-names />

		<echo if:set="env.JENKINS_HOME">
ANT_OPTS=${env.ANT_OPTS}</echo>

		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-db2-processes" />
		<antcall if:set="env.JENKINS_HOME" inheritAll="false" target="clean-up-java-processes" />
	</target>

	<target name="prepare-test-bundle">
		<setup-libs />

		<if>
			<not>
				<isset property="app.server.name" />
			</not>
			<then>
				<property name="app.server.name" value="${app.server.type}" />
			</then>
		</if>

		<lstopwatch action="start" name="prepare.bundles.${app.server.name}" />

		<if>
			<matches pattern="(file|https?)://" string="${test.build.bundle.zip.url}" />
			<then>
				<mkdir dir="${app.server.parent.dir}" />

				<local name="bundle.file.name" />

				<basename file="${test.build.bundle.zip.url}" property="bundle.file.name" />

				<mirrors-get
					dest="${java.io.tmpdir}/${bundle.file.name}"
					src="${test.build.bundle.zip.url}"
				/>

				<decompress
					dest="${java.io.tmpdir}/bundle"
					src="${java.io.tmpdir}/${bundle.file.name}"
				/>

				<move
					todir="${app.server.parent.dir}"
				>
					<fileset
						dir="${java.io.tmpdir}/bundle"
						includes="liferay-*/**"
					/>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</move>

				<delete dir="${java.io.tmpdir}/bundle" />

				<delete file="${java.io.tmpdir}/${bundle.file.name}" />

				<chmod
					perm="a+x"
				>
					<fileset
						dir="${app.server.parent.dir}"
					>
						<include name="**/*.sh" />
					</fileset>
				</chmod>
			</then>
			<else>
				<if>
					<or>
						<equals arg1="${app.server.type}" arg2="weblogic" />
						<equals arg1="${app.server.type}" arg2="websphere" />
					</or>
					<then>
						<prepare-test-app-server-custom />
					</then>
					<else>
						<ant antfile="build-dist.xml" inheritAll="false" target="unzip-${app.server.type}" />

						<ant antfile="build.xml" inheritAll="false" target="deploy-additional-jars" />
					</else>
				</if>

				<mkdir dir="dist" />

				<mirrors-get
					dest="dist/liferay-portal-${lp.version}.war"
					src="${test.build.portal.war.url}"
				/>

				<if>
					<equals arg1="${app.server.type}" arg2="websphere" />
					<then>
						<tstamp>
							<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
						</tstamp>

						<mkdir dir="${tstamp.value}" />

						<unzip
							dest="${tstamp.value}"
							src="dist/liferay-portal-${lp.version}.war"
						/>

						<if>
							<available file="${tstamp.value}/WEB-INF/ibm-web-ext.xmi" />
							<then>
								<replace
									file="${tstamp.value}/WEB-INF/ibm-web-ext.xmi"
								>
									<replacetoken><![CDATA[value="16"]]></replacetoken>
									<replacevalue><![CDATA[value="18"]]></replacevalue>
								</replace>
							</then>
						</if>

						<zip
							basedir="${tstamp.value}"
							destfile="dist/liferay-portal-${lp.version}.war"
						/>

						<delete dir="${tstamp.value}" />

						<copy
							file="dist/liferay-portal-${lp.version}.war"
							tofile="${app.server.websphere.deploy.dir}/liferay-portal.war"
						/>
					</then>
					<else>
						<unzip
							dest="${app.server.portal.dir}"
							src="dist/liferay-portal-${lp.version}.war"
						/>
					</else>
				</if>

				<delete dir="dist" />

				<ant antfile="build.xml" inheritAll="false" target="update-app-server-scripts" />

				<mirrors-get
					dest="liferay-portal-dependencies.zip"
					src="${test.build.portal.dependencies.zip.url}"
				/>

				<unzip
					dest="${app.server.lib.global.dir}"
					src="liferay-portal-dependencies.zip"
				>
					<mapper
						from="[^/]+/(.*)"
						to="\1"
						type="regexp"
					/>
				</unzip>

				<if>
					<equals arg1="${app.server.type}" arg2="websphere" />
					<then>
						<local name="app.server.websphere.java.ext.dir" />

						<if>
							<equals arg1="${app.server.websphere.version}" arg2="8.5.5.0" />
							<then>
								<property name="app.server.websphere.java.ext.dir" value="${app.server.websphere.dir}/java_1.8_64/jre/lib/ext" />
							</then>
							<else>
								<property name="app.server.websphere.java.ext.dir" value="${app.server.websphere.dir}/javaext" />
							</else>
						</if>

						<mkdir dir="${app.server.websphere.java.ext.dir}" />

						<move
							file="${app.server.lib.global.dir}/portlet.jar"
							todir="${app.server.websphere.java.ext.dir}"
						/>

						<if>
							<available file="${app.server.portal.dir}/WEB-INF/ibm-web-ext.xml" />
							<then>
								<replace
									file="${app.server.portal.dir}/WEB-INF/ibm-web-ext.xml"
								>
									<replacetoken><![CDATA[</web-ext>]]></replacetoken>
									<replacevalue><![CDATA[  <jsp-attribute name="jdkSourceLevel" value="18" />
</web-ext>]]></replacevalue>
								</replace>

								<replace
									file="${app.server.websphere.instance.dir}/config/cells/liferay-cell/applications/liferay-portal.ear/deployments/liferay-portal/liferay-portal.war/WEB-INF/ibm-web-ext.xml"
								>
									<replacetoken><![CDATA[</web-ext>]]></replacetoken>
									<replacevalue><![CDATA[  <jsp-attribute name="jdkSourceLevel" value="18" />
</web-ext>]]></replacevalue>
								</replace>
							</then>
						</if>
					</then>
				</if>

				<delete file="liferay-portal-dependencies.zip" />

				<mirrors-get
					dest="liferay-portal-osgi.zip"
					src="${test.build.portal.osgi.zip.url}"
				/>

				<unzip
					dest="${liferay.home}/osgi"
					src="liferay-portal-osgi.zip"
				>
					<mapper
						from="[^/]+/(osgi/)?(.*)"
						to="\2"
						type="regexp"
					/>
				</unzip>

				<delete file="liferay-portal-osgi.zip" />

				<mirrors-get
					dest="liferay-portal-tools.zip"
					src="${test.build.portal.tools.zip.url}"
				/>

				<unzip
					dest="${liferay.home}/tools"
					src="liferay-portal-tools.zip"
				>
					<mapper
						from="[^/]+/(tools/)?(.*)"
						to="\2"
						type="regexp"
					/>
				</unzip>

				<move
					todir="${liferay.home}/tools"
				>
					<fileset
						dir="${liferay.home}/tools"
					/>
					<mapper
						from="^(.*com.liferay.portal.tools.db.upgrade.client).*\.jar$$"
						to="\1.jar"
						type="regexp"
					/>
				</move>

				<move
					todir="${liferay.home}/tools"
				>
					<fileset
						dir="${liferay.home}/tools"
					/>
					<mapper
						from="^(.*portal-tools-db-upgrade-client)-[^/]*(/.*)?"
						to="\1\2"
						type="regexp"
					/>
				</move>

				<if>
					<available file="${liferay.home}/tools/portal-tools-db-upgrade-client" />
					<then>
						<move
							flatten="true"
							todir="${liferay.home}/tools/portal-tools-db-upgrade-client"
						>
							<fileset
								dir="${liferay.home}/tools/portal-tools-db-upgrade-client"
							/>
						</move>
					</then>
				</if>

				<delete file="liferay-portal-tools.zip" />

				<if>
					<equals arg1="${app.server.type}" arg2="jboss" />
					<then>
						<prepare-jboss-module-configuration />
					</then>
				</if>
			</else>
		</if>

		<if>
			<or>
				<matches pattern="https?://" string="${test.build.bundle.zip.url}" />
				<matches pattern="https?://" string="${test.build.portal.osgi.zip.url}" />
			</or>
			<then>
				<local name="bundle.zip.url" />

				<if>
					<matches pattern="https?://" string="${test.build.bundle.zip.url}" />
					<then>
						<property name="bundle.zip.url" value="${test.build.bundle.zip.url}" />
					</then>
					<elseif>
						<matches pattern="https?://" string="${test.build.portal.osgi.zip.url}" />
						<then>
							<local name="bundle.base.url" />

							<propertyregex
								input="${test.build.portal.osgi.zip.url}"
								override="true"
								property="bundle.base.url"
								regexp="(.+/)[^/]+"
								replace="\1"
							/>

							<local name="bundle.content" />

							<exec executable="curl" outputproperty="bundle.content">
								<arg value="${bundle.base.url}" />
							</exec>

							<local name="bundle.zip.name" />

							<propertyregex
								input="${bundle.content}"
								override="true"
								property="bundle.zip.name"
								regexp="[\S\s]*href=\&quot;(liferay-[^\&quot;]+tomcat[^\&quot;]+\.(7z|zip))\&quot;[\S\s]*"
								replace="\1"
							/>

							<antelope:stringutil property="bundle.zip.url" string="${bundle.base.url}${bundle.zip.name}">
								<antelope:replace regex="-slim" replacement="" />
							</antelope:stringutil>
						</then>
					</elseif>
				</if>

				<var name="bundle.file.name" unset="true" />

				<basename file="${bundle.zip.url}" property="bundle.file.name" />

				<trycatch>
					<try>
						<mirrors-get
							dest="${java.io.tmpdir}/${bundle.file.name}"
							src="${bundle.zip.url}"
						/>
					</try>
					<catch>
						<propertyregex
							input="${bundle.zip.url}"
							override="true"
							property="bundle.zip.url"
							regexp="zip"
							replace="7z"
						/>

						<var name="bundle.file.name" unset="true" />

						<basename file="${bundle.zip.url}" property="bundle.file.name" />

						<mirrors-get
							dest="${java.io.tmpdir}/${bundle.file.name}"
							src="${bundle.zip.url}"
						/>
					</catch>
				</trycatch>

				<decompress
					dest="${java.io.tmpdir}/bundle"
					src="${java.io.tmpdir}/${bundle.file.name}"
				/>

				<move
					todir="${project.dir}/sql"
				>
					<fileset
						dir="${java.io.tmpdir}/bundle"
						includes="liferay-*/data/hypersonic/*"
					/>
					<mapper
						from="liferay-[^/]+/data/hypersonic/([^/]+)"
						to="\1"
						type="regexp"
					/>
				</move>

				<delete dir="${java.io.tmpdir}/bundle" />

				<delete file="${java.io.tmpdir}/${bundle.file.name}" />
			</then>
		</if>

		<if>
			<matches pattern="https?://" string="${test.build.fix.pack.zip.url}" />
			<then>
				<antcall target="prepare-patching-tool" />

				<get-testcase-property property.name="skip.install-patch" />
				<get-testcase-property property.name="testray.main.component.name" />

				<if>
					<not>
						<equals arg1="${skip.install-patch}" arg2="true" />
					</not>
					<then>
						<if>
							<equals arg1="${testray.main.component.name}" arg2="Rolling Restart" />
							<then>
								<if>
									<and>
										<matches pattern="https?://" string="${test.build.fix.pack.zip.url.previous}" />
										<not>
											<matches pattern="dxp-0-" string="${test.build.fix.pack.zip.url.previous}" />
										</not>
									</and>
									<then>
										<antcall target="install-patches">
											<param name="patch.file.zip.url" value="${test.build.fix.pack.zip.url.previous}" />
										</antcall>
									</then>
									<else>
										<antcall target="install-patches">
											<param name="patch.file.zip.url" value="${test.build.fix.pack.zip.url}" />
										</antcall>
									</else>
								</if>
							</then>
							<else>
								<antcall target="install-patches">
									<param name="patch.file.zip.url" value="${test.build.fix.pack.zip.url}" />
								</antcall>
							</else>
						</if>
					</then>
				</if>
			</then>
		</if>

		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<antcall target="prepare-tomcat-ext-environment" />
			</then>
		</if>

		<lstopwatch action="total" name="prepare.bundles.${app.server.name}" />
	</target>

	<target name="prepare-tomcat-ext-environment">
		<if>
			<and>
				<matches pattern="https?://" string="${test.build.bundle.zip.url}" />
				<matches pattern="https?://" string="${test.build.fix.pack.zip.url}" />
				<not>
					<resourcecontains
						resource="${app.server.dir}/conf/Catalina/localhost/ROOT.xml"
						substring="ExtResourceSet"
					/>
				</not>
			</and>
			<then>
				<local name="enable.ext.environment" />

				<get-fixpack-version patch.file.zip.url="${test.build.fix.pack.zip.url}" />

				<beanshell>
					<![CDATA[
						String fixpackVersion = project.getProperty("fixpack.version");

						if (fixpackVersion != null) {
							int fixpackVersionInt = Integer.valueOf(fixpackVersion);

							if (fixpackVersionInt >= 16) {
								project.setProperty("enable.ext.environment", "true");
							}
						}
					]]>
				</beanshell>

				<get-testcase-property property.name="test.ignore.tomcat.ext.environment" />

				<if>
					<and>
						<equals arg1="${enable.ext.environment}" arg2="true" />
						<not>
							<equals arg1="${test.ignore.tomcat.ext.environment}" arg2="true" />
						</not>
					</and>
					<then>
						<replace
							file="${app.server.dir}/conf/Catalina/localhost/ROOT.xml"
						>
							<replacetoken><![CDATA[</Context>]]></replacetoken>
							<replacevalue><![CDATA[	<Resources>
		<PreResources
			base="${catalina.base}/lib/ext/portal"
			className="com.liferay.support.tomcat.webresources.ExtResourceSet"
			webAppMount="/WEB-INF/lib"
		/>
	</Resources>
</Context>]]></replacevalue>
						</replace>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="prepare-virtual-host-name-properties">
		<if>
			<isset property="virtual.host.name" />
			<then>
				<echo append="true" file="portal-web/test/test-portal-impl-ext.properties">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>

				<echo append="true" file="${test.ext.properties.file}">
					portal.url=www.${virtual.host.name}.com:8080
				</echo>
			</then>
		</if>
	</target>

	<target name="prepare-virtual-network-interface">
		<echo append="true" file="portal-impl/src/portal-ext.properties">

cluster.link.channel.system.properties=\
	#
	# Common
	#
	\
	jgroups.bind_addr:${cluster.link.bind.addr["cluster-link-udp"]},\
	jgroups.bind_interface:eth0:0,\
	\
	#
	# Multicast
	#
	\
	jgroups.mping.mcast_addr:${multicast.group.address["cluster-link-mping"]},\
	jgroups.mping.mcast_port:${multicast.group.port["cluster-link-mping"]},\
	jgroups.mping.ip_ttl:8

cluster.link.autodetect.address=

cluster.link.bind.addr["cluster-link-control"]=127.0.0.1

cluster.link.bind.addr["cluster-link-udp"]=127.0.0.1</echo>
	</target>

	<target name="print-scm-revision">
		<echo>Portal GIT ID:</echo>
		<echo />

		<exec dir="${project.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
		<echo>Plugins GIT ID:</echo>
		<echo />

		<exec dir="${lp.plugins.dir}" executable="git">
			<arg line="log -n 1" />
		</exec>

		<echo />
	</target>

	<target depends="build-sql-file" name="rebuild-database">
		<if>
			<not>
				<isset property="skip.rebuild-database" />
			</not>
			<then>
				<antcall target="delete-liferay-home" />

				<if>
					<and>
						<equals arg1="${env.DOCKER_ENABLED}" arg2="true" />
						<not>
							<equals arg1="${database.type}" arg2="hypersonic" />
						</not>
					</and>
					<then>
						<get-database-property property.name="database.host" />
						<get-database-property property.name="database.password" />
						<get-database-property property.name="database.schema" />
						<get-database-property property.name="database.username" />

						<property location="create.sh" name="create.sh.file.path" />
						<property location="create.sql" name="create.sql.file.path" />

						<if>
							<equals arg1="${database.type}" arg2="db2" />
							<then>
								<get-testcase-property property.name="databases.size" />

								<echo file="${create.sh.file.path}">
									<![CDATA[
										#!/bin/bash

										db2 disconnect lportal

										db2 drop db lportal

										db2 drop db lportal${databases.size}

										db2 -f/tmp/create.sql -st
									]]>
								</echo>
							</then>
							<elseif>
								<or>
									<equals arg1="${database.type}" arg2="mariadb" />
									<equals arg1="${database.type}" arg2="mysql" />
								</or>
								<then>
									<echo file="${create.sh.file.path}">
										<![CDATA[
											#!/bin/bash

											mysql --host=${database.host} --password=${database.password} --user=${database.username} < /tmp/create.sql
										]]>
									</echo>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="oracle" />
								<then>
									<echo file="${create.sh.file.path}">
										<![CDATA[
											#!/bin/bash

											sqlplus ${oracle.admin.user}/${oracle.admin.password} @/tmp/create.sql ${database.username} ${database.password}
										]]>
									</echo>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="postgresql" />
								<then>
									<echo file="${create.sh.file.path}">
										<![CDATA[
											#!/bin/bash

											export PGPASSWORD=${database.password}

											psql --file=/tmp/create.sql --username=${database.username}
										]]>
									</echo>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="sybase" />
								<then>
									<echo file="${create.sh.file.path}">
										<![CDATA[
											#!/bin/bash

											isql -i /tmp/create.sql -P ${database.password} -S ${database.schema} -U ${database.username}
										]]>
									</echo>
								</then>
							</elseif>
						</if>

						<execute>
							<![CDATA[
								docker cp ${create.sh.file.path} ${database.host}:/tmp/create.sh
								docker cp ${create.sql.file.path} ${database.host}:/tmp/create.sql

								docker exec ${database.host} /bin/bash /tmp/create.sh
							]]>
						</execute>

						<delete file="${create.sh.file.path}" />
					</then>
					<else>
						<if>
							<equals arg1="${database.type}" arg2="db2" />
							<then>
								<get-testcase-property property.name="databases.size" />

								<if>
									<os family="windows" />
									<then>
										<exec executable="${db2.executable}">
											<arg line="/c /w db2 disconnect lportal" />
										</exec>

										<exec executable="${db2.executable}">
											<arg line="/c /w db2 drop db lportal" />
										</exec>

										<if>
											<isset property="databases.size" />
											<then>
												<exec executable="${db2.executable}">
													<arg line="/c /w db2 drop db lportal${databases.size}" />
												</exec>
											</then>
										</if>

										<exec executable="${db2.executable}">
											<arg line="/c /w db2 -fcreate.sql -td;" />
										</exec>
									</then>
									<else>
										<exec executable="${db2.executable}">
											<arg line="disconnect lportal" />
										</exec>

										<exec executable="${db2.executable}">
											<arg line="drop db lportal" />
										</exec>

										<exec executable="${db2.executable}" if:set="databases.size">
											<arg line="drop db lportal${databases.size}" />
										</exec>

										<exec executable="${db2.executable}" failonerror="true">
											<arg value="-fcreate.sql" />
											<arg value="-t" />
										</exec>
									</else>
								</if>
							</then>
							<elseif>
								<and>
									<available file="sql/${database.name}.properties" />
									<available file="sql/${database.name}.script" />
									<equals arg1="${database.type}" arg2="hypersonic" />
								</and>
								<then>
									<delete dir="${liferay.home}/data" includeemptydirs="true" />

									<copy
										file="sql/${database.name}.properties"
										tofile="${liferay.home}/data/hypersonic/${database.name}.properties"
									/>
									<copy
										file="sql/${database.name}.script"
										tofile="${liferay.home}/data/hypersonic/${database.name}.script"
									/>
								</then>
							</elseif>
							<elseif>
								<or>
									<equals arg1="${database.type}" arg2="mariadb" />
									<equals arg1="${database.type}" arg2="mysql" />
								</or>
								<then>
									<var name="arg.line" value="" />

									<get-database-property property.name="database.host" />

									<local name="mysql.host" />

									<if>
										<and>
											<equals arg1="${database.host}" arg2="localhost" />
											<istrue value="${test.docker.environment}" />
										</and>
										<then>
											<property name="mysql.host" value="127.0.0.1" />
										</then>
										<else>
											<property name="mysql.host" value="" />
										</else>
									</if>

									<var name="arg.line" unless:blank="${mysql.host}" value="${arg.line} --host=${mysql.host}" />

									<get-database-property property.name="database.password" />
									<get-database-property property.name="database.username" />

									<var name="arg.line" unless:blank="${database.password}" value="${arg.line} --password=${database.password}" />
									<var name="arg.line" unless:blank="${database.username}" value="${arg.line} --user=${database.username}" />

									<propertycopy from="${database.type}.executable" name="database.executable" override="true" />

									<retry retrycount="3" retrydelay="60000">
										<exec executable="${database.executable}" failonerror="true" input="create.sql">
											<arg line="${arg.line}" />
										</exec>
									</retry>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="oracle" />
								<then>
									<get-database-property property.name="database.password" />
									<get-database-property property.name="database.username" />

									<if>
										<os family="windows" />
										<then>
											<exec executable="${oracle.sqlplus.executable}" failonerror="true">
												<arg value="${oracle.admin.user}/${oracle.admin.password} as sysdba" />
												<arg value="@create.sql" />
												<arg value="${database.username}" />
												<arg value="${database.password}" />
											</exec>
										</then>
										<else>
											<retry retrycount="10" retrydelay="60000">
												<exec executable="${oracle.sqlplus.executable}" failonerror="true">
													<arg value="${oracle.admin.user}/${oracle.admin.password}" />
													<arg value="@create.sql" />
													<arg value="${database.username}" />
													<arg value="${database.password}" />
												</exec>
											</retry>
										</else>
									</if>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="postgresql" />
								<then>
									<get-database-property property.name="database.username" />

									<retry retrycount="3" retrydelay="60000">
										<exec executable="${postgresql.executable}" failonerror="true">
											<arg value="-f" />
											<arg value="create.sql" />
											<arg value="-U" />
											<arg value="${database.username}" />
										</exec>
									</retry>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="sqlserver" />
								<then>
									<get-database-property property.name="database.password" />
									<get-database-property property.name="database.username" />

									<exec executable="${sqlserver.executable}" failonerror="true">
										<arg value="-U" />
										<arg value="${database.username}" />
										<arg value="-P" />
										<arg value="${database.password}" />
										<arg value="-i" />
										<arg value="create.sql" />
									</exec>
								</then>
							</elseif>
							<elseif>
								<equals arg1="${database.type}" arg2="sybase" />
								<then>
									<get-database-property property.name="database.password" />
									<get-database-property property.name="database.schema" />
									<get-database-property property.name="database.username" />

									<retry retrycount="3" retrydelay="60000">
										<exec executable="${sybase.executable}" failonerror="true">
											<arg value="-i" />
											<arg value="create.sql" />
											<arg value="-P" />
											<arg value="${database.password}" />
											<arg value="-S" />
											<arg value="${database.schema}" />
											<arg value="-U" />
											<arg value="${database.username}" />
										</exec>
									</retry>
								</then>
							</elseif>
						</if>
					</else>
				</if>
			</then>
		</if>

		<delete file="create.sql" />
	</target>

	<target name="rebuild-legacy-database">
		<if>
			<not>
				<isset property="skip.get.testcase.database.properties" />
			</not>
			<then>
				<get-testcase-property property.name="data.archive.type" />
				<get-testcase-property property.name="portal.version" />
			</then>
		</if>

		<unzip
			dest="${liferay.home}"
			src="${portal.legacy.dir}/${portal.version}/data-archive/${data.archive.type}-${database.type}.zip"
		/>

		<if>
			<equals arg1="${env.DOCKER_ENABLED}" arg2="true" />
			<then>
				<get-database-property property.name="database.host" />
				<get-database-property property.name="database.password" />
				<get-database-property property.name="database.schema" />
				<get-database-property property.name="database.username" />

				<property location="import-database.sh" name="import.database.sh.file.path" />

				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<echo file="${import.database.sh.file.path}">
							<![CDATA[
								#!/bin/bash

								echo "db2 restore database lportal user ${database.username} using ${database.password} from /opt/ibm/db2 replace existing"

								output=$(db2 restore database lportal user ${database.username} using ${database.password} from /opt/ibm/db2 replace existing)

								exit_code=$?

								if [[ (${exit_code} != "0") && ($output == *"SQL2555I"*) ]]
								then
									echo "$output"

									exit 0
								else
									echo "$output"

									exit ${exit_code}
								fi
							]]>
						</echo>

						<property name="docker.database.dest.path" value="/opt/ibm/db2" />
						<property name="import.database.src.path" value="${liferay.home}/." />
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="mariadb" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-mysql.sql" />
							</antcall>

							<echo file="${import.database.sh.file.path}">
								<![CDATA[
									#!/bin/bash

									mysql --database=${database.schema} --password=${database.password} --user=${database.username} < /tmp/${database.type}.sql
								]]>
							</echo>

							<property name="docker.database.dest.path" value="/tmp/${database.type}.sql" />
							<property name="import.database.src.path" value="${liferay.home}/${database.type}.sql" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="mysql" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-mysql.sql" />
							</antcall>

							<echo file="${import.database.sh.file.path}">
								<![CDATA[
									#!/bin/bash

									mysql --database=${database.schema} --password=${database.password} --user=${database.username} < /tmp/${database.type}.sql

									mysql_upgrade --force --password=${database.password} --user=${database.username}
								]]>
							</echo>

							<property name="docker.database.dest.path" value="/tmp/${database.type}.sql" />
							<property name="import.database.src.path" value="${liferay.home}/${database.type}.sql" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<property location="${project.dir}/import-database.sql" name="oracle.setup.file.path" />

							<echo file="${oracle.setup.file.path}">
								<![CDATA[
									drop user lportal cascade;

									create or replace directory DATA_PUMP_DIR as '/tmp/data_pump_dir';

									select directory_name, directory_path from dba_directories where directory_name='DATA_PUMP_DIR';

									quit;
								]]>
							</echo>

							<echo file="${import.database.sh.file.path}">
								<![CDATA[
									#!/bin/bash

									impdp ${oracle.admin.user}/${oracle.admin.password} dumpfile=oracle.dmp table_exists_action=replace
								]]>
							</echo>

							<execute>
								<![CDATA[
									docker exec ${database.host} mkdir -p /tmp/data_pump_dir

									docker exec ${database.host} chown -R oracle:oracle /tmp/data_pump_dir

									docker cp ${oracle.setup.file.path} ${database.host}:/tmp/import-database.sql

									docker exec ${database.host} sqlplus ${oracle.admin.user}/${oracle.admin.password} @/tmp/import-database.sql
								]]>
							</execute>

							<property name="docker.database.dest.path" value="/tmp/data_pump_dir/${database.type}.dmp" />
							<property name="import.database.src.path" value="${liferay.home}/${database.type}.dmp" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="postgresql" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-${database.type}.sql" />
							</antcall>

							<echo file="${import.database.sh.file.path}">
								<![CDATA[
									#!/bin/bash

									export PGPASSWORD=${database.password}

									psql --dbname=${database.schema} --file=/tmp/postgresql.sql --username=${database.username}
								]]>
							</echo>

							<property name="docker.database.dest.path" value="/tmp/${database.type}.sql" />
							<property name="import.database.src.path" value="${liferay.home}/${database.type}.sql" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<echo file="${import.database.sh.file.path}">
								<![CDATA[
									#!/bin/bash

									export SYBASE_ASE=${env.SYBASE_ASE}

									${env.SYBASE}/${env.SYBASE_ASE}/bin/backupserver -Slportal_BS &>/dev/null &

									while ! echo exit | nc ${database.host} 5001; do sleep 60; done

									cat /tmp/sybase.sql

									cat lportal__srv.log

									${sybase.executable} -P ${database.password} -S ${database.schema} -U ${database.username} -i /tmp/sybase.sql --retserverror
								]]>
							</echo>

							<property location="import-database.sql" name="import.database.sql.file.path" />

							<echo file="import-database.sql">load database lportal from "/tmp/sybase.dmp"
go
online database lportal
go</echo>

							<execute>
								<![CDATA[
									docker cp ${import.database.sql.file.path} ${database.host}:/tmp/import-database.sql
								]]>
							</execute>

							<property name="docker.database.dest.path" value="/tmp/${database.type}.dmp" />
							<property name="import.database.src.path" value="${liferay.home}/${database.type}.dmp" />
						</then>
					</elseif>
				</if>

				<execute>
					<![CDATA[
						docker cp ${import.database.sh.file.path} ${database.host}:/tmp/import-database.sh
						docker cp ${import.database.src.path} ${database.host}:${docker.database.dest.path}

						docker exec ${database.host} /bin/bash /tmp/import-database.sh
					]]>
				</execute>
			</then>
			<else>
				<if>
					<equals arg1="${database.type}" arg2="db2" />
					<then>
						<echo>chmod -v 777 ${liferay.home}</echo>

						<chmod
							file="${liferay.home}"
							perm="777"
							type="dir"
							verbose="true"
						/>

						<echo>${db2.executable} restore database lportal from ${liferay.home} replace existing</echo>

						<exec executable="${db2.executable}" outputproperty="db2.executable.output">
							<arg line="restore database lportal from ${liferay.home} replace existing" />
						</exec>

						<echo>${db2.executable.output}</echo>
					</then>
					<elseif>
						<equals arg1="${database.type}" arg2="mariadb" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-mysql.sql" />
							</antcall>

							<get-database-property property.name="database.password" />
							<get-database-property property.name="database.schema" />
							<get-database-property property.name="database.username" />

							<exec executable="${mariadb.executable}" input="${liferay.home}/${database.type}.sql">
								<arg value="--database=${database.schema}" />
								<arg value="--password=${database.password}" />
								<arg value="--user=${database.username}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="mysql" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-mysql.sql" />
							</antcall>

							<var name="arg.line" value="" />

							<get-database-property property.name="database.host" />

							<local name="mysql.host" />

							<if>
								<and>
									<equals arg1="${database.host}" arg2="localhost" />
									<istrue value="${test.docker.environment}" />
								</and>
								<then>
									<property name="mysql.host" value="127.0.0.1" />
								</then>
								<else>
									<property name="mysql.host" value="" />
								</else>
							</if>

							<var name="arg.line" unless:blank="${mysql.host}" value="${arg.line} --host=${mysql.host}" />

							<get-database-property property.name="database.password" />
							<get-database-property property.name="database.schema" />
							<get-database-property property.name="database.username" />

							<var name="arg.line" unless:blank="${database.password}" value="${arg.line} --password=${database.password}" />
							<var name="arg.line" unless:blank="${database.schema}" value="${arg.line} --database=${database.schema}" />
							<var name="arg.line" unless:blank="${database.username}" value="${arg.line} --user=${database.username}" />

							<retry retrycount="3" retrydelay="60000">
								<exec executable="${mysql.executable}" input="${liferay.home}/${database.type}.sql">
									<arg line="${arg.line}" />
								</exec>
							</retry>

							<exec executable="mysql_upgrade" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="oracle" />
						<then>
							<sql classpath="${app.server.lib.global.dir}/${jdbc.oracle.driver}" driver="oracle.jdbc.OracleDriver" onerror="continue" output="data.pump.log" password="${oracle.admin.password}" print="true" url="${database.oracle.url}" userid="${oracle.admin.user}">
								<![CDATA[
									drop user lportal cascade;
									select directory_name, directory_path from dba_directories where directory_name='DATA_PUMP_DIR';
								]]>
							</sql>

							<loadfile
								property="data.pump.log.content"
								srcFile="data.pump.log"
							/>

							<propertyregex
								input="${data.pump.log.content}"
								override="true"
								property="data.pump.dir"
								regexp="[\s\S]+DATA_PUMP_DIR,(.*)[\s\S]+"
								replace="\1"
							/>

							<move
								file="${liferay.home}/${database.type}.dmp"
								todir="${data.pump.dir}"
							/>

							<chown file="${data.pump.dir}/${database.type}.dmp" owner="oracle" />
							<chgrp file="${data.pump.dir}/${database.type}.dmp" group="oracle" />

							<exec executable="impdp">
								<arg value="${oracle.admin.user}/${oracle.admin.password}" />
								<arg value="dumpfile=${database.type}.dmp" />
								<arg value="table_exists_action=replace" />
							</exec>

							<delete file="${data.pump.dir}/${database.type}.dmp" />
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="postgresql" />
						<then>
							<antcall target="rebuild-database">
								<param name="database.type" value="${database.type}" />
								<param name="sql.dir" value="sql/create-bare/" />
								<param name="sql.file" value="create-bare-${database.type}.sql" />
							</antcall>

							<get-database-property property.name="database.schema" />
							<get-database-property property.name="database.username" />

							<exec executable="${postgresql.executable}" failonerror="true">
								<arg value="--dbname=${database.schema}" />
								<arg value="--file=${liferay.home}/${database.type}.sql" />
								<arg value="--username=${database.username}" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<equals arg1="${database.type}" arg2="sybase" />
						<then>
							<get-database-property property.name="database.host" />
							<get-database-property property.name="database.schema" />
							<get-database-property property.name="database.username" />
							<get-database-property property.name="database.password" />

							<echo file="import-sybase.sql">load database lportal from "${liferay.home}/${database.type}.dmp"
go
online database lportal
go</echo>

							<exec executable="${env.SYBASE}/${env.SYBASE_ASE}/bin/backupserver" spawn="true">
								<arg value="-Slportal_BS" />
							</exec>

							<waitfor maxwait="60" maxwaitunit="second">
								<socket port="5001" server="localhost" />
							</waitfor>

							<print-file file.name="import-sybase.sql" />

							<print-file file.name="lportal__srv.log" />

							<local name="output.content" />

							<exec executable="${sybase.executable}" logError="true" outputproperty="output.content">
								<arg value="-i" />
								<arg value="import-sybase.sql" />
								<arg value="-P" />
								<arg value="${database.password}" />
								<arg value="--retserverror" />
								<arg value="-S" />
								<arg value="${database.schema}" />
								<arg value="-U" />
								<arg value="${database.username}" />
							</exec>

							<echo>${output.content}</echo>

							<delete file="import-sybase.sql" />
							<delete file="lportal__srv.log" />

							<echo file="get-charset.sql">sp_helpsort
go</echo>

							<print-file file.name="get-charset.sql" />

							<exec executable="${sybase.executable}">
								<arg value="-P${database.password}" />
								<arg value="-S${database.schema}" />
								<arg value="-U${database.username}" />
								<arg line="-i get-charset.sql" />
							</exec>

							<delete file="get-charset.sql" />
						</then>
					</elseif>
				</if>
			</else>
		</if>
	</target>

	<target name="record-database-type">
		<echo append="true" file="database-type">${database.type},</echo>
	</target>

	<target name="record-git-commit-bottom-test-jsp">
		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
			<arg line="rev-parse HEAD" />
		</exec>

		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.current.date">
			<arg line="log -1 --pretty=format:%cd HEAD" />
		</exec>

		<loadfile
			property="copyright.content"
			srcFile="${project.dir}/copyright.txt"
		/>

		<if>
			<available file="${project.dir}/git-commit-portal" />
			<then>
				<loadfile
					property="git.commit.portal.base.branch"
					srcFile="${project.dir}/git-commit-portal"
				/>

				<antelope:stringutil property="git.commit.portal.base.branch" string="${git.commit.portal.base.branch}">
					<antelope:trim />
				</antelope:stringutil>

				<property name="git.commit.information" value="Commit: &lt;a href=&quot;https://github.com/liferay/liferay-portal/commit/${git.commit.portal.rev.parse}&quot; target=&quot;_blank&quot;&gt;${git.commit.portal.rev.parse}&lt;/a&gt;&lt;br /&gt;Base Branch Commit: &lt;a href=&quot;https://github.com/liferay/liferay-portal/commit/${git.commit.portal.base.branch}&quot; target=&quot;_blank&quot;&gt;${git.commit.portal.base.branch}&lt;/a&gt;&lt;br /&gt;Updated on: ${git.commit.portal.current.date}" />
			</then>
			<else>
				<property name="git.commit.information" value="Commit: &lt;a href=&quot;https://github.com/liferay/liferay-portal/commit/${git.commit.portal.rev.parse}&quot; target=&quot;_blank&quot;&gt;${git.commit.portal.rev.parse}&lt;/a&gt;&lt;br /&gt;Updated on: ${git.commit.portal.current.date}" />
			</else>
		</if>

		<echo file="${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp"><![CDATA[<%--
${copyright.content}
--%>

<%@ page import="com.liferay.portal.kernel.util.ParamUtil" %>

<%
String ppstate = ParamUtil.getString(request, "p_p_state", "normal");

if (ppstate.equals("normal")) {
%>

	<div class="alert alert-info" id="currentHead" style="margin: 2em">
		${git.commit.information}
	</div>

<%
}
%>]]></echo>

		<echo>Updated ${app.server.dir}/webapps/ROOT/html/common/themes/bottom-test.jsp.</echo>
	</target>

	<target name="record-git-commit-plugins">
		<record-git-commit-plugins />
	</target>

	<target name="record-git-commit-portal">
		<record-git-commit-portal />
	</target>

	<target name="record-test-case-method-names">
		<setup-libs />

		<delete failonerror="false" file="${test.ext.properties.file}" />

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
					<param name="test.batch.run.type" value="${test.batch.run.type}" />
					<param name="test.portal.instance" value="${test.portal.instance}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.batch.run.type" value="${test.batch.run.type}" />
					<param name="test.portal.instance" value="${test.portal.instance}" />
				</antcall>
			</else>
		</if>

		<poshi-execute task="writePoshiProperties" />

		<move
			file="portal-web/test.case.method.names.properties"
			tofile="test.case.method.names.properties"
		/>

		<echo></echo>
		<echo>##</echo>
		<echo>## test.case.method.names.properties</echo>
		<echo>##</echo>
		<echo></echo>

		<var name="file.content" unset="true" />

		<loadfile
			property="file.content"
			srcFile="test.case.method.names.properties"
		/>

		<if>
			<contains string="${file.content}" substring="RUN_TEST_CASE_METHOD_GROUP" />
			<then>
				<beanshell>
					<![CDATA[
						import java.util.regex.Matcher;
						import java.util.regex.Pattern;

						Pattern pattern = Pattern.compile("RUN_TEST_CASE_METHOD_GROUP.*");

						Matcher matcher = pattern.matcher(project.getProperty("file.content"));

						sb = new StringBuilder();

						while (matcher.find()) {
							sb.append(matcher.group());
							sb.append("\n");
						}

						project.setProperty("file.content", sb.toString());
					]]>
				</beanshell>

				<echo></echo>
				<echo>${file.content}</echo>
				<echo></echo>
			</then>
			<else>
				<echo></echo>
				<echo>${file.content}</echo>
				<echo></echo>
			</else>
		</if>

		<var name="file.content" unset="true" />
	</target>

	<target name="record-test-class-file-names">
		<record-test-class-file-names />
	</target>

	<target name="record-test-generated-properties">
		<setup-libs />

		<delete failonerror="false" file="${test.ext.properties.file}" />

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
					<param name="test.class" value="${test.class}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties" />
			</else>
		</if>

		<poshi-execute task="writePoshiProperties" />

		<move
			file="portal-web/test.generated.properties"
			tofile="test.generated.properties"
		/>

		<if>
			<isset property="test.class" />
			<then>
				<loadfile
					failonerror="false"
					property="test.generated.properties.content"
					srcfile="test.generated.properties"
				/>

				<get-poshi-class-name />

				<if>
					<contains string="${test.class}" substring="#" />
					<then>
						<get-poshi-method-name />
					</then>
				</if>

				<beanshell>
					<![CDATA[
						import java.util.regex.Matcher;
						import java.util.regex.Pattern;

						StringBuilder sb = new StringBuilder();

						sb.append("(");
						sb.append(project.getProperty("poshi.class.name"));
						sb.append("TestCase\\.(test");

						String poshiMethodName = project.getProperty("poshi.method.name");

						if (poshiMethodName != null) {
							sb.append(poshiMethodName);
							sb.append("\\.|");
						}
						else {
							sb.append("[^\\.]*\\.|");
						}

						sb.append("all\\.).*)\\\n");

						Pattern pattern = Pattern.compile(sb.toString());

						Matcher matcher = pattern.matcher(project.getProperty("test.generated.properties.content"));

						sb = new StringBuilder();

						while (matcher.find()) {
							sb.append(matcher.group());
						}

						project.setProperty("test.generated.properties.content", sb.toString());
					]]>
				</beanshell>

				<echo>##</echo>
				<echo>## test.generated.properties</echo>
				<echo>##</echo>
				<echo></echo>
				<echo>${test.generated.properties.content}</echo>
				<echo></echo>
			</then>
		</if>
	</target>

	<target name="record-test-js-csv-report">
		<record-test-csv-report test.type="js" />
	</target>

	<target name="record-test-junit-csv-report">
		<record-test-csv-report test.type="junit" />
	</target>

	<target name="record-test-plugin-names">
		<condition else="plugins-compile-jdk8" property="test.batch.name" value="${test.batch.name}">
			<isset property="test.batch.name" />
		</condition>

		<local name="portal.branch.name" />

		<condition else="${git.working.branch.name}" property="portal.branch.name" value="${env.TEST_PORTAL_BRANCH_NAME}">
			<isset property="env.TEST_PORTAL_BRANCH_NAME" />
		</condition>

		<local name="top.level.job.name" />

		<condition else="default" property="top.level.job.name" value="${env.TOP_LEVEL_JOB_NAME}">
			<isset property="env.TOP_LEVEL_JOB_NAME" />
		</condition>

		<beanshell>
			<![CDATA[
				import com.liferay.jenkins.results.parser.Job;
				import com.liferay.jenkins.results.parser.JobFactory;
				import com.liferay.jenkins.results.parser.test.clazz.group.AxisTestClassGroup;
				import com.liferay.jenkins.results.parser.test.clazz.group.BatchTestClassGroup;
				import com.liferay.jenkins.results.parser.test.clazz.group.TestClassGroupFactory;

				Job job = JobFactory.newJob(project.getProperty("top.level.job.name"), project.getProperty("env.CI_TEST_SUITE"), project.getProperty("portal.branch.name"));

				BatchTestClassGroup.BuildProfile buildProfile = BatchTestClassGroup.BuildProfile.PORTAL;

				String testPortalBuildProfile = project.getProperty("build.profile");

				if ((testPortalBuildProfile != null) && testPortalBuildProfile.equals("dxp")) {
					buildProfile = BatchTestClassGroup.BuildProfile.DXP;
				}

				BatchTestClassGroup batchTestClassGroup = TestClassGroupFactory.newBatchTestClassGroup(project.getProperty("test.batch.name"), buildProfile, job);

				int axisCount = batchTestClassGroup.getAxisCount();

				StringBuilder sb = new StringBuilder();

				for (i = 0; i < axisCount; i++) {
					AxisTestClassGroup axisTestClassGroup = batchTestClassGroup.getAxisTestClassGroup(i);

					List testClassGroup = axisTestClassGroup.getTestClassFiles();

					sb.append("TEST_PLUGIN_GROUP_");
					sb.append(i);
					sb.append("=");

					for (File testClass : testClassGroup) {
						sb.append(testClass.getName());
						sb.append(",");
					}

					if (!testClassGroup.isEmpty()) {
						sb.setLength(sb.length() - 1);
					}

					sb.append("\n\n");
				}

				sb.append("TEST_PLUGIN_GROUPS=");

				for (int i = 0; i < axisCount; i++) {
					sb.append(i);
					sb.append(" ");
				}

				if (axisCount > 0) {
					sb.setLength(sb.length() - 1);
				}

				project.setProperty("test.plugin.names.properties.content", sb.toString());
			]]>
		</beanshell>

		<echo file="test.plugin.names.properties">${test.plugin.names.properties.content}</echo>

		<print-file file.name="test.plugin.names.properties" />
	</target>

	<target name="record-test-poshi-csv-report">
		<delete failonerror="false" file="${test.ext.properties.file}" />

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties" />
			</else>
		</if>

		<poshi-execute task="validatePoshi" />

		<setup-libs />

		<delete failonerror="false" file="${test.ext.properties.file}" />

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
					<param name="test.batch.run.type" value="${test.batch.run.type}" />
					<param name="test.portal.instance" value="${test.portal.instance}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.batch.run.type" value="${test.batch.run.type}" />
					<param name="test.portal.instance" value="${test.portal.instance}" />
				</antcall>
			</else>
		</if>

		<poshi-execute task="writePoshiProperties" />

		<local name="report.csv.file" />
		<local name="report.csv.file.name" />

		<first id="report.csv.file">
			<fileset
				dir="portal-web/"
				includes="Report*.csv"
			/>
		</first>

		<propertyregex
			input="${toString:report.csv.file}"
			override="true"
			property="report.csv.file.name"
			regexp=".*/([^/]+.csv)"
			replace="\1"
		/>

		<move
			file="portal-web/${report.csv.file.name}"
			tofile="${report.csv.file.name}"
		/>

		<echo>Writing ${project.dir}/${report.csv.file.name}</echo>
	</target>

	<target name="redeploy-osgi-modules">
		<get-testcase-property property.name="osgi.modules.includes" />

		<if>
			<isset property="update.properties" />
			<then>
				<replace
					file="${project.dir}/${module.base.dir}/${osgi.modules.includes}/bnd.bnd"
					token="${update.properties.original}"
					value="${update.properties}"
				/>
			</then>
		</if>

		<echo file="tools/sdk/build.${user.name}.properties">auto.deploy.dir=${liferay.home}/deploy</echo>

		<local name="osgi.module.pattern" />

		<if>
			<equals arg1="${osgi.modules.includes}" arg2="revert-schema-version" />
			<then>
				<property name="osgi.module.pattern" value="**/test/**" />
			</then>
			<else>
				<property name="osgi.module.pattern" value="**/apps/**" />
			</else>
		</if>

		<antelope:stringutil property="osgi.modules.includes.pattern" string="${osgi.module.pattern}/${osgi.modules.includes}">
			<antelope:replace regex="," replacement=",${osgi.module.pattern}/" />
		</antelope:stringutil>

		<pathconvert pathsep="," property="osgi.modules.paths">
			<dirset
				dir="modules"
				includes="${osgi.modules.includes.pattern}"
			>
				<or>
					<present targetdir="modules">
						<mapper
							from="*"
							to="*/build.gradle"
							type="glob"
						/>
					</present>
					<present targetdir="modules">
						<mapper
							from="*"
							to="*/build.xml"
							type="glob"
						/>
					</present>
				</or>
			</dirset>
		</pathconvert>

		<for list="${osgi.modules.paths}" parallel="true" param="osgi.module.path">
			<sequential>
				<local name="module.base.dir" />
				<local name="osgi.module.command.prefix" />

				<dirname file="@{osgi.module.path}" property="module.base.dir" />

				<gradle-execute dir="@{osgi.module.path}" forcedcacheenabled="false" task="deploy">
					<arg value="clean" />
				</gradle-execute>
			</sequential>
		</for>
	</target>

	<target name="remove-plugin">
		<get-auto-deploy-dir />

		<delete>
			<fileset
				dir="${auto.deploy.dir}"
				includes="${plugin.name}-*.war"
			/>
		</delete>
	</target>

	<target name="replace-file">
		<fail message="Please set the property ${file}." unless="file" />
		<fail message="Please set the property ${token}." unless="token" />
		<fail message="Please set the property ${value}." unless="value" />

		<fail message="${token} not found in ${file}.">
			<condition>
				<not>
					<resourcecontains
						resource="${file}"
						substring="${token}"
					/>
				</not>
			</condition>
		</fail>

		<echo>Replacing ${token} with ${value} in ${file}.</echo>

		<replace
			file="${file}"
		>
			<replacefilter
				token="${token}"
				value="${value}"
			/>
		</replace>
	</target>

	<target name="run-poshi-evaluate-console">
		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties" />
			</else>
		</if>

		<poshi-execute task="evaluatePoshiConsole" />
	</target>

	<target name="run-poshi-runner">
		<if>
			<equals arg1="${failonerror}" arg2="true" />
			<then>
				<poshi-execute failonerror="true" task="runPoshi" />
			</then>
			<else>
				<poshi-execute task="runPoshi" />
			</else>
		</if>
	</target>

	<target name="run-poshi-validation">
		<delete failonerror="false" file="${test.ext.properties.file}" />

		<if>
			<isset property="test.base.dir.name" />
			<then>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties">
					<param name="test.base.dir.name" value="${test.base.dir.name}" />
				</antcall>
			</then>
			<else>
				<antcall inheritAll="false" target="prepare-poshi-runner-properties" />
			</else>
		</if>

		<poshi-execute failonerror="true" task="validatePoshi" />
	</target>

	<target name="run-selenium-smoke-test">
		<antcall target="compile" />

		<ant dir="portal-impl" inheritAll="false" target="compile-test" />

		<ant dir="portal-web" inheritAll="false" target="test-class">
			<property name="test.class" value="SeleniumSmokeTestSuite" />
		</ant>
	</target>

	<target depends="prepare-selenium" name="run-selenium-test">
		<if>
			<and>
				<equals arg1="${test.class}" arg2="PortalWebTestSuite" />
				<not>
					<equals arg1="${database.type}" arg2="hypersonic" />
				</not>
			</and>
			<then>
				<ant dir="portal-impl" inheritAll="false" target="test-class">
					<property name="test.class" value="ServiceHttpTestSuite" />
				</ant>

				<ant dir="portal-impl" inheritAll="false" target="test-class">
					<property name="test.class" value="ServiceSoapTestSuite" />
				</ant>
			</then>
		</if>

		<if>
			<equals arg1="${database.type}" arg2="hypersonic" />
			<then>
				<echo file="portal-impl/classes/portal-ext.properties">liferay.home=${liferay.home}

jdbc.default.jndi.name=

jdbc.default.driverClassName=${database.mysql.driver}
jdbc.default.url=${database.mysql.url}
jdbc.default.username=${database.mysql.username}
jdbc.default.password=${database.mysql.password}</echo>
			</then>
		</if>

		<antcall target="run-poshi-runner" />

		<property name="test.class" value="${test.simple.class.name}#${test.method.name}" />

		<if>
			<isset property="jenkins.shared.user.content.dir" />
			<then>
				<var name="jenkins.shared.results.dir" value="${jenkins.shared.user.content.dir}/jobs" />
			</then>
			<else>
				<var name="jenkins.shared.results.dir" value="." />
			</else>
		</if>

		<if>
			<isset property="env.JENKINS_HOME" />
			<then>
				<antelope:stringutil property="job.name" string="${env.JOB_NAME}">
					<antelope:replace regex="," replacement="_" />
				</antelope:stringutil>

				<get-poshi-class-name />
				<get-poshi-method-name />

				<property name="poshi.runner.results.dir" value="${poshi.class.name}_${poshi.method.name}" />

				<if>
					<available file="portal-web/test-results/${poshi.runner.results.dir}/index.html" />
					<then>
						<copy
							file="portal-web/test-results/${poshi.runner.results.dir}/index.html"
							tofile="${jenkins.shared.results.dir}/${job.name}/builds/${env.BUILD_NUMBER}/report.html"
						/>

						<copy
							todir="${jenkins.shared.results.dir}/${job.name}/builds/${env.BUILD_NUMBER}/screenshots"
						>
							<fileset
								dir="portal-web/test-results/${poshi.runner.results.dir}/screenshots"
								erroronmissingdir="false"
							/>
						</copy>
					</then>
				</if>
			</then>
		</if>

		<antcall target="clean-up-mobile-device" />

		<antcall target="clean-up-selenium-driver" />
	</target>

	<target name="run-simple-server">
		<if>
			<not>
				<available file="tools/sdk" />
			</not>
			<then>
				<antcall inheritAll="false" target="setup-sdk" />

				<antcall inheritAll="false" target="setup-yarn" />
			</then>
		</if>

		<if>
			<matches pattern="[0-9]+_[0-9]+" string="${test.class}" />
			<then>
				<get-test-class />
			</then>
		</if>

		<get-testcase-property property.name="test.prepare.bundle.properties" />

		<if>
			<equals arg1="${test.prepare.bundle.properties}" arg2="false" />
			<then>
				<delete failonerror="false" file="${app.server.classes.portal.dir}/portal-ext.properties" />

				<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties">

module.framework.properties.blacklist.portal.profile.names=${blacklist.portal.profile.names}</echo>

				<delete failonerror="false" file="${app.server.classes.portal.dir}/system-ext.properties" />
			</then>
			<else>
				<antcall target="prepare-osgi-module-configurations" />

				<antcall target="prepare-portal-properties" />

				<antcall target="prepare-portal-ext-properties" />

				<antcall target="prepare-portlet-ext-properties" />

				<antcall target="prepare-system-ext-properties" />
			</else>
		</if>

		<antcall target="prepare-ip-address-update" />

		<antcall target="check-inet-address" />

		<get-testcase-property property.name="database.jndi.enabled" />

		<if>
			<equals arg1="${database.jndi.enabled}" arg2="true" />
			<then>
				<prepare-database-jndi />
			</then>
		</if>

		<get-testcase-property property.name="portal.context" />

		<if>
			<isset property="portal.context" />
			<then>
				<if>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<then>
						<move
							todir="${app.server.dir}/webapps/${portal.context}"
						>
							<fileset
								dir="${app.server.dir}/webapps/ROOT"
							/>
						</move>
						<move
							file="${app.server.dir}/conf/Catalina/localhost/ROOT.xml"
							tofile="${app.server.dir}/conf/Catalina/localhost/${portal.context}.xml"
						/>
						<replace
							file="${app.server.dir}/conf/Catalina/localhost/${portal.context}.xml"
							token="path=&quot;&quot;"
							value="path=&quot;/${portal.context}&quot;"
						/>
					</then>
					<else>
						<fail message="Changing the portal context for ${app.server.type} is not supported." />
					</else>
				</if>
			</then>
		</if>

		<get-testcase-property property.name="portal.ssl.enabled" />

		<if>
			<equals arg1="${portal.ssl.enabled}" arg2="true" />
			<then>
				<antcall target="prepare-portal-ssl" />
			</then>
		</if>

		<get-testcase-property property.name="dummy.socket.proxy.disabled" />

		<if>
			<and>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<equals arg1="${dummy.socket.proxy.disabled}" arg2="true" />
			</and>
			<then>
				<if>
					<and>
						<not>
							<equals arg1="${dummy.socket.proxy}" arg2="" />
						</not>
						<resourcecontains
							resource="${app.server.tomcat.dir}/bin/setenv${file.suffix.bat}"
							substring="${dummy.socket.proxy}"
						/>
					</and>
					<then>
						<replace
							file="${app.server.tomcat.dir}/bin/setenv${file.suffix.bat}"
							token="${dummy.socket.proxy}"
							value=""
						/>
					</then>
				</if>

				<get-database-socks-non-proxy-hosts />

				<if>
					<and>
						<not>
							<equals arg1="${database.socks.non.proxy.hosts}" arg2="" />
						</not>
						<resourcecontains
							resource="${app.server.tomcat.dir}/bin/setenv${file.suffix.bat}"
							substring="${database.socks.non.proxy.hosts}"
						/>
					</and>
					<then>
						<replace
							file="${app.server.tomcat.dir}/bin/setenv${file.suffix.bat}"
							token="${database.socks.non.proxy.hosts}"
							value=""
						/>
					</then>
				</if>
			</then>
		</if>

		<get-testcase-property property.name="web.xml.timeout" />

		<if>
			<isset property="web.xml.timeout" />
			<then>
				<if>
					<equals arg1="${app.server.type}" arg2="tomcat" />
					<then>
						<replace
							file="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml"
							token="&lt;session-timeout&gt;15&lt;/session-timeout&gt;"
							value="&lt;session-timeout&gt;${web.xml.timeout}&lt;/session-timeout&gt;"
						/>
					</then>
					<else>
						<fail message="Changing the session timeout for ${app.server.type} is not supported." />
					</else>
				</if>
			</then>
		</if>

		<if>
			<not>
				<equals arg1="${os.name}" arg2="SunOS" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-java-processes" />
			</then>
		</if>

		<antcall inheritAll="false" target="copy-optional-jars">
			<param name="todir" value="${app.server.lib.global.dir}" />
		</antcall>

		<get-testcase-property property.name="index.search.spell.checker.enabled" />

		<if>
			<and>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<equals arg1="${index.search.spell.checker.enabled}" arg2="true" />
			</and>
			<then>
				<local name="spell.checker.dir" />

				<property name="spell.checker.dir" value="${app.server.dir}/webapps/ROOT/WEB-INF/classes/spellchecker" />

				<mkdir dir="${spell.checker.dir}" />

				<echo>Copying ${project.dir}/portal-web/test/functional/com/liferay/portalweb/dependencies/dictionary_de_DE.txt to ${spell.checker.dir}</echo>

				<copy
					file="${project.dir}/portal-web/test/functional/com/liferay/portalweb/dependencies/dictionary_de_DE.txt"
					todir="${spell.checker.dir}"
				/>
			</then>
		</if>

		<get-testcase-property property.name="portal.version" />
		<get-testcase-property property.name="skip.upgrade-legacy-database" />

		<if>
			<isset property="portal.version" />
			<then>
				<antcall target="rebuild-legacy-database" />

				<if>
					<not>
						<equals arg1="${skip.upgrade-legacy-database}" arg2="true" />
					</not>
					<then>
						<antcall target="upgrade-legacy-database" />
					</then>
				</if>
			</then>
			<else>
				<antcall inheritAll="false" target="rebuild-database" />
			</else>
		</if>

		<get-testcase-property property.name="skip.clean-app-server-deploy-dir" />

		<if>
			<not>
				<equals arg1="${skip.clean-app-server-deploy-dir}" arg2="true" />
			</not>
			<then>
				<antcall target="clean-app-server-deploy-dir" />
			</then>
		</if>

		<get-testcase-property property.name="apacheds.blank.user.password.enabled" />
		<get-testcase-property property.name="apacheds.enabled" />

		<if>
			<or>
				<equals arg1="${apacheds.blank.user.password.enabled}" arg2="true" />
				<equals arg1="${apacheds.enabled}" arg2="true" />
			</or>
			<then>
				<ant antfile="build-test-apacheds.xml" target="start-apacheds" />
			</then>
		</if>

		<!--
		Deploy project samples to the deploy directory.
		-->

		<get-testcase-property property.name="project.templates" />

		<if>
			<isset property="project.templates" />
			<then>
				<antcall target="deploy-project-templates" />
			</then>
		</if>

		<get-testcase-property property.name="cas.enabled" />

		<if>
			<equals arg1="${cas.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-authentication.xml" target="setup-cas" />
			</then>
		</if>

		<get-testcase-property property.name="openam.enabled" />

		<if>
			<equals arg1="${openam.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-authentication.xml" target="delete-openam-config" />

				<ant antfile="build-test-authentication.xml" target="setup-openam" />
			</then>
		</if>

		<get-testcase-property property.name="portal.suite.search.engine" />
		<get-testcase-property property.name="remote.elasticsearch.enabled" />

		<if>
			<equals arg1="${remote.elasticsearch.enabled}" arg2="true" />
			<then>
				<if>
					<contains string="${env.CI_TEST_SUITE}" substring="search" />
					<then>
						<propertycopy from="search.engine[${env.CI_TEST_SUITE}]" name="suite.search.engine" silent="true" />

						<if>
							<equals arg1="${suite.search.engine}" arg2="elasticsearch7" />
							<then>
								<ant antfile="build-test-elasticsearch7.xml" target="start-elasticsearch" />
							</then>
							<else>
								<ant antfile="build-test-elasticsearch6.xml" target="start-elasticsearch" />
							</else>
						</if>
					</then>
					<else>
						<if>
							<or>
								<contains string="${portal.suite.search.engine}" substring="elasticsearch6" />
								<not>
									<isset property="portal.suite.search.engine" />
								</not>
							</or>
							<then>
								<ant antfile="build-test-elasticsearch6.xml" target="start-elasticsearch" />
							</then>
							<else>
								<ant antfile="build-test-elasticsearch7.xml" target="start-elasticsearch" />
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>

		<get-testcase-property property.name="socks.proxy.enabled" />

		<if>
			<equals arg1="${socks.proxy.enabled}" arg2="true" />
			<then>
				<echo file="tools/sdk/build.${user.name}.properties">auto.deploy.dir=${liferay.home}/deploy</echo>

				<gradle-execute dir="${project.dir}/modules/test/simple-socks-proxy" task="deploy">
					<arg value="clean" />
				</gradle-execute>

				<echo file="${liferay.home}/osgi/modules/com.liferay.simple.socks.proxy.SocksProxyConfiguration.cfg">allowedHostnames=${env.HOSTNAME}</echo>

				<get-testcase-property property.name="socks.proxy.hosts" />

				<if>
					<isset property="socks.proxy.hosts" />
					<then>
						<echo append="true" file="${liferay.home}/osgi/modules/com.liferay.simple.socks.proxy.SocksProxyConfiguration.cfg">,${socks.proxy.hosts}</echo>
					</then>
				</if>

				<print-file file.name="${liferay.home}/osgi/modules/com.liferay.simple.socks.proxy.SocksProxyConfiguration.cfg" />
			</then>
		</if>

		<get-testcase-property property.name="solr.enabled" />

		<if>
			<equals arg1="${solr.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-solr.xml" target="start-solr" />
			</then>
			<elseif>
				<isset property="env.CI_TEST_SUITE" />
				<then>
					<propertycopy from="search.engine[${env.CI_TEST_SUITE}]" name="suite.search.engine" silent="true" />

					<if>
						<equals arg1="${suite.search.engine}" arg2="solr" />
						<then>
							<ant antfile="build-test-solr.xml" target="start-solr" />
						</then>
					</if>
				</then>
			</elseif>
		</if>

		<get-testcase-property property.name="test.smtp.server.enabled" />

		<if>
			<equals arg1="${test.smtp.server.enabled}" arg2="true" />
			<then>
				<start-test-smtp-server />
			</then>
		</if>

		<if>
			<equals arg1="${test.latest.marketplace.apps}" arg2="true" />
			<then>
				<antcall target="deploy-latest-marketplace-apps" />
			</then>
		</if>

		<get-testcase-property property.name="cmis.repository.type" />

		<if>
			<or>
				<equals arg1="${cmis.repository.type}" arg2="documentum6" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2010" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2013" />
			</or>
			<then>
				<request-cmis-repository-vm
					cmis.repository.type="${cmis.repository.type}"
				/>

				<get-testcase-property property.name="socks.proxy.enabled" />

				<if>
					<equals arg1="${socks.proxy.enabled}" arg2="true" />
					<then>
						<echo append="true" file="${liferay.home}/osgi/modules/com.liferay.simple.socks.proxy.SocksProxyConfiguration.cfg">,${cmis.repository.vm.host.name}</echo>

						<print-file file.name="${liferay.home}/osgi/modules/com.liferay.simple.socks.proxy.SocksProxyConfiguration.cfg" />
					</then>
				</if>
			</then>
		</if>

		<antcall target="deploy-osgi-apps" />

		<antcall target="hot-deploy-osgi-apps" />

		<antcall target="deploy-osgi-modules" />

		<antcall target="deploy-specified-plugins">
			<param name="test.class" value="${test.class}" />
		</antcall>

		<antcall target="deploy-dependency-jars" />

		<antcall target="deploy-extra-apps" />

		<get-testcase-property property.name="osgi.module.configuration.file.names" />
		<get-testcase-property property.name="osgi.module.configurations" />

		<if>
			<and>
				<isset property="osgi.module.configuration.file.names" />
				<isset property="osgi.module.configurations" />
			</and>
			<then>
				<antcall target="deploy-osgi-module-configurations" />
			</then>
		</if>

		<get-testcase-property property.name="app.server.bundles.size" />

		<if>
			<isset property="app.server.bundles.size" />
			<then>
				<prepare-additional-bundles />
			</then>
		</if>

		<get-testcase-property property.name="cluster.enabled" />

		<if>
			<equals arg1="${cluster.enabled}" arg2="true" />
			<then>
				<prepare-test-cluster-properties />
			</then>
		</if>

		<get-testcase-property property.name="blacklist.saml.algorithms" />

		<if>
			<equals arg1="${blacklist.saml.algorithms}" arg2="true" />
			<then>
				<prepare-saml-algorithm-blacklists />
			</then>
		</if>

		<get-testcase-property property.name="elastic.xpack.enabled" />
		<get-testcase-property property.name="remote.elasticsearch.enabled" />

		<if>
			<and>
				<equals arg1="${elastic.xpack.enabled}" arg2="true" />
				<equals arg1="${remote.elasticsearch.enabled}" arg2="true" />
			</and>
			<then>
				<prepare-elasticsearch-connection-config />
			</then>
		</if>

		<get-testcase-property property.name="hook.plugins.includes" />

		<if>
			<and>
				<contains string="${hook.plugins.includes}" substring="so-hook" />
				<or>
					<equals arg1="${app.server.type}" arg2="jboss" />
					<equals arg1="${app.server.type}" arg2="wildfly" />
				</or>
			</and>
			<then>
				<start-app-server />

				<stop-app-server />
			</then>
		</if>

		<remake-dir dir="${selenium.output.dir.name}" />

		<get-testcase-property property.name="deploy.lcs.token.file" />

		<if>
			<equals arg1="${deploy.lcs.token.file}" arg2="true" />
			<then>
				<antcall target="deploy-lcs-environment-token" />
			</then>
		</if>

		<get-testcase-property property.name="skip.start-app-server" />

		<if>
			<not>
				<equals arg1="${skip.start-app-server}" arg2="true" />
			</not>
			<then>
				<get-testcase-property property.name="theme.file.name" />

				<if>
					<isset property="theme.file.name" />
					<then>
						<mkdir dir="${liferay.home}/tmp" />

						<move
							todir="${liferay.home}/tmp"
						>
							<fileset
								dir="${liferay.home}/deploy"
								includes="${theme.file.name}"
							/>
						</move>

						<move
							todir="${liferay.home}/tmp"
						>
							<fileset
								dir="${liferay.home}/osgi/marketplace"
								includes="*Theme*.lpkg"
							/>
						</move>
					</then>
				</if>

				<antcall inheritAll="false" target="prepare-log4j-ext-xml">
					<param name="database.type" value="@{database.type}" />
				</antcall>

				<antcall target="start-app-server-preserve-liferay-home" />

				<get-testcase-property property.name="app.server.bundles.size" />

				<if>
					<isset property="app.server.bundles.size" />
					<then>
						<var name="app.server.bundle.index" value="1" />

						<antelope:repeat count="${app.server.bundles.size}">
							<start-app-server
								app.server.bundle.index="${app.server.bundle.index}"
							/>

							<math
								datatype="int"
								operand1="${app.server.bundle.index}"
								operand2="1"
								operation="+"
								result="app.server.bundle.index"
							/>
						</antelope:repeat>

						<var name="app.server.bundle.index" unset="true" />
					</then>
				</if>

				<waitfor maxwait="150" maxwaitunit="second">
					<available file="${liferay.home}/logs" type="dir" />
				</waitfor>

				<antcall target="wait-for-plugins-deployment" />

				<if>
					<available file="${liferay.home}/tmp/${theme.file.name}" />
					<then>
						<move
							todir="${liferay.home}/deploy"
						>
							<fileset
								dir="${liferay.home}/tmp"
								includes="${theme.file.name}"
							/>
						</move>

						<delete dir="${liferay.home}/tmp" failonerror="false" />

						<waitfor checkevery="5" maxwait="300" maxwaitunit="second" timeoutproperty="theme.not.deployed">
							<available file="${liferay.home}/osgi/war/${theme.file.name}" />
						</waitfor>

						<fail if="theme.not.deployed" message="${theme.file.name} has failed to deploy." />
					</then>
					<elseif>
						<available file="${liferay.home}/tmp" type="dir" />
						<then>
							<move
								todir="${liferay.home}/osgi/marketplace"
							>
								<fileset
									dir="${liferay.home}/tmp"
									includes="*Theme*.lpkg"
								/>
							</move>

							<delete dir="${liferay.home}/tmp" failonerror="false" />
						</then>
					</elseif>
				</if>
			</then>
		</if>

		<if>
			<equals arg1="${functional.test.type}" arg2="analytics-cloud" />
			<then>
				<trycatch property="analytics.cloud.error">
					<try>
						<ant antfile="build-test-analytics-cloud.xml" target="start-analytics-cloud" />

						<property location="${analytics.cloud.faro.dir}/osb-faro-functional-test/test_analytics_cloud.sh" name="analytics.cloud.test.sh" />

						<property location="${basedir.unix}/portal-web/${selenium.executable.dir.name}" name="selenium.executable.dir.path" />

						<propertycopy from="browser.chrome.bin.file[${browser.chrome.version}]" name="browser.chrome.bin.file" override="true" />

						<get-ip-address />

						<echo file="${analytics.cloud.faro.dir}/osb-faro-functional-test/src/testIntegration/resources/ngrok.properties">
ip=${ip.address}
url=${env.HOSTNAME}:8080</echo>

						<prepare-chrome-driver />

						<echo file="${analytics.cloud.test.sh}">
							#!/bin/bash

							../gradlew \
								-Danalytics.cloud.url=${analytics.cloud.faro.frontend.url} \
								-Dbrowser.chrome.bin.args=${browser.chrome.bin.args} \
								-Dbrowser.chrome.bin.file=${browser.chrome.bin.file} \
								-Dbrowser.type=chrome \
								-Dchrome.driver.version=${selenium.chrome.driver.version} \
								-Dcucumber.options='${analytics.cloud.cucumber.options}' \
								-Dliferay.ci=true \
								-Dportal.url=http://${env.HOSTNAME}:8080 \
								-Dselenium.chrome.driver.executable=${selenium.chrome.driver.executable} \
								-Dselenium.executable.dir.name=${selenium.executable.dir.path}/ \
								-Dwebdriver.chrome.driver=${selenium.executable.dir.path}/${selenium.chrome.driver.executable} \
								\
								testIntegration
						</echo>

						<exec dir="${analytics.cloud.faro.dir}/osb-faro-functional-test" executable="/bin/bash" failonerror="true">
							<arg value="${analytics.cloud.test.sh}" />
						</exec>

						<delete file="${analytics.cloud.test.sh}" />
					</try>
					<catch>
						<fail message="${analytics.cloud.error}" />
					</catch>
					<finally>
						<ant antfile="build-test-analytics-cloud.xml" target="stop-analytics-cloud" />

						<stop-chrome-driver />
					</finally>
				</trycatch>
			</then>
			<else>
				<antcall target="run-selenium-test" />
			</else>
		</if>

		<get-testcase-property property.name="cmis.repository.type" />

		<if>
			<or>
				<equals arg1="${cmis.repository.type}" arg2="documentum6" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2010" />
				<equals arg1="${cmis.repository.type}" arg2="sharepoint2013" />
			</or>
			<then>
				<property file="${project.dir}/${test.ext.properties.file}" />

				<if>
					<contains string="${cmis.repository.type}" substring="documentum" />
					<then>
						<ssh-execute ssh.host="${cmis.repository.vm.host.name}">perl C:/Windows/resetdocumentum.pl</ssh-execute>
					</then>
					<elseif>
						<contains string="${cmis.repository.type}" substring="sharepoint" />
						<then>
							<ssh-execute ssh.host="${cmis.repository.vm.host.name}">perl C:/Windows/resetsharepointrepo.pl</ssh-execute>
						</then>
					</elseif>
				</if>

				<if>
					<os family="unix" />
					<then>
						<exec executable="/bin/bash" os="${os.unix}">
							<arg value="-c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/release?hostname=${cmis.repository.vm.host.name}&amp;resourceType=qa%2E${cmis.repository.type}&quot;" />
						</exec>
					</then>
					<else>
						<exec executable="cmd">
							<arg value="/c" />
							<arg value="curl &quot;http://it.liferay.com/osb-ici-controller-web/vm/allocation/release?hostname=${cmis.repository.vm.host.name}&amp;resourceType=qa%2E${cmis.repository.type}&quot;" />
						</exec>
					</else>
				</if>
			</then>
		</if>

		<trycatch property="shutdown.error">
			<try>
				<get-testcase-property property.name="solr.enabled" />

				<if>
					<not>
						<equals arg1="${solr.enabled}" arg2="true" />
					</not>
					<then>
						<get-testcase-property property.name="test.name.skip.portal.instance" />

						<if>
							<and>
								<not>
									<isset property="test.name.skip.portal.instance" />
								</not>
								<equals arg1="test.portal.instance" arg2="true" />
							</and>
							<then>
								<var name="portalInstanceName" value="${env.HOSTNAME}" />
							</then>
							<else>
								<var name="portalInstanceName" value="localhost" />
							</else>
						</if>

						<exec executable="curl" outputproperty="companyId">
							<arg value="http://localhost:8080/api/jsonws/company/get-company-by-virtual-host/virtual-host/${portalInstanceName}" />
							<arg value="-u" />
							<arg value="test@liferay.com:test" />
						</exec>

						<propertyregex
							input="${companyId}"
							override="true"
							property="companyId"
							regexp="(?&lt;=companyId&quot;:&quot;)(.*)(?=&quot;,&quot;home)"
							select="\1"
						/>

						<get-testcase-property property.name="portal.suite.search.engine" />
						<get-testcase-property property.name="remote.elasticsearch.enabled" />

						<if>
							<contains string="${env.CI_TEST_SUITE}" substring="search" />
							<then>
								<propertycopy from="search.engine[${env.CI_TEST_SUITE}]" name="suite.search.engine" silent="true" />

								<if>
									<and>
										<not>
											<isset property="remote.elasticsearch.enabled" />
										</not>
										<equals arg1="${suite.search.engine}" arg2="elasticsearch7" />
									</and>
									<then>
										<ant antfile="build-test-elasticsearch7.xml" target="print-elasticsearch-indices" />
									</then>
									<elseif>
										<not>
											<equals arg1="${suite.search.engine}" arg2="solr" />
										</not>
										<then>
											<ant antfile="build-test-elasticsearch6.xml" target="print-elasticsearch-indices" />
										</then>
									</elseif>
								</if>
							</then>
							<else>
								<if>
									<and>
										<not>
											<isset property="remote.elasticsearch.enabled" />
										</not>
										<equals arg1="${portal.suite.search.engine}" arg2="elasticsearch7" />
									</and>
									<then>
										<ant antfile="build-test-elasticsearch7.xml" target="print-elasticsearch-indices" />
									</then>
									<else>
										<ant antfile="build-test-elasticsearch6.xml" target="print-elasticsearch-indices" />
									</else>
								</if>
							</else>
						</if>
					</then>
				</if>

				<get-testcase-property property.name="solr.enabled" />

				<if>
					<equals arg1="${solr.enabled}" arg2="true" />
					<then>
						<ant antfile="build-test-solr.xml" target="print-solr-indices" />
					</then>
					<elseif>
						<isset property="env.CI_TEST_SUITE" />
						<then>
							<propertycopy from="search.engine[${env.CI_TEST_SUITE}]" name="suite.search.engine" silent="true" />

							<if>
								<equals arg1="${suite.search.engine}" arg2="solr" />
								<then>
									<ant antfile="build-test-solr.xml" target="print-solr-indices" />
								</then>
							</if>
						</then>
					</elseif>
				</if>

				<antcall target="clean-up-logs" />

				<record action="start" name="${project.dir}/console-shut-down" />

				<stop-app-server />

				<get-testcase-property property.name="app.server.bundles.size" />

				<if>
					<isset property="app.server.bundles.size" />
					<then>
						<var name="app.server.bundle.index" value="1" />

						<antelope:repeat count="${app.server.bundles.size}">
							<stop-app-server
								app.server.bundle.index="${app.server.bundle.index}"
							/>

							<math
								datatype="int"
								operand1="${app.server.bundle.index}"
								operand2="1"
								operation="+"
								result="app.server.bundle.index"
							/>
						</antelope:repeat>

						<var name="app.server.bundle.index" unset="true" />
					</then>
				</if>
			</try>
			<catch>
				<fail message="${shutdown.error}" />
			</catch>
			<finally>
				<record action="stop" name="${project.dir}/console-shut-down" />

				<antcall target="run-poshi-evaluate-console" />
			</finally>
		</trycatch>

		<get-testcase-property property.name="apacheds.enabled" />

		<if>
			<equals arg1="${apacheds.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-apacheds.xml" target="stop-apacheds" />
			</then>
		</if>

		<get-testcase-property property.name="openam.enabled" />

		<if>
			<equals arg1="${openam.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-authentication.xml" target="delete-openam-config" />
			</then>
		</if>

		<get-testcase-property property.name="portal.suite.search.engine" />
		<get-testcase-property property.name="remote.elasticsearch.enabled" />

		<if>
			<equals arg1="${remote.elasticsearch.enabled}" arg2="true" />
			<then>
				<if>
					<contains string="${portal.suite.search.engine}" substring="elasticsearch7" />
					<then>
						<ant antfile="build-test-elasticsearch7.xml" target="stop-elasticsearch" />
					</then>
					<else>
						<ant antfile="build-test-elasticsearch6.xml" target="stop-elasticsearch" />
					</else>
				</if>
			</then>
		</if>

		<get-testcase-property property.name="solr.enabled" />

		<if>
			<equals arg1="${solr.enabled}" arg2="true" />
			<then>
				<ant antfile="build-test-solr.xml" target="stop-solr-core" />
			</then>
			<elseif>
				<isset property="env.CI_TEST_SUITE" />
				<then>
					<propertycopy from="search.engine[${env.CI_TEST_SUITE}]" name="suite.search.engine" silent="true" />

					<if>
						<equals arg1="${suite.search.engine}" arg2="solr" />
						<then>
							<ant antfile="build-test-solr.xml" target="stop-solr-core" />
						</then>
					</if>
				</then>
			</elseif>
		</if>

		<antcall target="clean-up-web-xml" />
	</target>

	<target name="set-portal-impl-portal-test-ext-properties">
		<set-portal-impl-portal-test-ext-properties />
	</target>

	<target name="set-tomcat-version-number">
		<set-tomcat-version-number liferay.portal.bundle="${liferay.portal.bundle}" />
	</target>

	<target name="setup-testable-tomcat">
		<setup-testable-tomcat />
	</target>

	<target name="start-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<start-app-server
			app.server.bundle.index="${app.server.bundle.index}"
			testable.portal.started.marker.file="${testable.portal.started.marker.file}"
		/>
	</target>

	<target name="start-app-server-preserve-liferay-home">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<start-app-server
			app.server.bundle.index="${app.server.bundle.index}"
			delete.liferay.home="false"
			testable.portal.started.marker.file="${testable.portal.started.marker.file}"
		/>
	</target>

	<target name="start-docker-database">
		<start-docker-database />
	</target>

	<target name="start-lcs-server">
		<start-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="1"
			app.server.leading.port.number="7"
		/>

		<start-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="2"
			app.server.leading.port.number="9"
		/>

		<start-lcs-app-server />
	</target>

	<target name="start-test-smtp-server">
		<start-test-smtp-server />
	</target>

	<target name="stop-app-server">
		<if>
			<not>
				<isset property="app.server.bundle.index" />
			</not>
			<then>
				<var name="app.server.bundle.index" value="0" />
			</then>
		</if>

		<stop-app-server
			app.server.bundle.index="${app.server.bundle.index}"
		/>
	</target>

	<target name="stop-docker-database">
		<stop-docker-database />
	</target>

	<target name="stop-lcs-server">
		<stop-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/gateway/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="1"
			app.server.leading.port.number="7"
		/>

		<stop-lcs-app-server
			app.server.bin.dir="${app.server.parent.dir}/processor/tomcat-${app.server.tomcat.version}/bin"
			app.server.bundle.index="2"
			app.server.leading.port.number="9"
		/>

		<stop-lcs-app-server />
	</target>

	<target name="test-package">
		<ant dir="portal-kernel" inheritAll="false" target="test-package" />

		<ant dir="portal-impl" inheritAll="false" target="test-package" />

		<ant dir="util-java" inheritAll="false" target="test-package" />
	</target>

	<target name="test-unit">
		<ant dir="portal-kernel" inheritAll="false" target="test-unit" />

		<ant dir="portal-impl" inheritAll="false" target="test-unit" />

		<ant dir="util-java" inheritAll="false" target="test-unit" />

		<ant dir="util-taglib" inheritAll="false" target="test-unit" />
	</target>

	<target name="uninstall-patches">
		<local name="patching.tool.dir" />

		<condition else="${app.server.parent.dir}-${uninstall.patch.cluster.node.index}/patching-tool" property="patching.tool.dir" value="${app.server.parent.dir}/patching-tool">
			<or>
				<not>
					<isset property="uninstall.patch.cluster.node.index" />
				</not>
				<equals arg1="${uninstall.patch.cluster.node.index}" arg2="0" />
			</or>
		</condition>

		<uninstall-patches patching.tool.dir="${patching.tool.dir}" />
	</target>

	<target name="update-osgi-module-configuration">
		<local name="osgi.configs.dir" />

		<condition else="${app.server.parent.dir}-${install.patch.cluster.node.index}/osgi/configs" property="osgi.configs.dir" value="${app.server.parent.dir}/osgi/configs">
			<or>
				<not>
					<isset property="install.patch.cluster.node.index" />
				</not>
				<equals arg1="${install.patch.cluster.node.index}" arg2="0" />
			</or>
		</condition>

		<get-testcase-property property.name="osgi.module.configurations" />
		<get-testcase-property property.name="osgi.module.configuration.file.names" />

		<replace
			file="${osgi.configs.dir}/${osgi.module.configuration.file.names}"
			token="${osgi.module.configurations}"
			value="${update.configuration}"
		/>

		<print-file file.name="${osgi.configs.dir}/${osgi.module.configuration.file.names}" />
	</target>

	<target name="upgrade-legacy-database">
		<prepare-database-upgrade-configuration />

		<get-java-jdk-bundle-version test.batch.name="${test.batch.name}" />

		<get-java-jdk-bundle-type test.batch.name="${test.batch.name}" />

		<get-java-jdk-home type="${java.jdk.bundle.type}" version="${java.jdk.bundle.version}" />

		<trycatch property="upgrade.error">
			<try>
				<if>
					<equals arg1="${app.server.type}" arg2="websphere" />
					<then>
						<java
							dir="${liferay.home}/tools/portal-tools-db-upgrade-client"
							failonerror="true"
							fork="true"
							jar="${liferay.home}/tools/portal-tools-db-upgrade-client/com.liferay.portal.tools.db.upgrade.client.jar"
							timeout="900000"
						>
							<env key="JAVA_HOME" value="${java.jdk.home}" />
							<env key="WAS_HOME" value="${app.server.dir}" />
						</java>
					</then>
					<else>
						<java
							dir="${liferay.home}/tools/portal-tools-db-upgrade-client"
							failonerror="true"
							fork="true"
							jar="${liferay.home}/tools/portal-tools-db-upgrade-client/com.liferay.portal.tools.db.upgrade.client.jar"
							timeout="900000"
						>
							<env key="JAVA_HOME" value="${java.jdk.home}" />
						</java>
					</else>
				</if>
			</try>
			<catch>
				<get-jstack-output process.name="DBUpgrader" />

				<fail message="${upgrade.error}${line.separator}${jstack.output}" />
			</catch>
		</trycatch>

		<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.configuration.IndexStatusManagerConfiguration.cfg">indexReadOnly=false</echo>
	</target>

	<target name="wait-for-plugins-deployment">
		<fail message="Please set the property ${test.class}." unless="test.class" />

		<if>
			<not>
				<equals arg1="${liferay.portal.bundle}" arg2="6.0.6" />
			</not>
			<then>
				<condition property="required.plugins.includes" value="">
					<not>
						<isset property="required.plugins.includes" />
					</not>
				</condition>

				<if>
					<not>
						<available file="${liferay.home}/logs" type="dir" />
					</not>
					<then>
						<fail message="${liferay.home}/logs is not available." />
					</then>
				</if>

				<first id="first">
					<fileset
						dir="${liferay.home}/logs"
						includes="*.log"
					/>
				</first>

				<var name="log.file.path" value="${toString:first}" />

				<get-testcase-property property.name="hook.plugins.includes" />
				<get-testcase-property property.name="layouttpl.plugins.includes" />
				<get-testcase-property property.name="portlet.plugins.includes" />
				<get-testcase-property property.name="theme.plugins.includes" />
				<get-testcase-property property.name="web.plugins.includes" />

				<beanshell>
					<![CDATA[
						import org.apache.commons.io.FileUtils;

						Set requiredPluginNamesSet = new HashSet();

						String[] pluginTypes = {"hook", "layouttpl", "portlet", "required", "theme", "web"};

						for (String pluginType : pluginTypes) {
							String pluginNamesString = project.getProperty(pluginType + ".plugins.includes");

							if (pluginNamesString != null) {
								String[] pluginNames = pluginNamesString.split(",");

								for (String pluginName : pluginNames) {
									requiredPluginNamesSet.add(pluginName);
								}
							}
						}

						System.out.println("Ensuring the following plugins have been deployed:");
						System.out.println(requiredPluginNamesSet);

						String logFilePath = project.getProperty("log.file.path");

						logFilePath = logFilePath.replaceAll("\\\\", "/");

						int second = 0;

						for (String pluginName : requiredPluginNamesSet) {
							while (true) {
								try {
									File file = new File(logFilePath);

									String content = FileUtils.readFileToString(file);

									if (content.contains(pluginName + " is available for use") ||
										content.contains(pluginName + " are available for use")) {

										break;
									}
								}
								catch (Exception e) {
									e.printStackTrace();
								}

								if (second >= 120) {
									break;
								}

								second++;

								Thread.sleep(1000);
							}
						}
					]]>
				</beanshell>
			</then>
		</if>
	</target>
</project>