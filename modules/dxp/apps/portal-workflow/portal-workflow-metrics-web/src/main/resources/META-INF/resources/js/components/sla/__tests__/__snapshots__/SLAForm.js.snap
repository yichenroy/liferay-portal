// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should display error when submitting the form with empty name 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should display error when the server returns a failure 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should display errors when duration was changed but keep empty 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should display errors when input blur with invalid values 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should display errors when submitting the form with empty values 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should edit the SLA with valid values 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "REPLACE",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm
        id={1234}
        processId="123"
      >
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should redirect to SLA list 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm
        processId="123"
      >
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component 1`] = `
<div
  className="sla-form"
>
  <form
    className="sheet sheet-lg"
    role="form"
  >
    <div
      className="sheet-header"
    >
      <h2
        className="sheet-title"
      >
        SLA Definition
      </h2>
    </div>
    <div
      className="sheet-section"
    >
      <div
        className="row"
      >
        <div
          className="col col-sm-5 form-group "
        >
          <label
            htmlFor="sla_name"
          >
            Name 
            <span
              className="reference-mark"
            >
              <svg
                className="lexicon-icon lexicon-icon-asterisk"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </label>
          <input
            autoFocus={true}
            className="form-control"
            defaultValue=""
            id="sla_name"
            maxLength={75}
            name="name"
            onInput={[Function]}
            type="text"
          />
        </div>
        <div
          className="col col-sm-7 form-group"
        >
          <label
            htmlFor="sla_description"
          >
            Description 
          </label>
          <input
            className="form-control"
            defaultValue=""
            id="sla_description"
            name="description"
            onFocus={[Function]}
            onInput={[Function]}
            type="text"
          />
        </div>
      </div>
      <h3
        className="sheet-subtitle"
      >
        <label
          htmlFor="sla_time_start"
        >
          TIME FRAME 
        </label>
      </h3>
      <div
        className="sheet-text"
      >
        Define when time should be tracked based on workflow steps.
      </div>
      <div
        className="row"
      >
        <div
          className="col col-sm-12 form-group "
        >
          <label
            htmlFor="sla_time_start"
          >
            start 
            <span
              className="reference-mark"
            >
              <svg
                className="lexicon-icon lexicon-icon-asterisk"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </label>
          <div
            className="form-text"
          >
            Time Will Begin Counting When:
          </div>
          <div
            className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
            onFocus={[Function]}
          >
            <div
              className="col-11 p-0 d-flex flex-wrap"
            >
              <input
                className="form-control-inset"
                onChange={[Function]}
                onFocus={[Function]}
                onKeyUp={[Function]}
                placeholder="Select or type an option."
                type="text"
                value=""
              />
            </div>
            <div
              className="col-1 mt-1 text-right"
              onClick={[Function]}
              style={
                Object {
                  "paddingRight": "0px",
                }
              }
            >
              <svg
                className="lexicon-icon lexicon-icon-caret-double"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </div>
          </div>
        </div>
      </div>
      <div
        className="row"
      >
        <div
          className="col col-sm-12 form-group"
        >
          <label
            htmlFor="sla_time_pause"
          >
            Pause 
          </label>
          <div
            className="form-text"
          >
            Time Won't Be Considered When:
          </div>
          <div
            className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
            onFocus={[Function]}
          >
            <div
              className="col-11 p-0 d-flex flex-wrap"
            >
              <input
                className="form-control-inset"
                onChange={[Function]}
                onFocus={[Function]}
                onKeyUp={[Function]}
                placeholder="Select or type an option."
                type="text"
                value=""
              />
            </div>
            <div
              className="col-1 mt-1 text-right"
              onClick={[Function]}
              style={
                Object {
                  "paddingRight": "0px",
                }
              }
            >
              <svg
                className="lexicon-icon lexicon-icon-caret-double"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </div>
          </div>
        </div>
      </div>
      <div
        className="row"
      >
        <div
          className="col col-sm-12 form-group "
        >
          <label
            htmlFor="sla_time_stop"
          >
            Stop 
            <span
              className="reference-mark"
            >
              <svg
                className="lexicon-icon lexicon-icon-asterisk"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </label>
          <div
            className="form-text"
          >
            Time Will Stop Counting When:
          </div>
          <div
            className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
            onFocus={[Function]}
          >
            <div
              className="col-11 p-0 d-flex flex-wrap"
            >
              <input
                className="form-control-inset"
                onChange={[Function]}
                onFocus={[Function]}
                onKeyUp={[Function]}
                placeholder="Select or type an option."
                type="text"
                value=""
              />
            </div>
            <div
              className="col-1 mt-1 text-right"
              onClick={[Function]}
              style={
                Object {
                  "paddingRight": "0px",
                }
              }
            >
              <svg
                className="lexicon-icon lexicon-icon-caret-double"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </div>
          </div>
        </div>
      </div>
      <h3
        className="sheet-subtitle"
      >
        <label
          htmlFor="sla_duration_days"
        >
          DURATION 
          <span
            className="reference-mark"
          >
            <svg
              className="lexicon-icon lexicon-icon-asterisk"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </span>
        </label>
      </h3>
      <div
        className="sheet-text"
      >
        Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
      </div>
      <div
        className="row"
      >
        <div
          className="col col-sm-3 form-group "
        >
          <label
            htmlFor="sla_duration_days"
          >
            Days 
          </label>
          <input
            className="form-control"
            defaultValue={null}
            id="sla_duration_days"
            mask={[Function]}
            maxLength={4}
            name="days"
            onFocus={[Function]}
            onInput={[Function]}
            type="text"
          />
          <div
            className="form-text"
          >
            Enter a whole number.
          </div>
        </div>
        <div
          className="col col-sm-3 form-group "
        >
          <label
            htmlFor="sla_duration_hours"
          >
            Hours 
          </label>
          <input
            className="form-control"
            id="sla_duration_hours"
            mask={
              Array [
                /\\\\d/,
                /\\\\d/,
                ":",
                /\\\\d/,
                /\\\\d/,
              ]
            }
            name="hours"
            onBlur={[Function]}
            onChange={[Function]}
            onInput={[Function]}
            placeholder="00:00"
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
    <div
      className="sheet-footer sheet-footer-btn-block-sm-down"
    >
      <div
        className="btn-group"
      >
        <div
          className="btn-group-item"
        >
          <button
            className="btn btn-primary"
            onClick={[Function]}
            type="button"
          >
            Save
          </button>
        </div>
        <div
          className="btn-group-item"
        >
          <a
            className="btn btn-secondary"
            href="/"
            onClick={[Function]}
          >
            Cancel
          </a>
        </div>
      </div>
    </div>
  </form>
</div>
`;

exports[`Should render component in edit mode 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm
        id={1234}
      >
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group "
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should update state after input changes 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm>
        <div
          className="sla-form"
        >
          <form
            className="sheet sheet-lg"
            role="form"
          >
            <div
              className="sheet-header"
            >
              <h2
                className="sheet-title"
              >
                SLA Definition
              </h2>
            </div>
            <div
              className="sheet-section"
            >
              <div
                className="row"
              >
                <div
                  className="col col-sm-5 form-group has-error"
                >
                  <FieldLabel
                    fieldId="sla_name"
                    required={true}
                    text="Name"
                  >
                    <label
                      htmlFor="sla_name"
                    >
                      Name 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <input
                    autoFocus={true}
                    className="form-control"
                    defaultValue=""
                    id="sla_name"
                    maxLength={75}
                    name="name"
                    onInput={[Function]}
                    type="text"
                  />
                  <FieldError
                    error="A name is required."
                  >
                    <div
                      className="form-feedback-group"
                    >
                      <div
                        className="form-feedback-item"
                      >
                        <span
                          className="form-feedback-indicator"
                        >
                          <Icon
                            iconName="exclamation-full"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-exclamation-full"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#exclamation-full\\" />",
                                }
                              }
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                        A name is required.
                      </div>
                    </div>
                  </FieldError>
                </div>
                <div
                  className="col col-sm-7 form-group"
                >
                  <FieldLabel
                    fieldId="sla_description"
                    text="Description"
                  >
                    <label
                      htmlFor="sla_description"
                    >
                      Description 
                    </label>
                  </FieldLabel>
                  <input
                    className="form-control"
                    defaultValue=""
                    id="sla_description"
                    name="description"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  text="TIME FRAME"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    TIME FRAME 
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define when time should be tracked based on workflow steps.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    required={true}
                    text="start"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      start 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Begin Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group"
                >
                  <FieldLabel
                    fieldId="sla_time_pause"
                    text="Pause"
                  >
                    <label
                      htmlFor="sla_time_pause"
                    >
                      Pause 
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Won't Be Considered When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-12 form-group "
                >
                  <FieldLabel
                    fieldId="sla_time_stop"
                    required={true}
                    text="Stop"
                  >
                    <label
                      htmlFor="sla_time_stop"
                    >
                      Stop 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                  <div
                    className="form-text"
                  >
                    Time Will Stop Counting When:
                  </div>
                  <MultiSelect
                    data={Array []}
                    fieldId="compositeId"
                    onChangeTags={[Function]}
                    selectedTagsId={Array []}
                  >
                    <div
                      className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                      onFocus={[Function]}
                    >
                      <div
                        className="col-11 p-0 d-flex flex-wrap"
                      >
                        <input
                          className="form-control-inset"
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select or type an option."
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="col-1 mt-1 text-right"
                        onClick={[Function]}
                        style={
                          Object {
                            "paddingRight": "0px",
                          }
                        }
                      >
                        <Icon
                          iconName="caret-double"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-double"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </div>
                    </div>
                  </MultiSelect>
                </div>
              </div>
              <h3
                className="sheet-subtitle"
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  required={true}
                  text="DURATION"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    DURATION 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
              </h3>
              <div
                className="sheet-text"
              >
                Define the SLA duration. By default, the SLA timer runs 24 hours per day, 7 days per week.
              </div>
              <div
                className="row"
              >
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_days"
                    text="Days"
                  >
                    <label
                      htmlFor="sla_duration_days"
                    >
                      Days 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    defaultValue={null}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                  >
                    <input
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </reactTextMask>
                  <div
                    className="form-text"
                  >
                    Enter a whole number.
                  </div>
                </div>
                <div
                  className="col col-sm-3 form-group "
                >
                  <FieldLabel
                    fieldId="sla_duration_hours"
                    text="Hours"
                  >
                    <label
                      htmlFor="sla_duration_hours"
                    >
                      Hours 
                    </label>
                  </FieldLabel>
                  <reactTextMask
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    value=""
                  >
                    <input
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      type="text"
                      value=""
                    />
                  </reactTextMask>
                </div>
              </div>
            </div>
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    Save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Route>
                      <Component
                        className="btn btn-secondary"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <BackLinkWrapper
                          backPath="/"
                          className="btn btn-secondary"
                          currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                        >
                          <Link
                            className="btn btn-secondary"
                            replace={false}
                            to="/"
                          >
                            <a
                              className="btn btn-secondary"
                              href="/"
                              onClick={[Function]}
                            >
                              Cancel
                            </a>
                          </Link>
                        </BackLinkWrapper>
                      </Component>
                    </Route>
                  </withRouter()>
                </div>
              </div>
            </div>
          </form>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;
