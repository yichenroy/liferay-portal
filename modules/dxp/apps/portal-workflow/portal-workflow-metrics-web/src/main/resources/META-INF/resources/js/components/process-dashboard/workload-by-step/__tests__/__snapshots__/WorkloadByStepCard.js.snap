// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should component receive props 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <WorkloadByStepCard
        page={1}
        pageSize={10}
        processId={35315}
      >
        <Panel
          className="container-fluid-1280 mt-4"
        >
          <div
            className="container-fluid-1280 mt-4"
          >
            <div
              className="panel panel-secondary"
            >
              <Header
                elementClasses="dashboard-panel-header"
              >
                <div
                  className="panel-header dashboard-panel-header"
                >
                  <div>
                    <div>
                      <span
                        className="mr-3"
                      >
                        Workload by Step
                      </span>
                      <Tooltip
                        message="Workload by step shows the number of items in each step, by SLA deadline. The total number of pending items may not add up since multiple tasks occur simultaneously."
                        position="right"
                        width="288"
                      >
                        <span
                          className="workflow-tooltip"
                          onMouseLeave={[Function]}
                        >
                          <span
                            className="tooltip-trigger"
                            onMouseOver={[Function]}
                          >
                            <Icon
                              iconName="question-circle-full"
                            >
                              <svg
                                className="lexicon-icon lexicon-icon-question-circle-full"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#question-circle-full\\" />",
                                  }
                                }
                                focusable="false"
                                role="presentation"
                              />
                            </Icon>
                          </span>
                        </span>
                      </Tooltip>
                    </div>
                  </div>
                </div>
              </Header>
              <Body>
                <div
                  className="panel-body"
                >
                  <ListView
                    className="border-0"
                    emptyActionButton={<ReloadButton />}
                    emptyMessageClassName="small"
                    emptyMessageText="There are no pending items at the moment."
                    errorMessageText={null}
                    fetching={false}
                    hideAnimation={true}
                    loading={true}
                  >
                    <div>
                      <div
                        className="border-0 pb-6 pt-6 sheet"
                      >
                        <LoadingState>
                          <span
                            aria-hidden="true"
                            className="loading-animation"
                          />
                        </LoadingState>
                      </div>
                    </div>
                  </ListView>
                </div>
              </Body>
            </div>
          </div>
        </Panel>
      </WorkloadByStepCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should component shows empty state when items is undefined 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <WorkloadByStepCard>
        <Panel
          className="container-fluid-1280 mt-4"
        >
          <div
            className="container-fluid-1280 mt-4"
          >
            <div
              className="panel panel-secondary"
            >
              <Header
                elementClasses="dashboard-panel-header"
              >
                <div
                  className="panel-header dashboard-panel-header"
                >
                  <div>
                    <div>
                      <span
                        className="mr-3"
                      >
                        Workload by Step
                      </span>
                      <Tooltip
                        message="Workload by step shows the number of items in each step, by SLA deadline. The total number of pending items may not add up since multiple tasks occur simultaneously."
                        position="right"
                        width="288"
                      >
                        <span
                          className="workflow-tooltip"
                          onMouseLeave={[Function]}
                        >
                          <span
                            className="tooltip-trigger"
                            onMouseOver={[Function]}
                          >
                            <Icon
                              iconName="question-circle-full"
                            >
                              <svg
                                className="lexicon-icon lexicon-icon-question-circle-full"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#question-circle-full\\" />",
                                  }
                                }
                                focusable="false"
                                role="presentation"
                              />
                            </Icon>
                          </span>
                        </span>
                      </Tooltip>
                    </div>
                  </div>
                </div>
              </Header>
              <Body>
                <div
                  className="panel-body"
                >
                  <ListView
                    className="border-0"
                    emptyActionButton={<ReloadButton />}
                    emptyMessageClassName="small"
                    emptyMessageText="There are no pending items at the moment."
                    errorMessageText={null}
                    fetching={false}
                    hideAnimation={true}
                    loading={true}
                  >
                    <div>
                      <div
                        className="border-0 pb-6 pt-6 sheet"
                      >
                        <LoadingState>
                          <span
                            aria-hidden="true"
                            className="loading-animation"
                          />
                        </LoadingState>
                      </div>
                    </div>
                  </ListView>
                </div>
              </Body>
            </div>
          </div>
        </Panel>
      </WorkloadByStepCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <WorkloadByStepCard
        page={1}
        pageSize={10}
        processId={35315}
      >
        <Panel
          className="container-fluid-1280 mt-4"
        >
          <div
            className="container-fluid-1280 mt-4"
          >
            <div
              className="panel panel-secondary"
            >
              <Header
                elementClasses="dashboard-panel-header"
              >
                <div
                  className="panel-header dashboard-panel-header"
                >
                  <div>
                    <div>
                      <span
                        className="mr-3"
                      >
                        Workload by Step
                      </span>
                      <Tooltip
                        message="Workload by step shows the number of items in each step, by SLA deadline. The total number of pending items may not add up since multiple tasks occur simultaneously."
                        position="right"
                        width="288"
                      >
                        <span
                          className="workflow-tooltip"
                          onMouseLeave={[Function]}
                        >
                          <span
                            className="tooltip-trigger"
                            onMouseOver={[Function]}
                          >
                            <Icon
                              iconName="question-circle-full"
                            >
                              <svg
                                className="lexicon-icon lexicon-icon-question-circle-full"
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#question-circle-full\\" />",
                                  }
                                }
                                focusable="false"
                                role="presentation"
                              />
                            </Icon>
                          </span>
                        </span>
                      </Tooltip>
                    </div>
                  </div>
                </div>
              </Header>
              <Body>
                <div
                  className="panel-body"
                >
                  <ListView
                    className="border-0"
                    emptyActionButton={<ReloadButton />}
                    emptyMessageClassName="small"
                    emptyMessageText="There are no pending items at the moment."
                    errorMessageText={null}
                    fetching={false}
                    hideAnimation={true}
                    loading={true}
                  >
                    <div>
                      <div
                        className="border-0 pb-6 pt-6 sheet"
                      >
                        <LoadingState>
                          <span
                            aria-hidden="true"
                            className="loading-animation"
                          />
                        </LoadingState>
                      </div>
                    </div>
                  </ListView>
                </div>
              </Body>
            </div>
          </div>
        </Panel>
      </WorkloadByStepCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component with empty data 1`] = `
<div
  className="container-fluid-1280 mt-4"
>
  <div
    className="panel panel-secondary"
  >
    <div
      className="panel-header dashboard-panel-header"
    >
      <div>
        <div>
          <span
            className="mr-3"
          >
            Workload by Step
          </span>
          <span
            className="workflow-tooltip"
            onMouseLeave={[Function]}
          >
            <span
              className="tooltip-trigger"
              onMouseOver={[Function]}
            >
              <svg
                className="lexicon-icon lexicon-icon-question-circle-full"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#question-circle-full\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </span>
        </div>
      </div>
    </div>
    <div
      className="panel-body"
    >
      <div>
        <div
          className="border-0 pb-6 pt-6 sheet"
        >
          <span
            aria-hidden="true"
            className="loading-animation"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Should render component with error state 1`] = `
<div
  className="container-fluid-1280 mt-4"
>
  <div
    className="panel panel-secondary"
  >
    <div
      className="panel-header dashboard-panel-header"
    >
      <div>
        <div>
          <span
            className="mr-3"
          >
            Workload by Step
          </span>
          <span
            className="workflow-tooltip"
            onMouseLeave={[Function]}
          >
            <span
              className="tooltip-trigger"
              onMouseOver={[Function]}
            >
              <svg
                className="lexicon-icon lexicon-icon-question-circle-full"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#question-circle-full\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </span>
        </div>
      </div>
    </div>
    <div
      className="panel-body"
    >
      <div>
        <div
          className="border-0 pb-6 pt-6 sheet"
        >
          <span
            aria-hidden="true"
            className="loading-animation"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
