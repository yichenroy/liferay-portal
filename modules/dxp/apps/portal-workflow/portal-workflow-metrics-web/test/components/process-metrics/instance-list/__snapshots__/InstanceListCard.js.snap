// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should component receive props 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <InstanceListCard
        page={1}
        pageSize={10}
        processId={12351}
        query="?filters.slaStatus%5B0%5D=overdue"
      >
        <InstanceListFilter
          processId={12351}
          query="?filters.slaStatus%5B0%5D=overdue"
          totalCount={0}
        >
          <nav
            className="management-bar management-bar-light navbar navbar-expand-md"
          >
            <div
              className="container-fluid container-fluid-max-xl"
            >
              <ul
                className="navbar-nav"
              >
                <li
                  className="nav-item"
                >
                  <strong
                    className="ml-0 mr-0 navbar-text"
                  >
                    filter-by
                  </strong>
                </li>
                <withRouter(Filter)
                  filterKey="slaStatuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Overdue",
                        "name": "overdue",
                      },
                      Object {
                        "active": false,
                        "key": "OnTime",
                        "name": "on-time",
                      },
                      Object {
                        "active": false,
                        "key": "Untracked",
                        "name": "untracked",
                      },
                    ]
                  }
                  key="slaStatuses"
                  multiple={true}
                  name="sla-status"
                >
                  <Filter
                    filterKey="slaStatuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Overdue",
                          "name": "overdue",
                        },
                        Object {
                          "active": false,
                          "key": "OnTime",
                          "name": "on-time",
                        },
                        Object {
                          "active": false,
                          "key": "Untracked",
                          "name": "untracked",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="sla-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          sla-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Overdue",
                                "name": "overdue",
                              },
                              Object {
                                "active": false,
                                "key": "OnTime",
                                "name": "on-time",
                              },
                              Object {
                                "active": false,
                                "key": "Untracked",
                                "name": "untracked",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={3}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Overdue"
                              key="0"
                              multiple={true}
                              name="overdue"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Overdue"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      overdue
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="OnTime"
                              key="1"
                              multiple={true}
                              name="on-time"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="OnTime"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      on-time
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Untracked"
                              key="2"
                              multiple={true}
                              name="untracked"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Untracked"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      untracked
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="statuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Pending",
                        "name": "pending",
                      },
                      Object {
                        "active": false,
                        "key": "Completed",
                        "name": "completed",
                      },
                    ]
                  }
                  key="statuses"
                  multiple={true}
                  name="process-status"
                >
                  <Filter
                    filterKey="statuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Pending",
                          "name": "pending",
                        },
                        Object {
                          "active": false,
                          "key": "Completed",
                          "name": "completed",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Pending",
                                "name": "pending",
                              },
                              Object {
                                "active": false,
                                "key": "Completed",
                                "name": "completed",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={2}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Pending"
                              key="0"
                              multiple={true}
                              name="pending"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Pending"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      pending
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Completed"
                              key="1"
                              multiple={true}
                              name="completed"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Completed"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      completed
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="taskKeys"
                  items={Array []}
                  key="taskKeys"
                  multiple={true}
                  name="process-step"
                >
                  <Filter
                    filterKey="taskKeys"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={Array []}
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-step"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-step
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={Array []}
                          onChange={[Function]}
                          totalCount={0}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <li>
                              <span
                                className="disabled dropdown-item"
                              >
                                no-results-were-found
                              </span>
                            </li>
                          </ul>
                          <ul
                            className="list-unstyled"
                          />
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
              </ul>
            </div>
          </nav>
          <withRouter(FilterResultsBar)
            filters={
              Array [
                Object {
                  "items": Array [],
                  "key": "slaStatuses",
                  "multiple": true,
                  "name": "sla-status",
                },
                Object {
                  "items": Array [],
                  "key": "statuses",
                  "multiple": true,
                  "name": "process-status",
                },
                Object {
                  "items": Array [],
                  "key": "taskKeys",
                  "multiple": true,
                  "name": "process-step",
                },
              ]
            }
            totalCount={0}
          >
            <FilterResultsBar
              filters={
                Array [
                  Object {
                    "items": Array [],
                    "key": "slaStatuses",
                    "multiple": true,
                    "name": "sla-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "statuses",
                    "multiple": true,
                    "name": "process-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "taskKeys",
                    "multiple": true,
                    "name": "process-step",
                  },
                ]
              }
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "match": Object {
                        "params": Object {
                          "page": 1,
                          "search": undefined,
                          "sort": undefined,
                        },
                      },
                      "pathname": "/processes/1/10/title%3Aasc",
                      "search": "?backPath=%2F",
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "match": Object {
                      "params": Object {
                        "page": 1,
                        "search": undefined,
                        "sort": undefined,
                      },
                    },
                    "pathname": "/processes/1/10/title%3Aasc",
                    "search": "?backPath=%2F",
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "match": Object {
                    "params": Object {
                      "page": 1,
                      "search": undefined,
                      "sort": undefined,
                    },
                  },
                  "pathname": "/processes/1/10/title%3Aasc",
                  "search": "?backPath=%2F",
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              totalCount={0}
            />
          </withRouter(FilterResultsBar)>
        </InstanceListFilter>
        <div
          className="container-fluid-1280 mt-4"
        >
          <ListView
            emptyActionButton={<ReloadButton />}
            emptyMessageText="there-are-no-process-items-at-the-moment"
            errorMessageText={null}
            fetching={false}
            loading={true}
          >
            <div>
              <div
                className="border-1 pb-6 pt-6 sheet"
              >
                <LoadingState>
                  <span
                    aria-hidden="true"
                    className="loading-animation"
                  />
                </LoadingState>
              </div>
            </div>
          </ListView>
        </div>
        <InstanceItemDetail
          processId={12351}
        >
          <div
            aria-labelledby="instanceDetailModalLabel"
            className="fade modal"
            id="instanceDetailModal"
            role="dialog"
            style={
              Object {
                "display": "none",
              }
            }
            tabIndex="-1"
          >
            <div
              className="modal-dialog modal-lg"
            >
              <div
                className="modal-content"
              >
                <div
                  className="modal-header"
                >
                  <div
                    className="font-weight-medium modal-title"
                    id="instanceDetailModalLabel"
                  >
                    <span
                      className="modal-title-indicator text-info"
                    >
                      <Icon
                        iconName="hr"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-hr"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#hr\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                    item #undefined
                  </div>
                  <button
                    aria-labelledby="Close"
                    className="close"
                    data-dismiss="modal"
                    role="button"
                    type="button"
                  >
                    <Icon
                      iconName="times"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-times"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#times\\" />",
                          }
                        }
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </button>
                </div>
                <div
                  className="modal-body"
                >
                  <Component>
                    <h4
                      className=" font-weight-medium mb-4"
                    >
                      due-date-by-sla
                    </h4>
                  </Component>
                  <p>
                    <span
                      className="font-weight-medium text-muted"
                    >
                      no-sla-records-for-this-item
                    </span>
                  </p>
                  <Component
                    className="mt-5"
                  >
                    <h4
                      className="mt-5 font-weight-medium mb-4"
                    >
                      process-details
                    </h4>
                  </Component>
                  <Component
                    description="process-status"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        process-status 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="created-by"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        created-by 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-type"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-type 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-title"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-title 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="current-step"
                    detail=""
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        current-step 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <a
                    className="btn btn-secondary btn-sm mb-1 font-weight-medium mt-3"
                    href="/group/control_panel/manage/-/workflow_instance/view/undefined"
                    target="_blank"
                  >
                    go-to-submission-page
                    <span
                      className="inline-item inline-item-after"
                    >
                      <Icon
                        iconName="shortcut"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-shortcut"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#shortcut\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </InstanceItemDetail>
      </InstanceListCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should component shows empty state when items is undefined 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <InstanceListCard>
        <InstanceListFilter
          totalCount={0}
        >
          <nav
            className="management-bar management-bar-light navbar navbar-expand-md"
          >
            <div
              className="container-fluid container-fluid-max-xl"
            >
              <ul
                className="navbar-nav"
              >
                <li
                  className="nav-item"
                >
                  <strong
                    className="ml-0 mr-0 navbar-text"
                  >
                    filter-by
                  </strong>
                </li>
                <withRouter(Filter)
                  filterKey="slaStatuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Overdue",
                        "name": "overdue",
                      },
                      Object {
                        "active": false,
                        "key": "OnTime",
                        "name": "on-time",
                      },
                      Object {
                        "active": false,
                        "key": "Untracked",
                        "name": "untracked",
                      },
                    ]
                  }
                  key="slaStatuses"
                  multiple={true}
                  name="sla-status"
                >
                  <Filter
                    filterKey="slaStatuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Overdue",
                          "name": "overdue",
                        },
                        Object {
                          "active": false,
                          "key": "OnTime",
                          "name": "on-time",
                        },
                        Object {
                          "active": false,
                          "key": "Untracked",
                          "name": "untracked",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="sla-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          sla-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Overdue",
                                "name": "overdue",
                              },
                              Object {
                                "active": false,
                                "key": "OnTime",
                                "name": "on-time",
                              },
                              Object {
                                "active": false,
                                "key": "Untracked",
                                "name": "untracked",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={3}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Overdue"
                              key="0"
                              multiple={true}
                              name="overdue"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Overdue"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      overdue
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="OnTime"
                              key="1"
                              multiple={true}
                              name="on-time"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="OnTime"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      on-time
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Untracked"
                              key="2"
                              multiple={true}
                              name="untracked"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Untracked"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      untracked
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="statuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Pending",
                        "name": "pending",
                      },
                      Object {
                        "active": false,
                        "key": "Completed",
                        "name": "completed",
                      },
                    ]
                  }
                  key="statuses"
                  multiple={true}
                  name="process-status"
                >
                  <Filter
                    filterKey="statuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Pending",
                          "name": "pending",
                        },
                        Object {
                          "active": false,
                          "key": "Completed",
                          "name": "completed",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Pending",
                                "name": "pending",
                              },
                              Object {
                                "active": false,
                                "key": "Completed",
                                "name": "completed",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={2}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Pending"
                              key="0"
                              multiple={true}
                              name="pending"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Pending"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      pending
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Completed"
                              key="1"
                              multiple={true}
                              name="completed"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Completed"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      completed
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="taskKeys"
                  items={Array []}
                  key="taskKeys"
                  multiple={true}
                  name="process-step"
                >
                  <Filter
                    filterKey="taskKeys"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={Array []}
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-step"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-step
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={Array []}
                          onChange={[Function]}
                          totalCount={0}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <li>
                              <span
                                className="disabled dropdown-item"
                              >
                                no-results-were-found
                              </span>
                            </li>
                          </ul>
                          <ul
                            className="list-unstyled"
                          />
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
              </ul>
            </div>
          </nav>
          <withRouter(FilterResultsBar)
            filters={
              Array [
                Object {
                  "items": Array [],
                  "key": "slaStatuses",
                  "multiple": true,
                  "name": "sla-status",
                },
                Object {
                  "items": Array [],
                  "key": "statuses",
                  "multiple": true,
                  "name": "process-status",
                },
                Object {
                  "items": Array [],
                  "key": "taskKeys",
                  "multiple": true,
                  "name": "process-step",
                },
              ]
            }
            totalCount={0}
          >
            <FilterResultsBar
              filters={
                Array [
                  Object {
                    "items": Array [],
                    "key": "slaStatuses",
                    "multiple": true,
                    "name": "sla-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "statuses",
                    "multiple": true,
                    "name": "process-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "taskKeys",
                    "multiple": true,
                    "name": "process-step",
                  },
                ]
              }
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "match": Object {
                        "params": Object {
                          "page": 1,
                          "search": undefined,
                          "sort": undefined,
                        },
                      },
                      "pathname": "/processes/1/10/title%3Aasc",
                      "search": "?backPath=%2F",
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "match": Object {
                      "params": Object {
                        "page": 1,
                        "search": undefined,
                        "sort": undefined,
                      },
                    },
                    "pathname": "/processes/1/10/title%3Aasc",
                    "search": "?backPath=%2F",
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "match": Object {
                    "params": Object {
                      "page": 1,
                      "search": undefined,
                      "sort": undefined,
                    },
                  },
                  "pathname": "/processes/1/10/title%3Aasc",
                  "search": "?backPath=%2F",
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              totalCount={0}
            />
          </withRouter(FilterResultsBar)>
        </InstanceListFilter>
        <div
          className="container-fluid-1280 mt-4"
        >
          <ListView
            emptyActionButton={<ReloadButton />}
            emptyMessageText="there-are-no-process-items-at-the-moment"
            errorMessageText={null}
            fetching={false}
            loading={true}
          >
            <div>
              <div
                className="border-1 pb-6 pt-6 sheet"
              >
                <LoadingState>
                  <span
                    aria-hidden="true"
                    className="loading-animation"
                  />
                </LoadingState>
              </div>
            </div>
          </ListView>
        </div>
        <InstanceItemDetail>
          <div
            aria-labelledby="instanceDetailModalLabel"
            className="fade modal"
            id="instanceDetailModal"
            role="dialog"
            style={
              Object {
                "display": "none",
              }
            }
            tabIndex="-1"
          >
            <div
              className="modal-dialog modal-lg"
            >
              <div
                className="modal-content"
              >
                <div
                  className="modal-header"
                >
                  <div
                    className="font-weight-medium modal-title"
                    id="instanceDetailModalLabel"
                  >
                    <span
                      className="modal-title-indicator text-info"
                    >
                      <Icon
                        iconName="hr"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-hr"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#hr\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                    item #undefined
                  </div>
                  <button
                    aria-labelledby="Close"
                    className="close"
                    data-dismiss="modal"
                    role="button"
                    type="button"
                  >
                    <Icon
                      iconName="times"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-times"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#times\\" />",
                          }
                        }
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </button>
                </div>
                <div
                  className="modal-body"
                >
                  <Component>
                    <h4
                      className=" font-weight-medium mb-4"
                    >
                      due-date-by-sla
                    </h4>
                  </Component>
                  <p>
                    <span
                      className="font-weight-medium text-muted"
                    >
                      no-sla-records-for-this-item
                    </span>
                  </p>
                  <Component
                    className="mt-5"
                  >
                    <h4
                      className="mt-5 font-weight-medium mb-4"
                    >
                      process-details
                    </h4>
                  </Component>
                  <Component
                    description="process-status"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        process-status 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="created-by"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        created-by 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-type"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-type 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-title"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-title 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="current-step"
                    detail=""
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        current-step 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <a
                    className="btn btn-secondary btn-sm mb-1 font-weight-medium mt-3"
                    href="/group/control_panel/manage/-/workflow_instance/view/undefined"
                    target="_blank"
                  >
                    go-to-submission-page
                    <span
                      className="inline-item inline-item-after"
                    >
                      <Icon
                        iconName="shortcut"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-shortcut"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#shortcut\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </InstanceItemDetail>
      </InstanceListCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <InstanceListCard
        page={1}
        pageSize={10}
        processId={12351}
      >
        <InstanceListFilter
          processId={12351}
          totalCount={0}
        >
          <nav
            className="management-bar management-bar-light navbar navbar-expand-md"
          >
            <div
              className="container-fluid container-fluid-max-xl"
            >
              <ul
                className="navbar-nav"
              >
                <li
                  className="nav-item"
                >
                  <strong
                    className="ml-0 mr-0 navbar-text"
                  >
                    filter-by
                  </strong>
                </li>
                <withRouter(Filter)
                  filterKey="slaStatuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Overdue",
                        "name": "overdue",
                      },
                      Object {
                        "active": false,
                        "key": "OnTime",
                        "name": "on-time",
                      },
                      Object {
                        "active": false,
                        "key": "Untracked",
                        "name": "untracked",
                      },
                    ]
                  }
                  key="slaStatuses"
                  multiple={true}
                  name="sla-status"
                >
                  <Filter
                    filterKey="slaStatuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Overdue",
                          "name": "overdue",
                        },
                        Object {
                          "active": false,
                          "key": "OnTime",
                          "name": "on-time",
                        },
                        Object {
                          "active": false,
                          "key": "Untracked",
                          "name": "untracked",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="sla-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          sla-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Overdue",
                                "name": "overdue",
                              },
                              Object {
                                "active": false,
                                "key": "OnTime",
                                "name": "on-time",
                              },
                              Object {
                                "active": false,
                                "key": "Untracked",
                                "name": "untracked",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={3}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Overdue"
                              key="0"
                              multiple={true}
                              name="overdue"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Overdue"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      overdue
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="OnTime"
                              key="1"
                              multiple={true}
                              name="on-time"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="OnTime"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      on-time
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Untracked"
                              key="2"
                              multiple={true}
                              name="untracked"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Untracked"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      untracked
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="statuses"
                  items={
                    Array [
                      Object {
                        "active": false,
                        "key": "Pending",
                        "name": "pending",
                      },
                      Object {
                        "active": false,
                        "key": "Completed",
                        "name": "completed",
                      },
                    ]
                  }
                  key="statuses"
                  multiple={true}
                  name="process-status"
                >
                  <Filter
                    filterKey="statuses"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={
                      Array [
                        Object {
                          "active": false,
                          "key": "Pending",
                          "name": "pending",
                        },
                        Object {
                          "active": false,
                          "key": "Completed",
                          "name": "completed",
                        },
                      ]
                    }
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-status"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-status
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={
                            Array [
                              Object {
                                "active": false,
                                "key": "Pending",
                                "name": "pending",
                              },
                              Object {
                                "active": false,
                                "key": "Completed",
                                "name": "completed",
                              },
                            ]
                          }
                          onChange={[Function]}
                          totalCount={2}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Pending"
                              key="0"
                              multiple={true}
                              name="pending"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Pending"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      pending
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                            <FilterItem
                              active={false}
                              hideControl={false}
                              itemKey="Completed"
                              key="1"
                              multiple={true}
                              name="completed"
                              onChange={[Function]}
                            >
                              <li
                                className="dropdown-item"
                              >
                                <label
                                  className="custom-control custom-checkbox"
                                >
                                  <input
                                    checked={false}
                                    className="custom-control-input"
                                    data-key="Completed"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <span
                                    className="custom-control-label"
                                  >
                                    <span
                                      className="custom-control-label-text"
                                    >
                                      completed
                                    </span>
                                  </span>
                                </label>
                              </li>
                            </FilterItem>
                          </ul>
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
                <withRouter(Filter)
                  filterKey="taskKeys"
                  items={Array []}
                  key="taskKeys"
                  multiple={true}
                  name="process-step"
                >
                  <Filter
                    filterKey="taskKeys"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    items={Array []}
                    location={
                      Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    multiple={true}
                    name="process-step"
                  >
                    <li
                      className="dropdown nav-item pl-3"
                    >
                      <button
                        aria-expanded={false}
                        aria-haspopup="true"
                        className="dropdown-toggle nav-link"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="mr-2 navbar-text-truncate"
                        >
                          process-step
                        </span>
                        <Icon
                          iconName="caret-bottom"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-caret-bottom"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                              }
                            }
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </button>
                      <div
                        className="dropdown-menu"
                        role="menu"
                      >
                        <FilterSearch
                          filteredItems={Array []}
                          onChange={[Function]}
                          totalCount={0}
                        >
                          <ul
                            className="list-unstyled"
                          >
                            <li>
                              <span
                                className="disabled dropdown-item"
                              >
                                no-results-were-found
                              </span>
                            </li>
                          </ul>
                          <ul
                            className="list-unstyled"
                          />
                        </FilterSearch>
                      </div>
                    </li>
                  </Filter>
                </withRouter(Filter)>
              </ul>
            </div>
          </nav>
          <withRouter(FilterResultsBar)
            filters={
              Array [
                Object {
                  "items": Array [],
                  "key": "slaStatuses",
                  "multiple": true,
                  "name": "sla-status",
                },
                Object {
                  "items": Array [],
                  "key": "statuses",
                  "multiple": true,
                  "name": "process-status",
                },
                Object {
                  "items": Array [],
                  "key": "taskKeys",
                  "multiple": true,
                  "name": "process-step",
                },
              ]
            }
            totalCount={0}
          >
            <FilterResultsBar
              filters={
                Array [
                  Object {
                    "items": Array [],
                    "key": "slaStatuses",
                    "multiple": true,
                    "name": "sla-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "statuses",
                    "multiple": true,
                    "name": "process-status",
                  },
                  Object {
                    "items": Array [],
                    "key": "taskKeys",
                    "multiple": true,
                    "name": "process-step",
                  },
                ]
              }
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "match": Object {
                        "params": Object {
                          "page": 1,
                          "search": undefined,
                          "sort": undefined,
                        },
                      },
                      "pathname": "/processes/1/10/title%3Aasc",
                      "search": "?backPath=%2F",
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "match": Object {
                      "params": Object {
                        "page": 1,
                        "search": undefined,
                        "sort": undefined,
                      },
                    },
                    "pathname": "/processes/1/10/title%3Aasc",
                    "search": "?backPath=%2F",
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "match": Object {
                    "params": Object {
                      "page": 1,
                      "search": undefined,
                      "sort": undefined,
                    },
                  },
                  "pathname": "/processes/1/10/title%3Aasc",
                  "search": "?backPath=%2F",
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              totalCount={0}
            />
          </withRouter(FilterResultsBar)>
        </InstanceListFilter>
        <div
          className="container-fluid-1280 mt-4"
        >
          <ListView
            emptyActionButton={<ReloadButton />}
            emptyMessageText="there-are-no-process-items-at-the-moment"
            errorMessageText={null}
            fetching={false}
            loading={true}
          >
            <div>
              <div
                className="border-1 pb-6 pt-6 sheet"
              >
                <LoadingState>
                  <span
                    aria-hidden="true"
                    className="loading-animation"
                  />
                </LoadingState>
              </div>
            </div>
          </ListView>
        </div>
        <InstanceItemDetail
          processId={12351}
        >
          <div
            aria-labelledby="instanceDetailModalLabel"
            className="fade modal"
            id="instanceDetailModal"
            role="dialog"
            style={
              Object {
                "display": "none",
              }
            }
            tabIndex="-1"
          >
            <div
              className="modal-dialog modal-lg"
            >
              <div
                className="modal-content"
              >
                <div
                  className="modal-header"
                >
                  <div
                    className="font-weight-medium modal-title"
                    id="instanceDetailModalLabel"
                  >
                    <span
                      className="modal-title-indicator text-info"
                    >
                      <Icon
                        iconName="hr"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-hr"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#hr\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                    item #undefined
                  </div>
                  <button
                    aria-labelledby="Close"
                    className="close"
                    data-dismiss="modal"
                    role="button"
                    type="button"
                  >
                    <Icon
                      iconName="times"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-times"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#times\\" />",
                          }
                        }
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </button>
                </div>
                <div
                  className="modal-body"
                >
                  <Component>
                    <h4
                      className=" font-weight-medium mb-4"
                    >
                      due-date-by-sla
                    </h4>
                  </Component>
                  <p>
                    <span
                      className="font-weight-medium text-muted"
                    >
                      no-sla-records-for-this-item
                    </span>
                  </p>
                  <Component
                    className="mt-5"
                  >
                    <h4
                      className="mt-5 font-weight-medium mb-4"
                    >
                      process-details
                    </h4>
                  </Component>
                  <Component
                    description="process-status"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        process-status 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="created-by"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        created-by 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-type"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-type 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="asset-title"
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        asset-title 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <Component
                    description="current-step"
                    detail=""
                  >
                    <p
                      className="row"
                    >
                      <span
                        className="col-2 font-weight-medium small text-secondary"
                      >
                        current-step 
                      </span>
                      <span
                        className="col small"
                      />
                    </p>
                  </Component>
                  <a
                    className="btn btn-secondary btn-sm mb-1 font-weight-medium mt-3"
                    href="/group/control_panel/manage/-/workflow_instance/view/undefined"
                    target="_blank"
                  >
                    go-to-submission-page
                    <span
                      className="inline-item inline-item-after"
                    >
                      <Icon
                        iconName="shortcut"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-shortcut"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#shortcut\\" />",
                            }
                          }
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </InstanceItemDetail>
      </InstanceListCard>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component with empty data 1`] = `
Array [
  <nav
    className="management-bar management-bar-light navbar navbar-expand-md"
  >
    <div
      className="container-fluid container-fluid-max-xl"
    >
      <ul
        className="navbar-nav"
      >
        <li
          className="nav-item"
        >
          <strong
            className="ml-0 mr-0 navbar-text"
          >
            filter-by
          </strong>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              sla-status
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Overdue"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      overdue
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="OnTime"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      on-time
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Untracked"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      untracked
                    </span>
                  </span>
                </label>
              </li>
            </ul>
          </div>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              process-status
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Pending"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      pending
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Completed"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      completed
                    </span>
                  </span>
                </label>
              </li>
            </ul>
          </div>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              process-step
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li>
                <span
                  className="disabled dropdown-item"
                >
                  no-results-were-found
                </span>
              </li>
            </ul>
            <ul
              className="list-unstyled"
            />
          </div>
        </li>
      </ul>
    </div>
  </nav>,
  <div
    className="container-fluid-1280 mt-4"
  >
    <div>
      <div
        className="border-1 pb-6 pt-6 sheet"
      >
        <span
          aria-hidden="true"
          className="loading-animation"
        />
      </div>
    </div>
  </div>,
  <div
    aria-labelledby="instanceDetailModalLabel"
    className="fade modal"
    id="instanceDetailModal"
    role="dialog"
    style={
      Object {
        "display": "none",
      }
    }
    tabIndex="-1"
  >
    <div
      className="modal-dialog modal-lg"
    >
      <div
        className="modal-content"
      >
        <div
          className="modal-header"
        >
          <div
            className="font-weight-medium modal-title"
            id="instanceDetailModalLabel"
          >
            <span
              className="modal-title-indicator text-info"
            >
              <svg
                className="lexicon-icon lexicon-icon-hr"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#hr\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
            item #undefined
          </div>
          <button
            aria-labelledby="Close"
            className="close"
            data-dismiss="modal"
            role="button"
            type="button"
          >
            <svg
              className="lexicon-icon lexicon-icon-times"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#times\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
        </div>
        <div
          className="modal-body"
        >
          <h4
            className=" font-weight-medium mb-4"
          >
            due-date-by-sla
          </h4>
          <p>
            <span
              className="font-weight-medium text-muted"
            >
              no-sla-records-for-this-item
            </span>
          </p>
          <h4
            className="mt-5 font-weight-medium mb-4"
          >
            process-details
          </h4>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              process-status 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              created-by 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              asset-type 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              asset-title 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              current-step 
            </span>
            <span
              className="col small"
            >
              
            </span>
          </p>
          <a
            className="btn btn-secondary btn-sm mb-1 font-weight-medium mt-3"
            href="/group/control_panel/manage/-/workflow_instance/view/undefined"
            target="_blank"
          >
            go-to-submission-page
            <span
              className="inline-item inline-item-after"
            >
              <svg
                className="lexicon-icon lexicon-icon-shortcut"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#shortcut\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </a>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`Should render component with error state 1`] = `
Array [
  <nav
    className="management-bar management-bar-light navbar navbar-expand-md"
  >
    <div
      className="container-fluid container-fluid-max-xl"
    >
      <ul
        className="navbar-nav"
      >
        <li
          className="nav-item"
        >
          <strong
            className="ml-0 mr-0 navbar-text"
          >
            filter-by
          </strong>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              sla-status
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Overdue"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      overdue
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="OnTime"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      on-time
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Untracked"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      untracked
                    </span>
                  </span>
                </label>
              </li>
            </ul>
          </div>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              process-status
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Pending"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      pending
                    </span>
                  </span>
                </label>
              </li>
              <li
                className="dropdown-item"
              >
                <label
                  className="custom-control custom-checkbox"
                >
                  <input
                    checked={false}
                    className="custom-control-input"
                    data-key="Completed"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="custom-control-label"
                  >
                    <span
                      className="custom-control-label-text"
                    >
                      completed
                    </span>
                  </span>
                </label>
              </li>
            </ul>
          </div>
        </li>
        <li
          className="dropdown nav-item pl-3"
        >
          <button
            aria-expanded={false}
            aria-haspopup="true"
            className="dropdown-toggle nav-link"
            onClick={[Function]}
            type="button"
          >
            <span
              className="mr-2 navbar-text-truncate"
            >
              process-step
            </span>
            <svg
              className="lexicon-icon lexicon-icon-caret-bottom"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-bottom\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
          <div
            className="dropdown-menu"
            role="menu"
          >
            <ul
              className="list-unstyled"
            >
              <li>
                <span
                  className="disabled dropdown-item"
                >
                  no-results-were-found
                </span>
              </li>
            </ul>
            <ul
              className="list-unstyled"
            />
          </div>
        </li>
      </ul>
    </div>
  </nav>,
  <div
    className="container-fluid-1280 mt-4"
  >
    <div>
      <div
        className="border-1 pb-6 pt-6 sheet"
      >
        <span
          aria-hidden="true"
          className="loading-animation"
        />
      </div>
    </div>
  </div>,
  <div
    aria-labelledby="instanceDetailModalLabel"
    className="fade modal"
    id="instanceDetailModal"
    role="dialog"
    style={
      Object {
        "display": "none",
      }
    }
    tabIndex="-1"
  >
    <div
      className="modal-dialog modal-lg"
    >
      <div
        className="modal-content"
      >
        <div
          className="modal-header"
        >
          <div
            className="font-weight-medium modal-title"
            id="instanceDetailModalLabel"
          >
            <span
              className="modal-title-indicator text-info"
            >
              <svg
                className="lexicon-icon lexicon-icon-hr"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#hr\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
            item #undefined
          </div>
          <button
            aria-labelledby="Close"
            className="close"
            data-dismiss="modal"
            role="button"
            type="button"
          >
            <svg
              className="lexicon-icon lexicon-icon-times"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#times\\" />",
                }
              }
              focusable="false"
              role="presentation"
            />
          </button>
        </div>
        <div
          className="modal-body"
        >
          <h4
            className=" font-weight-medium mb-4"
          >
            due-date-by-sla
          </h4>
          <p>
            <span
              className="font-weight-medium text-muted"
            >
              no-sla-records-for-this-item
            </span>
          </p>
          <h4
            className="mt-5 font-weight-medium mb-4"
          >
            process-details
          </h4>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              process-status 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              created-by 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              asset-type 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              asset-title 
            </span>
            <span
              className="col small"
            />
          </p>
          <p
            className="row"
          >
            <span
              className="col-2 font-weight-medium small text-secondary"
            >
              current-step 
            </span>
            <span
              className="col small"
            >
              
            </span>
          </p>
          <a
            className="btn btn-secondary btn-sm mb-1 font-weight-medium mt-3"
            href="/group/control_panel/manage/-/workflow_instance/view/undefined"
            target="_blank"
          >
            go-to-submission-page
            <span
              className="inline-item inline-item-after"
            >
              <svg
                className="lexicon-icon lexicon-icon-shortcut"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#shortcut\\" />",
                  }
                }
                focusable="false"
                role="presentation"
              />
            </span>
          </a>
        </div>
      </div>
    </div>
  </div>,
]
`;
