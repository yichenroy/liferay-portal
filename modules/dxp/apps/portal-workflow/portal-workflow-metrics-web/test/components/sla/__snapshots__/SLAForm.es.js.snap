// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should display error on alert when receive a server error after submit 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="New SLA"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  defaultValue={1}
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    defaultValue={1}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should display error on field when receive a server error after submit 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Test"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  defaultValue={1}
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    defaultValue={1}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should edit the SLA with valid values 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total resolution time"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total time to complete the request."
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  defaultValue={4}
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    defaultValue={4}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                  value="10:50"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                    value="10:50"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should redirect to SLA list 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total resolution time"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total time to complete the request."
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  defaultValue={4}
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    defaultValue={4}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                  value="10:50"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                    value="10:50"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should redirect to SLA list with blocked nodes 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total resolution time"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  defaultValue="Total time to complete the request."
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  defaultValue={4}
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    defaultValue={4}
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                  value="10:50"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                    value="10:50"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm
        id={1234}
      >
        <div
          className="sla-form"
        >
          <Body
            id={1234}
          >
            <form
              className="sheet sheet-lg"
              role="form"
            >
              <div
                className="sheet-header"
              >
                <h2
                  className="sheet-title"
                >
                  sla-definition
                </h2>
              </div>
              <div
                className="sheet-section"
              >
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-5 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_name"
                      required={true}
                      text="name"
                    >
                      <label
                        htmlFor="sla_name"
                      >
                        name 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <input
                      className="form-control"
                      defaultValue=""
                      id="sla_name"
                      maxLength={75}
                      name="name"
                      onInput={[Function]}
                      type="text"
                    />
                  </div>
                  <div
                    className="col col-sm-7 form-group"
                  >
                    <FieldLabel
                      fieldId="sla_description"
                      text="description"
                    >
                      <label
                        htmlFor="sla_description"
                      >
                        description 
                      </label>
                    </FieldLabel>
                    <input
                      className="form-control"
                      defaultValue=""
                      id="sla_description"
                      name="description"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </div>
                </div>
                <h3
                  className="sheet-subtitle"
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    text="TIME-FRAME"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      TIME-FRAME 
                    </label>
                  </FieldLabel>
                </h3>
                <div
                  className="sheet-text"
                >
                  define-when-time-should-be-tracked-based-on-workflow-steps
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_time_start"
                      required={true}
                      text="start"
                    >
                      <label
                        htmlFor="sla_time_start"
                      >
                        start 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-will-begin-counting-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group"
                  >
                    <FieldLabel
                      fieldId="sla_time_pause"
                      text="pause"
                    >
                      <label
                        htmlFor="sla_time_pause"
                      >
                        pause 
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-wont-be-considered-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_time_stop"
                      required={true}
                      text="stop"
                    >
                      <label
                        htmlFor="sla_time_stop"
                      >
                        stop 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-will-stop-counting-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <h3
                  className="sheet-subtitle"
                >
                  <FieldLabel
                    required={true}
                    text="DURATION"
                  >
                    <label>
                      DURATION 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            data-testid="icon"
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                </h3>
                <div
                  className="sheet-text"
                >
                  define-the-sla-duration
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-3 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_duration_days"
                      text="days"
                    >
                      <label
                        htmlFor="sla_duration_days"
                      >
                        days 
                      </label>
                    </FieldLabel>
                    <reactTextMask
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                    >
                      <input
                        className="form-control"
                        defaultValue={null}
                        id="sla_duration_days"
                        mask={[Function]}
                        maxLength={4}
                        name="days"
                        onFocus={[Function]}
                        onInput={[Function]}
                        type="text"
                      />
                    </reactTextMask>
                    <div
                      className="form-text"
                    >
                      enter-a-whole-number
                    </div>
                  </div>
                  <div
                    className="col col-sm-3 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_duration_hours"
                      text="hours"
                    >
                      <label
                        htmlFor="sla_duration_hours"
                      >
                        hours 
                      </label>
                    </FieldLabel>
                    <reactTextMask
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      value=""
                    >
                      <input
                        className="form-control"
                        id="sla_duration_hours"
                        mask={
                          Array [
                            /\\\\d/,
                            /\\\\d/,
                            ":",
                            /\\\\d/,
                            /\\\\d/,
                          ]
                        }
                        name="hours"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onInput={[Function]}
                        placeholder="00:00"
                        type="text"
                        value=""
                      />
                    </reactTextMask>
                  </div>
                </div>
              </div>
              <Footer
                id={1234}
                onReloadNodes={[Function]}
              >
                <div
                  className="sheet-footer sheet-footer-btn-block-sm-down"
                >
                  <div
                    className="btn-group"
                  >
                    <div
                      className="btn-group-item"
                    >
                      <button
                        className="btn btn-primary"
                        onClick={[Function]}
                        type="button"
                      >
                        update
                      </button>
                    </div>
                    <div
                      className="btn-group-item"
                    >
                      <withRouter()
                        className="btn btn-secondary"
                      >
                        <Component
                          className="btn btn-secondary"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            }
                          }
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                        >
                          <BackLinkWrapper
                            backPath="/"
                            className="btn btn-secondary"
                            currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "match": Object {
                                      "params": Object {
                                        "page": 1,
                                        "search": undefined,
                                        "sort": undefined,
                                      },
                                    },
                                    "pathname": "/processes/1/10/title%3Aasc",
                                    "search": "?backPath=%2F",
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                          >
                            <Link
                              className="btn btn-secondary"
                              to="/"
                            >
                              <a
                                className="btn btn-secondary"
                                href="/"
                                onClick={[Function]}
                              >
                                cancel
                              </a>
                            </Link>
                          </BackLinkWrapper>
                        </Component>
                      </withRouter()>
                    </div>
                  </div>
                </div>
              </Footer>
            </form>
          </Body>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should render component in edit mode 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <SLAForm
        id={1234}
      >
        <div
          className="sla-form"
        >
          <Body
            id={1234}
          >
            <form
              className="sheet sheet-lg"
              role="form"
            >
              <div
                className="sheet-header"
              >
                <h2
                  className="sheet-title"
                >
                  sla-definition
                </h2>
              </div>
              <div
                className="sheet-section"
              >
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-5 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_name"
                      required={true}
                      text="name"
                    >
                      <label
                        htmlFor="sla_name"
                      >
                        name 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <input
                      className="form-control"
                      defaultValue=""
                      id="sla_name"
                      maxLength={75}
                      name="name"
                      onInput={[Function]}
                      type="text"
                    />
                  </div>
                  <div
                    className="col col-sm-7 form-group"
                  >
                    <FieldLabel
                      fieldId="sla_description"
                      text="description"
                    >
                      <label
                        htmlFor="sla_description"
                      >
                        description 
                      </label>
                    </FieldLabel>
                    <input
                      className="form-control"
                      defaultValue=""
                      id="sla_description"
                      name="description"
                      onFocus={[Function]}
                      onInput={[Function]}
                      type="text"
                    />
                  </div>
                </div>
                <h3
                  className="sheet-subtitle"
                >
                  <FieldLabel
                    fieldId="sla_time_start"
                    text="TIME-FRAME"
                  >
                    <label
                      htmlFor="sla_time_start"
                    >
                      TIME-FRAME 
                    </label>
                  </FieldLabel>
                </h3>
                <div
                  className="sheet-text"
                >
                  define-when-time-should-be-tracked-based-on-workflow-steps
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_time_start"
                      required={true}
                      text="start"
                    >
                      <label
                        htmlFor="sla_time_start"
                      >
                        start 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-will-begin-counting-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group"
                  >
                    <FieldLabel
                      fieldId="sla_time_pause"
                      text="pause"
                    >
                      <label
                        htmlFor="sla_time_pause"
                      >
                        pause 
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-wont-be-considered-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-12 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_time_stop"
                      required={true}
                      text="stop"
                    >
                      <label
                        htmlFor="sla_time_stop"
                      >
                        stop 
                        <span
                          className="reference-mark"
                        >
                          <Icon
                            iconName="asterisk"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-asterisk"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </span>
                      </label>
                    </FieldLabel>
                    <div
                      className="form-text"
                    >
                      time-will-stop-counting-when
                    </div>
                    <MultiSelect
                      data={Array []}
                      fieldId="compositeId"
                      onChangeTags={[Function]}
                      selectedTagsId={Array []}
                    >
                      <div
                        className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                        onFocus={[Function]}
                      >
                        <div
                          className="col-11 p-0 d-flex flex-wrap"
                        >
                          <input
                            className="form-control-inset"
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyUp={[Function]}
                            placeholder="select-or-type-an-option"
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          className="col-1 drop-icon mt-1 text-right"
                          onClick={[Function]}
                        >
                          <Icon
                            iconName="caret-double"
                          >
                            <svg
                              className="lexicon-icon lexicon-icon-caret-double"
                              dangerouslySetInnerHTML={
                                Object {
                                  "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                                }
                              }
                              data-testid="icon"
                              focusable="false"
                              role="presentation"
                            />
                          </Icon>
                        </div>
                      </div>
                    </MultiSelect>
                  </div>
                </div>
                <h3
                  className="sheet-subtitle"
                >
                  <FieldLabel
                    required={true}
                    text="DURATION"
                  >
                    <label>
                      DURATION 
                      <span
                        className="reference-mark"
                      >
                        <Icon
                          iconName="asterisk"
                        >
                          <svg
                            className="lexicon-icon lexicon-icon-asterisk"
                            dangerouslySetInnerHTML={
                              Object {
                                "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                              }
                            }
                            data-testid="icon"
                            focusable="false"
                            role="presentation"
                          />
                        </Icon>
                      </span>
                    </label>
                  </FieldLabel>
                </h3>
                <div
                  className="sheet-text"
                >
                  define-the-sla-duration
                </div>
                <div
                  className="row"
                >
                  <div
                    className="col col-sm-3 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_duration_days"
                      text="days"
                    >
                      <label
                        htmlFor="sla_duration_days"
                      >
                        days 
                      </label>
                    </FieldLabel>
                    <reactTextMask
                      className="form-control"
                      defaultValue={null}
                      id="sla_duration_days"
                      mask={[Function]}
                      maxLength={4}
                      name="days"
                      onFocus={[Function]}
                      onInput={[Function]}
                    >
                      <input
                        className="form-control"
                        defaultValue={null}
                        id="sla_duration_days"
                        mask={[Function]}
                        maxLength={4}
                        name="days"
                        onFocus={[Function]}
                        onInput={[Function]}
                        type="text"
                      />
                    </reactTextMask>
                    <div
                      className="form-text"
                    >
                      enter-a-whole-number
                    </div>
                  </div>
                  <div
                    className="col col-sm-3 form-group "
                  >
                    <FieldLabel
                      fieldId="sla_duration_hours"
                      text="hours"
                    >
                      <label
                        htmlFor="sla_duration_hours"
                      >
                        hours 
                      </label>
                    </FieldLabel>
                    <reactTextMask
                      className="form-control"
                      id="sla_duration_hours"
                      mask={
                        Array [
                          /\\\\d/,
                          /\\\\d/,
                          ":",
                          /\\\\d/,
                          /\\\\d/,
                        ]
                      }
                      name="hours"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onInput={[Function]}
                      placeholder="00:00"
                      value=""
                    >
                      <input
                        className="form-control"
                        id="sla_duration_hours"
                        mask={
                          Array [
                            /\\\\d/,
                            /\\\\d/,
                            ":",
                            /\\\\d/,
                            /\\\\d/,
                          ]
                        }
                        name="hours"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onInput={[Function]}
                        placeholder="00:00"
                        type="text"
                        value=""
                      />
                    </reactTextMask>
                  </div>
                </div>
              </div>
              <Footer
                id={1234}
                onReloadNodes={[Function]}
              >
                <div
                  className="sheet-footer sheet-footer-btn-block-sm-down"
                >
                  <div
                    className="btn-group"
                  >
                    <div
                      className="btn-group-item"
                    >
                      <button
                        className="btn btn-primary"
                        onClick={[Function]}
                        type="button"
                      >
                        update
                      </button>
                    </div>
                    <div
                      className="btn-group-item"
                    >
                      <withRouter()
                        className="btn btn-secondary"
                      >
                        <Component
                          className="btn btn-secondary"
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            }
                          }
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                        >
                          <BackLinkWrapper
                            backPath="/"
                            className="btn btn-secondary"
                            currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "match": Object {
                                      "params": Object {
                                        "page": 1,
                                        "search": undefined,
                                        "sort": undefined,
                                      },
                                    },
                                    "pathname": "/processes/1/10/title%3Aasc",
                                    "search": "?backPath=%2F",
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "match": Object {
                                    "params": Object {
                                      "page": 1,
                                      "search": undefined,
                                      "sort": undefined,
                                    },
                                  },
                                  "pathname": "/processes/1/10/title%3Aasc",
                                  "search": "?backPath=%2F",
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                          >
                            <Link
                              className="btn btn-secondary"
                              to="/"
                            >
                              <a
                                className="btn btn-secondary"
                                href="/"
                                onClick={[Function]}
                              >
                                cancel
                              </a>
                            </Link>
                          </BackLinkWrapper>
                        </Component>
                      </withRouter()>
                    </div>
                  </div>
                </div>
              </Footer>
            </form>
          </Body>
        </div>
      </SLAForm>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should submit a new SLA with valid values 1`] = `
<MockRouter
  client={
    Object {
      "delete": [Function],
      "get": [Function],
      "post": [Function],
      "put": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Footer
        id="123"
        onReloadNodes={[Function]}
        processId="123"
        query=""
      >
        <div
          className="sheet-footer sheet-footer-btn-block-sm-down"
        >
          <div
            className="btn-group"
          >
            <div
              className="btn-group-item"
            >
              <button
                className="btn btn-primary"
                onClick={[Function]}
                type="button"
              >
                update
              </button>
            </div>
            <div
              className="btn-group-item"
            >
              <withRouter()
                className="btn btn-secondary"
              >
                <Component
                  className="btn btn-secondary"
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "match": Object {
                          "params": Object {
                            "page": 1,
                            "search": undefined,
                            "sort": undefined,
                          },
                        },
                        "pathname": "/processes/1/10/title%3Aasc",
                        "search": "?backPath=%2F",
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "match": Object {
                        "params": Object {
                          "page": 1,
                          "search": undefined,
                          "sort": undefined,
                        },
                      },
                      "pathname": "/processes/1/10/title%3Aasc",
                      "search": "?backPath=%2F",
                    }
                  }
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                >
                  <BackLinkWrapper
                    backPath="/"
                    className="btn btn-secondary"
                    currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                  >
                    <Link
                      className="btn btn-secondary"
                      to="/"
                    >
                      <a
                        className="btn btn-secondary"
                        href="/"
                        onClick={[Function]}
                      >
                        cancel
                      </a>
                    </Link>
                  </BackLinkWrapper>
                </Component>
              </withRouter()>
            </div>
          </div>
        </div>
      </Footer>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should test handler erros 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should test handler erros at start node keys 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should test handler no array erros 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should test load data callback 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    save
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;

exports[`Should update state after input changes 1`] = `
<MockRouter>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "match": Object {
            "params": Object {
              "page": 1,
              "search": undefined,
              "sort": undefined,
            },
          },
          "pathname": "/processes/1/10/title%3Aasc",
          "search": "?backPath=%2F",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "match": Object {
                "params": Object {
                  "page": 1,
                  "search": undefined,
                  "sort": undefined,
                },
              },
              "pathname": "/processes/1/10/title%3Aasc",
              "search": "?backPath=%2F",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "match": Object {
              "params": Object {
                "page": 1,
                "search": undefined,
                "sort": undefined,
              },
            },
            "pathname": "/processes/1/10/title%3Aasc",
            "search": "?backPath=%2F",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Body
        id="123"
        processId="123"
        query=""
      >
        <form
          className="sheet sheet-lg"
          role="form"
        >
          <div
            className="sheet-header"
          >
            <h2
              className="sheet-title"
            >
              sla-definition
            </h2>
          </div>
          <div
            className="sheet-section"
          >
            <div
              className="row"
            >
              <div
                className="col col-sm-5 form-group "
              >
                <FieldLabel
                  fieldId="sla_name"
                  required={true}
                  text="name"
                >
                  <label
                    htmlFor="sla_name"
                  >
                    name 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_name"
                  maxLength={75}
                  name="name"
                  onInput={[Function]}
                  type="text"
                />
              </div>
              <div
                className="col col-sm-7 form-group"
              >
                <FieldLabel
                  fieldId="sla_description"
                  text="description"
                >
                  <label
                    htmlFor="sla_description"
                  >
                    description 
                  </label>
                </FieldLabel>
                <input
                  className="form-control"
                  id="sla_description"
                  name="description"
                  onFocus={[Function]}
                  onInput={[Function]}
                  type="text"
                />
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                fieldId="sla_time_start"
                text="TIME-FRAME"
              >
                <label
                  htmlFor="sla_time_start"
                >
                  TIME-FRAME 
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-when-time-should-be-tracked-based-on-workflow-steps
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_start"
                  required={true}
                  text="start"
                >
                  <label
                    htmlFor="sla_time_start"
                  >
                    start 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-begin-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group"
              >
                <FieldLabel
                  fieldId="sla_time_pause"
                  text="pause"
                >
                  <label
                    htmlFor="sla_time_pause"
                  >
                    pause 
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-wont-be-considered-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-12 form-group "
              >
                <FieldLabel
                  fieldId="sla_time_stop"
                  required={true}
                  text="stop"
                >
                  <label
                    htmlFor="sla_time_stop"
                  >
                    stop 
                    <span
                      className="reference-mark"
                    >
                      <Icon
                        iconName="asterisk"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-asterisk"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </span>
                  </label>
                </FieldLabel>
                <div
                  className="form-text"
                >
                  time-will-stop-counting-when
                </div>
                <MultiSelect
                  data={Array []}
                  fieldId="compositeId"
                  onChangeTags={[Function]}
                  selectedTagsId={[Function]}
                >
                  <div
                    className=" align-items-start form-control form-control-tag-group multi-select-wrapper"
                    onFocus={[Function]}
                  >
                    <div
                      className="col-11 p-0 d-flex flex-wrap"
                    >
                      <input
                        className="form-control-inset"
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyUp={[Function]}
                        placeholder="select-or-type-an-option"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="col-1 drop-icon mt-1 text-right"
                      onClick={[Function]}
                    >
                      <Icon
                        iconName="caret-double"
                      >
                        <svg
                          className="lexicon-icon lexicon-icon-caret-double"
                          dangerouslySetInnerHTML={
                            Object {
                              "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#caret-double\\" />",
                            }
                          }
                          data-testid="icon"
                          focusable="false"
                          role="presentation"
                        />
                      </Icon>
                    </div>
                  </div>
                </MultiSelect>
              </div>
            </div>
            <h3
              className="sheet-subtitle"
            >
              <FieldLabel
                required={true}
                text="DURATION"
              >
                <label>
                  DURATION 
                  <span
                    className="reference-mark"
                  >
                    <Icon
                      iconName="asterisk"
                    >
                      <svg
                        className="lexicon-icon lexicon-icon-asterisk"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "<use xlink:href=\\"http://localhost:8080/o/admin-theme/images/lexicon/icons.svg#asterisk\\" />",
                          }
                        }
                        data-testid="icon"
                        focusable="false"
                        role="presentation"
                      />
                    </Icon>
                  </span>
                </label>
              </FieldLabel>
            </h3>
            <div
              className="sheet-text"
            >
              define-the-sla-duration
            </div>
            <div
              className="row"
            >
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_days"
                  text="days"
                >
                  <label
                    htmlFor="sla_duration_days"
                  >
                    days 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_days"
                  mask={[Function]}
                  maxLength={4}
                  name="days"
                  onFocus={[Function]}
                  onInput={[Function]}
                >
                  <input
                    className="form-control"
                    id="sla_duration_days"
                    mask={[Function]}
                    maxLength={4}
                    name="days"
                    onFocus={[Function]}
                    onInput={[Function]}
                    type="text"
                  />
                </reactTextMask>
                <div
                  className="form-text"
                >
                  enter-a-whole-number
                </div>
              </div>
              <div
                className="col col-sm-3 form-group "
              >
                <FieldLabel
                  fieldId="sla_duration_hours"
                  text="hours"
                >
                  <label
                    htmlFor="sla_duration_hours"
                  >
                    hours 
                  </label>
                </FieldLabel>
                <reactTextMask
                  className="form-control"
                  id="sla_duration_hours"
                  mask={
                    Array [
                      /\\\\d/,
                      /\\\\d/,
                      ":",
                      /\\\\d/,
                      /\\\\d/,
                    ]
                  }
                  name="hours"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onInput={[Function]}
                  placeholder="00:00"
                >
                  <input
                    className="form-control"
                    id="sla_duration_hours"
                    mask={
                      Array [
                        /\\\\d/,
                        /\\\\d/,
                        ":",
                        /\\\\d/,
                        /\\\\d/,
                      ]
                    }
                    name="hours"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onInput={[Function]}
                    placeholder="00:00"
                    type="text"
                  />
                </reactTextMask>
              </div>
            </div>
          </div>
          <Footer
            id="123"
            onReloadNodes={[Function]}
            processId="123"
            query=""
          >
            <div
              className="sheet-footer sheet-footer-btn-block-sm-down"
            >
              <div
                className="btn-group"
              >
                <div
                  className="btn-group-item"
                >
                  <button
                    className="btn btn-primary"
                    onClick={[Function]}
                    type="button"
                  >
                    update
                  </button>
                </div>
                <div
                  className="btn-group-item"
                >
                  <withRouter()
                    className="btn btn-secondary"
                  >
                    <Component
                      className="btn btn-secondary"
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "match": Object {
                              "params": Object {
                                "page": 1,
                                "search": undefined,
                                "sort": undefined,
                              },
                            },
                            "pathname": "/processes/1/10/title%3Aasc",
                            "search": "?backPath=%2F",
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "match": Object {
                            "params": Object {
                              "page": 1,
                              "search": undefined,
                              "sort": undefined,
                            },
                          },
                          "pathname": "/processes/1/10/title%3Aasc",
                          "search": "?backPath=%2F",
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <BackLinkWrapper
                        backPath="/"
                        className="btn btn-secondary"
                        currentPath="/processes/1/10/title%3Aasc?backPath=%2F"
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "match": Object {
                                  "params": Object {
                                    "page": 1,
                                    "search": undefined,
                                    "sort": undefined,
                                  },
                                },
                                "pathname": "/processes/1/10/title%3Aasc",
                                "search": "?backPath=%2F",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "match": Object {
                                "params": Object {
                                  "page": 1,
                                  "search": undefined,
                                  "sort": undefined,
                                },
                              },
                              "pathname": "/processes/1/10/title%3Aasc",
                              "search": "?backPath=%2F",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                      >
                        <Link
                          className="btn btn-secondary"
                          to="/"
                        >
                          <a
                            className="btn btn-secondary"
                            href="/"
                            onClick={[Function]}
                          >
                            cancel
                          </a>
                        </Link>
                      </BackLinkWrapper>
                    </Component>
                  </withRouter()>
                </div>
              </div>
            </div>
          </Footer>
        </form>
      </Body>
    </Router>
  </MemoryRouter>
</MockRouter>
`;
