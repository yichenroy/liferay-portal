def slaStatuses;
def slaStatusMap = new HashMap();
def statusInstanceIds = new HashSet();
def taskNameInstanceIds = new HashSet();
def taskNames;

for (state in states) {
	if (state == null) {
		continue;
	}

	slaStatuses = state.slaStatuses;

	for (entry in state.slaStatusMap.entrySet()) {
		slaStatusMap.merge(entry.key, entry.value, (slaStatus1, slaStatus2) -> {
			if (slaStatus1.equals(slaStatus2)) {
				return slaStatus1;
			}
			else if (slaStatus1.equals('overdue') ||
					 slaStatus2.equals('overdue')) {

				return 'overdue';
			}
			else {
				return 'onTime';
			}
		});
	}

	statusInstanceIds.addAll(state.statusInstanceIds);

	taskNameInstanceIds.addAll(state.taskNameInstanceIds);

	taskNames = state.taskNames;
}

def instanceCount = 0;

for (instanceId in statusInstanceIds) {
	if ((taskNames == null) || taskNameInstanceIds.contains(instanceId)) {
		if (slaStatuses == null) {
			instanceCount += 1;
		}
		else if (slaStatuses.contains('OnTime') &&
				 slaStatusMap.get(instanceId).equals('onTime')) {

			instanceCount += 1;
		}
		else if (slaStatuses.contains('Overdue') &&
				 slaStatusMap.get(instanceId).equals('overdue')) {

			instanceCount += 1;
		}
		else if (slaStatuses.contains('Untracked') &&
				 slaStatusMap.get(instanceId).equals('untracked')) {

			instanceCount += 1;
		}	
	}
}

return instanceCount;