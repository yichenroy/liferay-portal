/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.shipping.engine.fixed.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel;
import com.liferay.commerce.shipping.engine.fixed.service.CShippingFixedOptionRelLocalService;
import com.liferay.commerce.shipping.engine.fixed.service.persistence.CShippingFixedOptionRelFinder;
import com.liferay.commerce.shipping.engine.fixed.service.persistence.CShippingFixedOptionRelPersistence;
import com.liferay.commerce.shipping.engine.fixed.service.persistence.CommerceShippingFixedOptionPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the c shipping fixed option rel local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.commerce.shipping.engine.fixed.service.impl.CShippingFixedOptionRelLocalServiceImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see com.liferay.commerce.shipping.engine.fixed.service.impl.CShippingFixedOptionRelLocalServiceImpl
 * @see com.liferay.commerce.shipping.engine.fixed.service.CShippingFixedOptionRelLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CShippingFixedOptionRelLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CShippingFixedOptionRelLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.commerce.shipping.engine.fixed.service.CShippingFixedOptionRelLocalServiceUtil} to access the c shipping fixed option rel local service.
	 */

	/**
	 * Adds the c shipping fixed option rel to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cShippingFixedOptionRel the c shipping fixed option rel
	 * @return the c shipping fixed option rel that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CShippingFixedOptionRel addCShippingFixedOptionRel(
		CShippingFixedOptionRel cShippingFixedOptionRel) {
		cShippingFixedOptionRel.setNew(true);

		return cShippingFixedOptionRelPersistence.update(cShippingFixedOptionRel);
	}

	/**
	 * Creates a new c shipping fixed option rel with the primary key. Does not add the c shipping fixed option rel to the database.
	 *
	 * @param CShippingFixedOptionRelId the primary key for the new c shipping fixed option rel
	 * @return the new c shipping fixed option rel
	 */
	@Override
	public CShippingFixedOptionRel createCShippingFixedOptionRel(
		long CShippingFixedOptionRelId) {
		return cShippingFixedOptionRelPersistence.create(CShippingFixedOptionRelId);
	}

	/**
	 * Deletes the c shipping fixed option rel with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param CShippingFixedOptionRelId the primary key of the c shipping fixed option rel
	 * @return the c shipping fixed option rel that was removed
	 * @throws PortalException if a c shipping fixed option rel with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CShippingFixedOptionRel deleteCShippingFixedOptionRel(
		long CShippingFixedOptionRelId) throws PortalException {
		return cShippingFixedOptionRelPersistence.remove(CShippingFixedOptionRelId);
	}

	/**
	 * Deletes the c shipping fixed option rel from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cShippingFixedOptionRel the c shipping fixed option rel
	 * @return the c shipping fixed option rel that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CShippingFixedOptionRel deleteCShippingFixedOptionRel(
		CShippingFixedOptionRel cShippingFixedOptionRel) {
		return cShippingFixedOptionRelPersistence.remove(cShippingFixedOptionRel);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CShippingFixedOptionRel.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cShippingFixedOptionRelPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.shipping.engine.fixed.model.impl.CShippingFixedOptionRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cShippingFixedOptionRelPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.shipping.engine.fixed.model.impl.CShippingFixedOptionRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cShippingFixedOptionRelPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cShippingFixedOptionRelPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cShippingFixedOptionRelPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CShippingFixedOptionRel fetchCShippingFixedOptionRel(
		long CShippingFixedOptionRelId) {
		return cShippingFixedOptionRelPersistence.fetchByPrimaryKey(CShippingFixedOptionRelId);
	}

	/**
	 * Returns the c shipping fixed option rel with the primary key.
	 *
	 * @param CShippingFixedOptionRelId the primary key of the c shipping fixed option rel
	 * @return the c shipping fixed option rel
	 * @throws PortalException if a c shipping fixed option rel with the primary key could not be found
	 */
	@Override
	public CShippingFixedOptionRel getCShippingFixedOptionRel(
		long CShippingFixedOptionRelId) throws PortalException {
		return cShippingFixedOptionRelPersistence.findByPrimaryKey(CShippingFixedOptionRelId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cShippingFixedOptionRelLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CShippingFixedOptionRel.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"CShippingFixedOptionRelId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cShippingFixedOptionRelLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CShippingFixedOptionRel.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"CShippingFixedOptionRelId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cShippingFixedOptionRelLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CShippingFixedOptionRel.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"CShippingFixedOptionRelId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cShippingFixedOptionRelLocalService.deleteCShippingFixedOptionRel((CShippingFixedOptionRel)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cShippingFixedOptionRelPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the c shipping fixed option rels.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.shipping.engine.fixed.model.impl.CShippingFixedOptionRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of c shipping fixed option rels
	 * @param end the upper bound of the range of c shipping fixed option rels (not inclusive)
	 * @return the range of c shipping fixed option rels
	 */
	@Override
	public List<CShippingFixedOptionRel> getCShippingFixedOptionRels(
		int start, int end) {
		return cShippingFixedOptionRelPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of c shipping fixed option rels.
	 *
	 * @return the number of c shipping fixed option rels
	 */
	@Override
	public int getCShippingFixedOptionRelsCount() {
		return cShippingFixedOptionRelPersistence.countAll();
	}

	/**
	 * Updates the c shipping fixed option rel in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cShippingFixedOptionRel the c shipping fixed option rel
	 * @return the c shipping fixed option rel that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CShippingFixedOptionRel updateCShippingFixedOptionRel(
		CShippingFixedOptionRel cShippingFixedOptionRel) {
		return cShippingFixedOptionRelPersistence.update(cShippingFixedOptionRel);
	}

	/**
	 * Returns the commerce shipping fixed option local service.
	 *
	 * @return the commerce shipping fixed option local service
	 */
	public com.liferay.commerce.shipping.engine.fixed.service.CommerceShippingFixedOptionLocalService getCommerceShippingFixedOptionLocalService() {
		return commerceShippingFixedOptionLocalService;
	}

	/**
	 * Sets the commerce shipping fixed option local service.
	 *
	 * @param commerceShippingFixedOptionLocalService the commerce shipping fixed option local service
	 */
	public void setCommerceShippingFixedOptionLocalService(
		com.liferay.commerce.shipping.engine.fixed.service.CommerceShippingFixedOptionLocalService commerceShippingFixedOptionLocalService) {
		this.commerceShippingFixedOptionLocalService = commerceShippingFixedOptionLocalService;
	}

	/**
	 * Returns the commerce shipping fixed option persistence.
	 *
	 * @return the commerce shipping fixed option persistence
	 */
	public CommerceShippingFixedOptionPersistence getCommerceShippingFixedOptionPersistence() {
		return commerceShippingFixedOptionPersistence;
	}

	/**
	 * Sets the commerce shipping fixed option persistence.
	 *
	 * @param commerceShippingFixedOptionPersistence the commerce shipping fixed option persistence
	 */
	public void setCommerceShippingFixedOptionPersistence(
		CommerceShippingFixedOptionPersistence commerceShippingFixedOptionPersistence) {
		this.commerceShippingFixedOptionPersistence = commerceShippingFixedOptionPersistence;
	}

	/**
	 * Returns the c shipping fixed option rel local service.
	 *
	 * @return the c shipping fixed option rel local service
	 */
	public CShippingFixedOptionRelLocalService getCShippingFixedOptionRelLocalService() {
		return cShippingFixedOptionRelLocalService;
	}

	/**
	 * Sets the c shipping fixed option rel local service.
	 *
	 * @param cShippingFixedOptionRelLocalService the c shipping fixed option rel local service
	 */
	public void setCShippingFixedOptionRelLocalService(
		CShippingFixedOptionRelLocalService cShippingFixedOptionRelLocalService) {
		this.cShippingFixedOptionRelLocalService = cShippingFixedOptionRelLocalService;
	}

	/**
	 * Returns the c shipping fixed option rel persistence.
	 *
	 * @return the c shipping fixed option rel persistence
	 */
	public CShippingFixedOptionRelPersistence getCShippingFixedOptionRelPersistence() {
		return cShippingFixedOptionRelPersistence;
	}

	/**
	 * Sets the c shipping fixed option rel persistence.
	 *
	 * @param cShippingFixedOptionRelPersistence the c shipping fixed option rel persistence
	 */
	public void setCShippingFixedOptionRelPersistence(
		CShippingFixedOptionRelPersistence cShippingFixedOptionRelPersistence) {
		this.cShippingFixedOptionRelPersistence = cShippingFixedOptionRelPersistence;
	}

	/**
	 * Returns the c shipping fixed option rel finder.
	 *
	 * @return the c shipping fixed option rel finder
	 */
	public CShippingFixedOptionRelFinder getCShippingFixedOptionRelFinder() {
		return cShippingFixedOptionRelFinder;
	}

	/**
	 * Sets the c shipping fixed option rel finder.
	 *
	 * @param cShippingFixedOptionRelFinder the c shipping fixed option rel finder
	 */
	public void setCShippingFixedOptionRelFinder(
		CShippingFixedOptionRelFinder cShippingFixedOptionRelFinder) {
		this.cShippingFixedOptionRelFinder = cShippingFixedOptionRelFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel",
			cShippingFixedOptionRelLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CShippingFixedOptionRelLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CShippingFixedOptionRel.class;
	}

	protected String getModelClassName() {
		return CShippingFixedOptionRel.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cShippingFixedOptionRelPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.commerce.shipping.engine.fixed.service.CommerceShippingFixedOptionLocalService.class)
	protected com.liferay.commerce.shipping.engine.fixed.service.CommerceShippingFixedOptionLocalService commerceShippingFixedOptionLocalService;
	@BeanReference(type = CommerceShippingFixedOptionPersistence.class)
	protected CommerceShippingFixedOptionPersistence commerceShippingFixedOptionPersistence;
	@BeanReference(type = CShippingFixedOptionRelLocalService.class)
	protected CShippingFixedOptionRelLocalService cShippingFixedOptionRelLocalService;
	@BeanReference(type = CShippingFixedOptionRelPersistence.class)
	protected CShippingFixedOptionRelPersistence cShippingFixedOptionRelPersistence;
	@BeanReference(type = CShippingFixedOptionRelFinder.class)
	protected CShippingFixedOptionRelFinder cShippingFixedOptionRelFinder;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}