/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.shipping.engine.fixed.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel;
import com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRelModel;
import com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRelSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CShippingFixedOptionRel service. Represents a row in the &quot;CShippingFixedOptionRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CShippingFixedOptionRelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CShippingFixedOptionRelImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see CShippingFixedOptionRelImpl
 * @see CShippingFixedOptionRel
 * @see CShippingFixedOptionRelModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CShippingFixedOptionRelModelImpl extends BaseModelImpl<CShippingFixedOptionRel>
	implements CShippingFixedOptionRelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c shipping fixed option rel model instance should use the {@link CShippingFixedOptionRel} interface instead.
	 */
	public static final String TABLE_NAME = "CShippingFixedOptionRel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CShippingFixedOptionRelId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "commerceShippingMethodId", Types.BIGINT },
			{ "commerceShippingFixedOptionId", Types.BIGINT },
			{ "commerceWarehouseId", Types.BIGINT },
			{ "commerceCountryId", Types.BIGINT },
			{ "commerceRegionId", Types.BIGINT },
			{ "zip", Types.VARCHAR },
			{ "weightFrom", Types.DOUBLE },
			{ "weightTo", Types.DOUBLE },
			{ "fixedPrice", Types.DOUBLE },
			{ "rateUnitWeightPrice", Types.DOUBLE },
			{ "ratePercentage", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CShippingFixedOptionRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commerceShippingMethodId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceShippingFixedOptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceWarehouseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceCountryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commerceRegionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("weightFrom", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("weightTo", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("fixedPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("rateUnitWeightPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ratePercentage", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table CShippingFixedOptionRel (CShippingFixedOptionRelId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,commerceShippingMethodId LONG,commerceShippingFixedOptionId LONG,commerceWarehouseId LONG,commerceCountryId LONG,commerceRegionId LONG,zip VARCHAR(75) null,weightFrom DOUBLE,weightTo DOUBLE,fixedPrice DOUBLE,rateUnitWeightPrice DOUBLE,ratePercentage DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table CShippingFixedOptionRel";
	public static final String ORDER_BY_JPQL = " ORDER BY cShippingFixedOptionRel.commerceCountryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CShippingFixedOptionRel.commerceCountryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.shipping.engine.fixed.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.shipping.engine.fixed.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.shipping.engine.fixed.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel"),
			true);
	public static final long COMMERCESHIPPINGFIXEDOPTIONID_COLUMN_BITMASK = 1L;
	public static final long COMMERCESHIPPINGMETHODID_COLUMN_BITMASK = 2L;
	public static final long COMMERCECOUNTRYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CShippingFixedOptionRel toModel(
		CShippingFixedOptionRelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CShippingFixedOptionRel model = new CShippingFixedOptionRelImpl();

		model.setCShippingFixedOptionRelId(soapModel.getCShippingFixedOptionRelId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommerceShippingMethodId(soapModel.getCommerceShippingMethodId());
		model.setCommerceShippingFixedOptionId(soapModel.getCommerceShippingFixedOptionId());
		model.setCommerceWarehouseId(soapModel.getCommerceWarehouseId());
		model.setCommerceCountryId(soapModel.getCommerceCountryId());
		model.setCommerceRegionId(soapModel.getCommerceRegionId());
		model.setZip(soapModel.getZip());
		model.setWeightFrom(soapModel.getWeightFrom());
		model.setWeightTo(soapModel.getWeightTo());
		model.setFixedPrice(soapModel.getFixedPrice());
		model.setRateUnitWeightPrice(soapModel.getRateUnitWeightPrice());
		model.setRatePercentage(soapModel.getRatePercentage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CShippingFixedOptionRel> toModels(
		CShippingFixedOptionRelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CShippingFixedOptionRel> models = new ArrayList<CShippingFixedOptionRel>(soapModels.length);

		for (CShippingFixedOptionRelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.shipping.engine.fixed.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel"));

	public CShippingFixedOptionRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CShippingFixedOptionRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCShippingFixedOptionRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CShippingFixedOptionRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CShippingFixedOptionRel.class;
	}

	@Override
	public String getModelClassName() {
		return CShippingFixedOptionRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("CShippingFixedOptionRelId",
			getCShippingFixedOptionRelId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commerceShippingMethodId", getCommerceShippingMethodId());
		attributes.put("commerceShippingFixedOptionId",
			getCommerceShippingFixedOptionId());
		attributes.put("commerceWarehouseId", getCommerceWarehouseId());
		attributes.put("commerceCountryId", getCommerceCountryId());
		attributes.put("commerceRegionId", getCommerceRegionId());
		attributes.put("zip", getZip());
		attributes.put("weightFrom", getWeightFrom());
		attributes.put("weightTo", getWeightTo());
		attributes.put("fixedPrice", getFixedPrice());
		attributes.put("rateUnitWeightPrice", getRateUnitWeightPrice());
		attributes.put("ratePercentage", getRatePercentage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long CShippingFixedOptionRelId = (Long)attributes.get(
				"CShippingFixedOptionRelId");

		if (CShippingFixedOptionRelId != null) {
			setCShippingFixedOptionRelId(CShippingFixedOptionRelId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commerceShippingMethodId = (Long)attributes.get(
				"commerceShippingMethodId");

		if (commerceShippingMethodId != null) {
			setCommerceShippingMethodId(commerceShippingMethodId);
		}

		Long commerceShippingFixedOptionId = (Long)attributes.get(
				"commerceShippingFixedOptionId");

		if (commerceShippingFixedOptionId != null) {
			setCommerceShippingFixedOptionId(commerceShippingFixedOptionId);
		}

		Long commerceWarehouseId = (Long)attributes.get("commerceWarehouseId");

		if (commerceWarehouseId != null) {
			setCommerceWarehouseId(commerceWarehouseId);
		}

		Long commerceCountryId = (Long)attributes.get("commerceCountryId");

		if (commerceCountryId != null) {
			setCommerceCountryId(commerceCountryId);
		}

		Long commerceRegionId = (Long)attributes.get("commerceRegionId");

		if (commerceRegionId != null) {
			setCommerceRegionId(commerceRegionId);
		}

		String zip = (String)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		Double weightFrom = (Double)attributes.get("weightFrom");

		if (weightFrom != null) {
			setWeightFrom(weightFrom);
		}

		Double weightTo = (Double)attributes.get("weightTo");

		if (weightTo != null) {
			setWeightTo(weightTo);
		}

		Double fixedPrice = (Double)attributes.get("fixedPrice");

		if (fixedPrice != null) {
			setFixedPrice(fixedPrice);
		}

		Double rateUnitWeightPrice = (Double)attributes.get(
				"rateUnitWeightPrice");

		if (rateUnitWeightPrice != null) {
			setRateUnitWeightPrice(rateUnitWeightPrice);
		}

		Double ratePercentage = (Double)attributes.get("ratePercentage");

		if (ratePercentage != null) {
			setRatePercentage(ratePercentage);
		}
	}

	@JSON
	@Override
	public long getCShippingFixedOptionRelId() {
		return _CShippingFixedOptionRelId;
	}

	@Override
	public void setCShippingFixedOptionRelId(long CShippingFixedOptionRelId) {
		_CShippingFixedOptionRelId = CShippingFixedOptionRelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCommerceShippingMethodId() {
		return _commerceShippingMethodId;
	}

	@Override
	public void setCommerceShippingMethodId(long commerceShippingMethodId) {
		_columnBitmask |= COMMERCESHIPPINGMETHODID_COLUMN_BITMASK;

		if (!_setOriginalCommerceShippingMethodId) {
			_setOriginalCommerceShippingMethodId = true;

			_originalCommerceShippingMethodId = _commerceShippingMethodId;
		}

		_commerceShippingMethodId = commerceShippingMethodId;
	}

	public long getOriginalCommerceShippingMethodId() {
		return _originalCommerceShippingMethodId;
	}

	@JSON
	@Override
	public long getCommerceShippingFixedOptionId() {
		return _commerceShippingFixedOptionId;
	}

	@Override
	public void setCommerceShippingFixedOptionId(
		long commerceShippingFixedOptionId) {
		_columnBitmask |= COMMERCESHIPPINGFIXEDOPTIONID_COLUMN_BITMASK;

		if (!_setOriginalCommerceShippingFixedOptionId) {
			_setOriginalCommerceShippingFixedOptionId = true;

			_originalCommerceShippingFixedOptionId = _commerceShippingFixedOptionId;
		}

		_commerceShippingFixedOptionId = commerceShippingFixedOptionId;
	}

	public long getOriginalCommerceShippingFixedOptionId() {
		return _originalCommerceShippingFixedOptionId;
	}

	@JSON
	@Override
	public long getCommerceWarehouseId() {
		return _commerceWarehouseId;
	}

	@Override
	public void setCommerceWarehouseId(long commerceWarehouseId) {
		_commerceWarehouseId = commerceWarehouseId;
	}

	@JSON
	@Override
	public long getCommerceCountryId() {
		return _commerceCountryId;
	}

	@Override
	public void setCommerceCountryId(long commerceCountryId) {
		_columnBitmask = -1L;

		_commerceCountryId = commerceCountryId;
	}

	@JSON
	@Override
	public long getCommerceRegionId() {
		return _commerceRegionId;
	}

	@Override
	public void setCommerceRegionId(long commerceRegionId) {
		_commerceRegionId = commerceRegionId;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public double getWeightFrom() {
		return _weightFrom;
	}

	@Override
	public void setWeightFrom(double weightFrom) {
		_weightFrom = weightFrom;
	}

	@JSON
	@Override
	public double getWeightTo() {
		return _weightTo;
	}

	@Override
	public void setWeightTo(double weightTo) {
		_weightTo = weightTo;
	}

	@JSON
	@Override
	public double getFixedPrice() {
		return _fixedPrice;
	}

	@Override
	public void setFixedPrice(double fixedPrice) {
		_fixedPrice = fixedPrice;
	}

	@JSON
	@Override
	public double getRateUnitWeightPrice() {
		return _rateUnitWeightPrice;
	}

	@Override
	public void setRateUnitWeightPrice(double rateUnitWeightPrice) {
		_rateUnitWeightPrice = rateUnitWeightPrice;
	}

	@JSON
	@Override
	public double getRatePercentage() {
		return _ratePercentage;
	}

	@Override
	public void setRatePercentage(double ratePercentage) {
		_ratePercentage = ratePercentage;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CShippingFixedOptionRel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CShippingFixedOptionRel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CShippingFixedOptionRel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CShippingFixedOptionRelImpl cShippingFixedOptionRelImpl = new CShippingFixedOptionRelImpl();

		cShippingFixedOptionRelImpl.setCShippingFixedOptionRelId(getCShippingFixedOptionRelId());
		cShippingFixedOptionRelImpl.setGroupId(getGroupId());
		cShippingFixedOptionRelImpl.setCompanyId(getCompanyId());
		cShippingFixedOptionRelImpl.setUserId(getUserId());
		cShippingFixedOptionRelImpl.setUserName(getUserName());
		cShippingFixedOptionRelImpl.setCreateDate(getCreateDate());
		cShippingFixedOptionRelImpl.setModifiedDate(getModifiedDate());
		cShippingFixedOptionRelImpl.setCommerceShippingMethodId(getCommerceShippingMethodId());
		cShippingFixedOptionRelImpl.setCommerceShippingFixedOptionId(getCommerceShippingFixedOptionId());
		cShippingFixedOptionRelImpl.setCommerceWarehouseId(getCommerceWarehouseId());
		cShippingFixedOptionRelImpl.setCommerceCountryId(getCommerceCountryId());
		cShippingFixedOptionRelImpl.setCommerceRegionId(getCommerceRegionId());
		cShippingFixedOptionRelImpl.setZip(getZip());
		cShippingFixedOptionRelImpl.setWeightFrom(getWeightFrom());
		cShippingFixedOptionRelImpl.setWeightTo(getWeightTo());
		cShippingFixedOptionRelImpl.setFixedPrice(getFixedPrice());
		cShippingFixedOptionRelImpl.setRateUnitWeightPrice(getRateUnitWeightPrice());
		cShippingFixedOptionRelImpl.setRatePercentage(getRatePercentage());

		cShippingFixedOptionRelImpl.resetOriginalValues();

		return cShippingFixedOptionRelImpl;
	}

	@Override
	public int compareTo(CShippingFixedOptionRel cShippingFixedOptionRel) {
		int value = 0;

		if (getCommerceCountryId() < cShippingFixedOptionRel.getCommerceCountryId()) {
			value = -1;
		}
		else if (getCommerceCountryId() > cShippingFixedOptionRel.getCommerceCountryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CShippingFixedOptionRel)) {
			return false;
		}

		CShippingFixedOptionRel cShippingFixedOptionRel = (CShippingFixedOptionRel)obj;

		long primaryKey = cShippingFixedOptionRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CShippingFixedOptionRelModelImpl cShippingFixedOptionRelModelImpl = this;

		cShippingFixedOptionRelModelImpl._setModifiedDate = false;

		cShippingFixedOptionRelModelImpl._originalCommerceShippingMethodId = cShippingFixedOptionRelModelImpl._commerceShippingMethodId;

		cShippingFixedOptionRelModelImpl._setOriginalCommerceShippingMethodId = false;

		cShippingFixedOptionRelModelImpl._originalCommerceShippingFixedOptionId = cShippingFixedOptionRelModelImpl._commerceShippingFixedOptionId;

		cShippingFixedOptionRelModelImpl._setOriginalCommerceShippingFixedOptionId = false;

		cShippingFixedOptionRelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CShippingFixedOptionRel> toCacheModel() {
		CShippingFixedOptionRelCacheModel cShippingFixedOptionRelCacheModel = new CShippingFixedOptionRelCacheModel();

		cShippingFixedOptionRelCacheModel.CShippingFixedOptionRelId = getCShippingFixedOptionRelId();

		cShippingFixedOptionRelCacheModel.groupId = getGroupId();

		cShippingFixedOptionRelCacheModel.companyId = getCompanyId();

		cShippingFixedOptionRelCacheModel.userId = getUserId();

		cShippingFixedOptionRelCacheModel.userName = getUserName();

		String userName = cShippingFixedOptionRelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cShippingFixedOptionRelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cShippingFixedOptionRelCacheModel.createDate = createDate.getTime();
		}
		else {
			cShippingFixedOptionRelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cShippingFixedOptionRelCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cShippingFixedOptionRelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cShippingFixedOptionRelCacheModel.commerceShippingMethodId = getCommerceShippingMethodId();

		cShippingFixedOptionRelCacheModel.commerceShippingFixedOptionId = getCommerceShippingFixedOptionId();

		cShippingFixedOptionRelCacheModel.commerceWarehouseId = getCommerceWarehouseId();

		cShippingFixedOptionRelCacheModel.commerceCountryId = getCommerceCountryId();

		cShippingFixedOptionRelCacheModel.commerceRegionId = getCommerceRegionId();

		cShippingFixedOptionRelCacheModel.zip = getZip();

		String zip = cShippingFixedOptionRelCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			cShippingFixedOptionRelCacheModel.zip = null;
		}

		cShippingFixedOptionRelCacheModel.weightFrom = getWeightFrom();

		cShippingFixedOptionRelCacheModel.weightTo = getWeightTo();

		cShippingFixedOptionRelCacheModel.fixedPrice = getFixedPrice();

		cShippingFixedOptionRelCacheModel.rateUnitWeightPrice = getRateUnitWeightPrice();

		cShippingFixedOptionRelCacheModel.ratePercentage = getRatePercentage();

		return cShippingFixedOptionRelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{CShippingFixedOptionRelId=");
		sb.append(getCShippingFixedOptionRelId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commerceShippingMethodId=");
		sb.append(getCommerceShippingMethodId());
		sb.append(", commerceShippingFixedOptionId=");
		sb.append(getCommerceShippingFixedOptionId());
		sb.append(", commerceWarehouseId=");
		sb.append(getCommerceWarehouseId());
		sb.append(", commerceCountryId=");
		sb.append(getCommerceCountryId());
		sb.append(", commerceRegionId=");
		sb.append(getCommerceRegionId());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", weightFrom=");
		sb.append(getWeightFrom());
		sb.append(", weightTo=");
		sb.append(getWeightTo());
		sb.append(", fixedPrice=");
		sb.append(getFixedPrice());
		sb.append(", rateUnitWeightPrice=");
		sb.append(getRateUnitWeightPrice());
		sb.append(", ratePercentage=");
		sb.append(getRatePercentage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.shipping.engine.fixed.model.CShippingFixedOptionRel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>CShippingFixedOptionRelId</column-name><column-value><![CDATA[");
		sb.append(getCShippingFixedOptionRelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceShippingMethodId</column-name><column-value><![CDATA[");
		sb.append(getCommerceShippingMethodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceShippingFixedOptionId</column-name><column-value><![CDATA[");
		sb.append(getCommerceShippingFixedOptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceWarehouseId</column-name><column-value><![CDATA[");
		sb.append(getCommerceWarehouseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceCountryId</column-name><column-value><![CDATA[");
		sb.append(getCommerceCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceRegionId</column-name><column-value><![CDATA[");
		sb.append(getCommerceRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weightFrom</column-name><column-value><![CDATA[");
		sb.append(getWeightFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weightTo</column-name><column-value><![CDATA[");
		sb.append(getWeightTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fixedPrice</column-name><column-value><![CDATA[");
		sb.append(getFixedPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateUnitWeightPrice</column-name><column-value><![CDATA[");
		sb.append(getRateUnitWeightPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratePercentage</column-name><column-value><![CDATA[");
		sb.append(getRatePercentage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CShippingFixedOptionRel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CShippingFixedOptionRel.class
		};
	private long _CShippingFixedOptionRelId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _commerceShippingMethodId;
	private long _originalCommerceShippingMethodId;
	private boolean _setOriginalCommerceShippingMethodId;
	private long _commerceShippingFixedOptionId;
	private long _originalCommerceShippingFixedOptionId;
	private boolean _setOriginalCommerceShippingFixedOptionId;
	private long _commerceWarehouseId;
	private long _commerceCountryId;
	private long _commerceRegionId;
	private String _zip;
	private double _weightFrom;
	private double _weightTo;
	private double _fixedPrice;
	private double _rateUnitWeightPrice;
	private double _ratePercentage;
	private long _columnBitmask;
	private CShippingFixedOptionRel _escapedModel;
}