/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.cloud.client.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder;
import com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrderModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CommerceCloudForecastOrder service. Represents a row in the &quot;CommerceCloudForecastOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceCloudForecastOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceCloudForecastOrderImpl}.
 * </p>
 *
 * @author Andrea Di Giorgi
 * @see CommerceCloudForecastOrderImpl
 * @see CommerceCloudForecastOrder
 * @see CommerceCloudForecastOrderModel
 * @generated
 */
@ProviderType
public class CommerceCloudForecastOrderModelImpl extends BaseModelImpl<CommerceCloudForecastOrder>
	implements CommerceCloudForecastOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce cloud forecast order model instance should use the {@link CommerceCloudForecastOrder} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceCloudForecastOrder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commerceCloudForecastOrderId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "commerceOrderId", Types.BIGINT },
			{ "syncDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("commerceCloudForecastOrderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commerceOrderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("syncDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceCloudForecastOrder (commerceCloudForecastOrderId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,commerceOrderId LONG,syncDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceCloudForecastOrder";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceCloudForecastOrder.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceCloudForecastOrder.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.cloud.client.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.cloud.client.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.cloud.client.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder"),
			true);
	public static final long COMMERCEORDERID_COLUMN_BITMASK = 1L;
	public static final long SYNCDATE_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.cloud.client.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder"));

	public CommerceCloudForecastOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceCloudForecastOrderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceCloudForecastOrderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceCloudForecastOrderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceCloudForecastOrder.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceCloudForecastOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commerceCloudForecastOrderId",
			getCommerceCloudForecastOrderId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("commerceOrderId", getCommerceOrderId());
		attributes.put("syncDate", getSyncDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commerceCloudForecastOrderId = (Long)attributes.get(
				"commerceCloudForecastOrderId");

		if (commerceCloudForecastOrderId != null) {
			setCommerceCloudForecastOrderId(commerceCloudForecastOrderId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long commerceOrderId = (Long)attributes.get("commerceOrderId");

		if (commerceOrderId != null) {
			setCommerceOrderId(commerceOrderId);
		}

		Date syncDate = (Date)attributes.get("syncDate");

		if (syncDate != null) {
			setSyncDate(syncDate);
		}
	}

	@Override
	public long getCommerceCloudForecastOrderId() {
		return _commerceCloudForecastOrderId;
	}

	@Override
	public void setCommerceCloudForecastOrderId(
		long commerceCloudForecastOrderId) {
		_commerceCloudForecastOrderId = commerceCloudForecastOrderId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public long getCommerceOrderId() {
		return _commerceOrderId;
	}

	@Override
	public void setCommerceOrderId(long commerceOrderId) {
		_columnBitmask |= COMMERCEORDERID_COLUMN_BITMASK;

		if (!_setOriginalCommerceOrderId) {
			_setOriginalCommerceOrderId = true;

			_originalCommerceOrderId = _commerceOrderId;
		}

		_commerceOrderId = commerceOrderId;
	}

	public long getOriginalCommerceOrderId() {
		return _originalCommerceOrderId;
	}

	@Override
	public Date getSyncDate() {
		return _syncDate;
	}

	@Override
	public void setSyncDate(Date syncDate) {
		_columnBitmask |= SYNCDATE_COLUMN_BITMASK;

		if (_originalSyncDate == null) {
			_originalSyncDate = _syncDate;
		}

		_syncDate = syncDate;
	}

	public Date getOriginalSyncDate() {
		return _originalSyncDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceCloudForecastOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceCloudForecastOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceCloudForecastOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceCloudForecastOrderImpl commerceCloudForecastOrderImpl = new CommerceCloudForecastOrderImpl();

		commerceCloudForecastOrderImpl.setCommerceCloudForecastOrderId(getCommerceCloudForecastOrderId());
		commerceCloudForecastOrderImpl.setGroupId(getGroupId());
		commerceCloudForecastOrderImpl.setCompanyId(getCompanyId());
		commerceCloudForecastOrderImpl.setCreateDate(getCreateDate());
		commerceCloudForecastOrderImpl.setCommerceOrderId(getCommerceOrderId());
		commerceCloudForecastOrderImpl.setSyncDate(getSyncDate());

		commerceCloudForecastOrderImpl.resetOriginalValues();

		return commerceCloudForecastOrderImpl;
	}

	@Override
	public int compareTo(CommerceCloudForecastOrder commerceCloudForecastOrder) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				commerceCloudForecastOrder.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceCloudForecastOrder)) {
			return false;
		}

		CommerceCloudForecastOrder commerceCloudForecastOrder = (CommerceCloudForecastOrder)obj;

		long primaryKey = commerceCloudForecastOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceCloudForecastOrderModelImpl commerceCloudForecastOrderModelImpl = this;

		commerceCloudForecastOrderModelImpl._originalCommerceOrderId = commerceCloudForecastOrderModelImpl._commerceOrderId;

		commerceCloudForecastOrderModelImpl._setOriginalCommerceOrderId = false;

		commerceCloudForecastOrderModelImpl._originalSyncDate = commerceCloudForecastOrderModelImpl._syncDate;

		commerceCloudForecastOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceCloudForecastOrder> toCacheModel() {
		CommerceCloudForecastOrderCacheModel commerceCloudForecastOrderCacheModel =
			new CommerceCloudForecastOrderCacheModel();

		commerceCloudForecastOrderCacheModel.commerceCloudForecastOrderId = getCommerceCloudForecastOrderId();

		commerceCloudForecastOrderCacheModel.groupId = getGroupId();

		commerceCloudForecastOrderCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceCloudForecastOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceCloudForecastOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		commerceCloudForecastOrderCacheModel.commerceOrderId = getCommerceOrderId();

		Date syncDate = getSyncDate();

		if (syncDate != null) {
			commerceCloudForecastOrderCacheModel.syncDate = syncDate.getTime();
		}
		else {
			commerceCloudForecastOrderCacheModel.syncDate = Long.MIN_VALUE;
		}

		return commerceCloudForecastOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{commerceCloudForecastOrderId=");
		sb.append(getCommerceCloudForecastOrderId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", commerceOrderId=");
		sb.append(getCommerceOrderId());
		sb.append(", syncDate=");
		sb.append(getSyncDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.cloud.client.model.CommerceCloudForecastOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commerceCloudForecastOrderId</column-name><column-value><![CDATA[");
		sb.append(getCommerceCloudForecastOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceOrderId</column-name><column-value><![CDATA[");
		sb.append(getCommerceOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncDate</column-name><column-value><![CDATA[");
		sb.append(getSyncDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceCloudForecastOrder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceCloudForecastOrder.class, ModelWrapper.class
		};
	private long _commerceCloudForecastOrderId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private long _commerceOrderId;
	private long _originalCommerceOrderId;
	private boolean _setOriginalCommerceOrderId;
	private Date _syncDate;
	private Date _originalSyncDate;
	private long _columnBitmask;
	private CommerceCloudForecastOrder _escapedModel;
}