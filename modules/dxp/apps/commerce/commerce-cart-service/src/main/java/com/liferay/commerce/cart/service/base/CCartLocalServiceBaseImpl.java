/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.cart.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.cart.model.CCart;
import com.liferay.commerce.cart.service.CCartLocalService;
import com.liferay.commerce.cart.service.persistence.CCartItemPersistence;
import com.liferay.commerce.cart.service.persistence.CCartPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the c cart local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.commerce.cart.service.impl.CCartLocalServiceImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see com.liferay.commerce.cart.service.impl.CCartLocalServiceImpl
 * @see com.liferay.commerce.cart.service.CCartLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CCartLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CCartLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.commerce.cart.service.CCartLocalServiceUtil} to access the c cart local service.
	 */

	/**
	 * Adds the c cart to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cCart the c cart
	 * @return the c cart that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CCart addCCart(CCart cCart) {
		cCart.setNew(true);

		return cCartPersistence.update(cCart);
	}

	/**
	 * Creates a new c cart with the primary key. Does not add the c cart to the database.
	 *
	 * @param CCartId the primary key for the new c cart
	 * @return the new c cart
	 */
	@Override
	public CCart createCCart(long CCartId) {
		return cCartPersistence.create(CCartId);
	}

	/**
	 * Deletes the c cart with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param CCartId the primary key of the c cart
	 * @return the c cart that was removed
	 * @throws PortalException if a c cart with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CCart deleteCCart(long CCartId) throws PortalException {
		return cCartPersistence.remove(CCartId);
	}

	/**
	 * Deletes the c cart from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cCart the c cart
	 * @return the c cart that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CCart deleteCCart(CCart cCart) {
		return cCartPersistence.remove(cCart);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CCart.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cCartPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cCartPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cCartPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cCartPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cCartPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public CCart fetchCCart(long CCartId) {
		return cCartPersistence.fetchByPrimaryKey(CCartId);
	}

	/**
	 * Returns the c cart matching the UUID and group.
	 *
	 * @param uuid the c cart's UUID
	 * @param groupId the primary key of the group
	 * @return the matching c cart, or <code>null</code> if a matching c cart could not be found
	 */
	@Override
	public CCart fetchCCartByUuidAndGroupId(String uuid, long groupId) {
		return cCartPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the c cart with the primary key.
	 *
	 * @param CCartId the primary key of the c cart
	 * @return the c cart
	 * @throws PortalException if a c cart with the primary key could not be found
	 */
	@Override
	public CCart getCCart(long CCartId) throws PortalException {
		return cCartPersistence.findByPrimaryKey(CCartId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cCartLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CCart.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("CCartId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cCartLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CCart.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("CCartId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cCartLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CCart.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("CCartId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<CCart>() {
				@Override
				public void performAction(CCart cCart)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						cCart);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(CCart.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cCartLocalService.deleteCCart((CCart)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cCartPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the c carts matching the UUID and company.
	 *
	 * @param uuid the UUID of the c carts
	 * @param companyId the primary key of the company
	 * @return the matching c carts, or an empty list if no matches were found
	 */
	@Override
	public List<CCart> getCCartsByUuidAndCompanyId(String uuid, long companyId) {
		return cCartPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of c carts matching the UUID and company.
	 *
	 * @param uuid the UUID of the c carts
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of c carts
	 * @param end the upper bound of the range of c carts (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching c carts, or an empty list if no matches were found
	 */
	@Override
	public List<CCart> getCCartsByUuidAndCompanyId(String uuid, long companyId,
		int start, int end, OrderByComparator<CCart> orderByComparator) {
		return cCartPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the c cart matching the UUID and group.
	 *
	 * @param uuid the c cart's UUID
	 * @param groupId the primary key of the group
	 * @return the matching c cart
	 * @throws PortalException if a matching c cart could not be found
	 */
	@Override
	public CCart getCCartByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return cCartPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the c carts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of c carts
	 * @param end the upper bound of the range of c carts (not inclusive)
	 * @return the range of c carts
	 */
	@Override
	public List<CCart> getCCarts(int start, int end) {
		return cCartPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of c carts.
	 *
	 * @return the number of c carts
	 */
	@Override
	public int getCCartsCount() {
		return cCartPersistence.countAll();
	}

	/**
	 * Updates the c cart in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cCart the c cart
	 * @return the c cart that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CCart updateCCart(CCart cCart) {
		return cCartPersistence.update(cCart);
	}

	/**
	 * Returns the c cart local service.
	 *
	 * @return the c cart local service
	 */
	public CCartLocalService getCCartLocalService() {
		return cCartLocalService;
	}

	/**
	 * Sets the c cart local service.
	 *
	 * @param cCartLocalService the c cart local service
	 */
	public void setCCartLocalService(CCartLocalService cCartLocalService) {
		this.cCartLocalService = cCartLocalService;
	}

	/**
	 * Returns the c cart persistence.
	 *
	 * @return the c cart persistence
	 */
	public CCartPersistence getCCartPersistence() {
		return cCartPersistence;
	}

	/**
	 * Sets the c cart persistence.
	 *
	 * @param cCartPersistence the c cart persistence
	 */
	public void setCCartPersistence(CCartPersistence cCartPersistence) {
		this.cCartPersistence = cCartPersistence;
	}

	/**
	 * Returns the c cart item local service.
	 *
	 * @return the c cart item local service
	 */
	public com.liferay.commerce.cart.service.CCartItemLocalService getCCartItemLocalService() {
		return cCartItemLocalService;
	}

	/**
	 * Sets the c cart item local service.
	 *
	 * @param cCartItemLocalService the c cart item local service
	 */
	public void setCCartItemLocalService(
		com.liferay.commerce.cart.service.CCartItemLocalService cCartItemLocalService) {
		this.cCartItemLocalService = cCartItemLocalService;
	}

	/**
	 * Returns the c cart item persistence.
	 *
	 * @return the c cart item persistence
	 */
	public CCartItemPersistence getCCartItemPersistence() {
		return cCartItemPersistence;
	}

	/**
	 * Sets the c cart item persistence.
	 *
	 * @param cCartItemPersistence the c cart item persistence
	 */
	public void setCCartItemPersistence(
		CCartItemPersistence cCartItemPersistence) {
		this.cCartItemPersistence = cCartItemPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.commerce.cart.model.CCart",
			cCartLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.commerce.cart.model.CCart");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CCartLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CCart.class;
	}

	protected String getModelClassName() {
		return CCart.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cCartPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = CCartLocalService.class)
	protected CCartLocalService cCartLocalService;
	@BeanReference(type = CCartPersistence.class)
	protected CCartPersistence cCartPersistence;
	@BeanReference(type = com.liferay.commerce.cart.service.CCartItemLocalService.class)
	protected com.liferay.commerce.cart.service.CCartItemLocalService cCartItemLocalService;
	@BeanReference(type = CCartItemPersistence.class)
	protected CCartItemPersistence cCartItemPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}