/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.cart.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.cart.model.CCartItem;
import com.liferay.commerce.cart.service.CCartItemLocalService;
import com.liferay.commerce.cart.service.persistence.CCartItemPersistence;
import com.liferay.commerce.cart.service.persistence.CCartPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the c cart item local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.commerce.cart.service.impl.CCartItemLocalServiceImpl}.
 * </p>
 *
 * @author Alessio Antonio Rendina
 * @see com.liferay.commerce.cart.service.impl.CCartItemLocalServiceImpl
 * @see com.liferay.commerce.cart.service.CCartItemLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CCartItemLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CCartItemLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.commerce.cart.service.CCartItemLocalServiceUtil} to access the c cart item local service.
	 */

	/**
	 * Adds the c cart item to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cCartItem the c cart item
	 * @return the c cart item that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CCartItem addCCartItem(CCartItem cCartItem) {
		cCartItem.setNew(true);

		return cCartItemPersistence.update(cCartItem);
	}

	/**
	 * Creates a new c cart item with the primary key. Does not add the c cart item to the database.
	 *
	 * @param CCartItemId the primary key for the new c cart item
	 * @return the new c cart item
	 */
	@Override
	public CCartItem createCCartItem(long CCartItemId) {
		return cCartItemPersistence.create(CCartItemId);
	}

	/**
	 * Deletes the c cart item with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param CCartItemId the primary key of the c cart item
	 * @return the c cart item that was removed
	 * @throws PortalException if a c cart item with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CCartItem deleteCCartItem(long CCartItemId)
		throws PortalException {
		return cCartItemPersistence.remove(CCartItemId);
	}

	/**
	 * Deletes the c cart item from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cCartItem the c cart item
	 * @return the c cart item that was removed
	 * @throws PortalException
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CCartItem deleteCCartItem(CCartItem cCartItem)
		throws PortalException {
		return cCartItemPersistence.remove(cCartItem);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CCartItem.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cCartItemPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cCartItemPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cCartItemPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cCartItemPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cCartItemPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CCartItem fetchCCartItem(long CCartItemId) {
		return cCartItemPersistence.fetchByPrimaryKey(CCartItemId);
	}

	/**
	 * Returns the c cart item matching the UUID and group.
	 *
	 * @param uuid the c cart item's UUID
	 * @param groupId the primary key of the group
	 * @return the matching c cart item, or <code>null</code> if a matching c cart item could not be found
	 */
	@Override
	public CCartItem fetchCCartItemByUuidAndGroupId(String uuid, long groupId) {
		return cCartItemPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the c cart item with the primary key.
	 *
	 * @param CCartItemId the primary key of the c cart item
	 * @return the c cart item
	 * @throws PortalException if a c cart item with the primary key could not be found
	 */
	@Override
	public CCartItem getCCartItem(long CCartItemId) throws PortalException {
		return cCartItemPersistence.findByPrimaryKey(CCartItemId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cCartItemLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CCartItem.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("CCartItemId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cCartItemLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CCartItem.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("CCartItemId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cCartItemLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CCartItem.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("CCartItemId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<CCartItem>() {
				@Override
				public void performAction(CCartItem cCartItem)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						cCartItem);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(CCartItem.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cCartItemLocalService.deleteCCartItem((CCartItem)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cCartItemPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the c cart items matching the UUID and company.
	 *
	 * @param uuid the UUID of the c cart items
	 * @param companyId the primary key of the company
	 * @return the matching c cart items, or an empty list if no matches were found
	 */
	@Override
	public List<CCartItem> getCCartItemsByUuidAndCompanyId(String uuid,
		long companyId) {
		return cCartItemPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of c cart items matching the UUID and company.
	 *
	 * @param uuid the UUID of the c cart items
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of c cart items
	 * @param end the upper bound of the range of c cart items (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching c cart items, or an empty list if no matches were found
	 */
	@Override
	public List<CCartItem> getCCartItemsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<CCartItem> orderByComparator) {
		return cCartItemPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the c cart item matching the UUID and group.
	 *
	 * @param uuid the c cart item's UUID
	 * @param groupId the primary key of the group
	 * @return the matching c cart item
	 * @throws PortalException if a matching c cart item could not be found
	 */
	@Override
	public CCartItem getCCartItemByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return cCartItemPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the c cart items.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.commerce.cart.model.impl.CCartItemModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of c cart items
	 * @param end the upper bound of the range of c cart items (not inclusive)
	 * @return the range of c cart items
	 */
	@Override
	public List<CCartItem> getCCartItems(int start, int end) {
		return cCartItemPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of c cart items.
	 *
	 * @return the number of c cart items
	 */
	@Override
	public int getCCartItemsCount() {
		return cCartItemPersistence.countAll();
	}

	/**
	 * Updates the c cart item in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cCartItem the c cart item
	 * @return the c cart item that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CCartItem updateCCartItem(CCartItem cCartItem) {
		return cCartItemPersistence.update(cCartItem);
	}

	/**
	 * Returns the c cart local service.
	 *
	 * @return the c cart local service
	 */
	public com.liferay.commerce.cart.service.CCartLocalService getCCartLocalService() {
		return cCartLocalService;
	}

	/**
	 * Sets the c cart local service.
	 *
	 * @param cCartLocalService the c cart local service
	 */
	public void setCCartLocalService(
		com.liferay.commerce.cart.service.CCartLocalService cCartLocalService) {
		this.cCartLocalService = cCartLocalService;
	}

	/**
	 * Returns the c cart persistence.
	 *
	 * @return the c cart persistence
	 */
	public CCartPersistence getCCartPersistence() {
		return cCartPersistence;
	}

	/**
	 * Sets the c cart persistence.
	 *
	 * @param cCartPersistence the c cart persistence
	 */
	public void setCCartPersistence(CCartPersistence cCartPersistence) {
		this.cCartPersistence = cCartPersistence;
	}

	/**
	 * Returns the c cart item local service.
	 *
	 * @return the c cart item local service
	 */
	public CCartItemLocalService getCCartItemLocalService() {
		return cCartItemLocalService;
	}

	/**
	 * Sets the c cart item local service.
	 *
	 * @param cCartItemLocalService the c cart item local service
	 */
	public void setCCartItemLocalService(
		CCartItemLocalService cCartItemLocalService) {
		this.cCartItemLocalService = cCartItemLocalService;
	}

	/**
	 * Returns the c cart item persistence.
	 *
	 * @return the c cart item persistence
	 */
	public CCartItemPersistence getCCartItemPersistence() {
		return cCartItemPersistence;
	}

	/**
	 * Sets the c cart item persistence.
	 *
	 * @param cCartItemPersistence the c cart item persistence
	 */
	public void setCCartItemPersistence(
		CCartItemPersistence cCartItemPersistence) {
		this.cCartItemPersistence = cCartItemPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.commerce.cart.model.CCartItem",
			cCartItemLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.commerce.cart.model.CCartItem");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CCartItemLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CCartItem.class;
	}

	protected String getModelClassName() {
		return CCartItem.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cCartItemPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.commerce.cart.service.CCartLocalService.class)
	protected com.liferay.commerce.cart.service.CCartLocalService cCartLocalService;
	@BeanReference(type = CCartPersistence.class)
	protected CCartPersistence cCartPersistence;
	@BeanReference(type = CCartItemLocalService.class)
	protected CCartItemLocalService cCartItemLocalService;
	@BeanReference(type = CCartItemPersistence.class)
	protected CCartItemPersistence cCartItemPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}