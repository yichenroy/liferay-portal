/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.products.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.products.model.CommerceProductInstance;
import com.liferay.commerce.products.model.CommerceProductInstanceModel;
import com.liferay.commerce.products.model.CommerceProductInstanceSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.trash.TrashHandler;
import com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.liferay.trash.kernel.model.TrashEntry;
import com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CommerceProductInstance service. Represents a row in the &quot;CommerceProductInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceProductInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceProductInstanceImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CommerceProductInstanceImpl
 * @see CommerceProductInstance
 * @see CommerceProductInstanceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceProductInstanceModelImpl extends BaseModelImpl<CommerceProductInstance>
	implements CommerceProductInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce product instance model instance should use the {@link CommerceProductInstance} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceProductInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "commerceProductInstanceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "commerceProductDefinitionId", Types.BIGINT },
			{ "SKU", Types.VARCHAR },
			{ "DDMContent", Types.VARCHAR },
			{ "displayDate", Types.TIMESTAMP },
			{ "expirationDate", Types.TIMESTAMP },
			{ "lastPublishDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commerceProductInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commerceProductDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("SKU", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DDMContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceProductInstance (uuid_ VARCHAR(75) null,commerceProductInstanceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,commerceProductDefinitionId LONG,SKU VARCHAR(75) null,DDMContent VARCHAR(75) null,displayDate DATE null,expirationDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceProductInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceProductInstance.displayDate DESC, commerceProductInstance.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceProductInstance.displayDate DESC, CommerceProductInstance.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.products.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.products.model.CommerceProductInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.products.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.products.model.CommerceProductInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.products.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.products.model.CommerceProductInstance"),
			true);
	public static final long SKU_COLUMN_BITMASK = 1L;
	public static final long COMMERCEPRODUCTDEFINITIONID_COLUMN_BITMASK = 2L;
	public static final long COMPANYID_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long DISPLAYDATE_COLUMN_BITMASK = 32L;
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceProductInstance toModel(
		CommerceProductInstanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceProductInstance model = new CommerceProductInstanceImpl();

		model.setUuid(soapModel.getUuid());
		model.setCommerceProductInstanceId(soapModel.getCommerceProductInstanceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCommerceProductDefinitionId(soapModel.getCommerceProductDefinitionId());
		model.setSKU(soapModel.getSKU());
		model.setDDMContent(soapModel.getDDMContent());
		model.setDisplayDate(soapModel.getDisplayDate());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceProductInstance> toModels(
		CommerceProductInstanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceProductInstance> models = new ArrayList<CommerceProductInstance>(soapModels.length);

		for (CommerceProductInstanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.products.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.products.model.CommerceProductInstance"));

	public CommerceProductInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceProductInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceProductInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceProductInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceProductInstance.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceProductInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("commerceProductInstanceId",
			getCommerceProductInstanceId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("commerceProductDefinitionId",
			getCommerceProductDefinitionId());
		attributes.put("SKU", getSKU());
		attributes.put("DDMContent", getDDMContent());
		attributes.put("displayDate", getDisplayDate());
		attributes.put("expirationDate", getExpirationDate());
		attributes.put("lastPublishDate", getLastPublishDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long commerceProductInstanceId = (Long)attributes.get(
				"commerceProductInstanceId");

		if (commerceProductInstanceId != null) {
			setCommerceProductInstanceId(commerceProductInstanceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long commerceProductDefinitionId = (Long)attributes.get(
				"commerceProductDefinitionId");

		if (commerceProductDefinitionId != null) {
			setCommerceProductDefinitionId(commerceProductDefinitionId);
		}

		String SKU = (String)attributes.get("SKU");

		if (SKU != null) {
			setSKU(SKU);
		}

		String DDMContent = (String)attributes.get("DDMContent");

		if (DDMContent != null) {
			setDDMContent(DDMContent);
		}

		Date displayDate = (Date)attributes.get("displayDate");

		if (displayDate != null) {
			setDisplayDate(displayDate);
		}

		Date expirationDate = (Date)attributes.get("expirationDate");

		if (expirationDate != null) {
			setExpirationDate(expirationDate);
		}

		Date lastPublishDate = (Date)attributes.get("lastPublishDate");

		if (lastPublishDate != null) {
			setLastPublishDate(lastPublishDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCommerceProductInstanceId() {
		return _commerceProductInstanceId;
	}

	@Override
	public void setCommerceProductInstanceId(long commerceProductInstanceId) {
		_commerceProductInstanceId = commerceProductInstanceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCommerceProductDefinitionId() {
		return _commerceProductDefinitionId;
	}

	@Override
	public void setCommerceProductDefinitionId(long commerceProductDefinitionId) {
		_columnBitmask |= COMMERCEPRODUCTDEFINITIONID_COLUMN_BITMASK;

		if (!_setOriginalCommerceProductDefinitionId) {
			_setOriginalCommerceProductDefinitionId = true;

			_originalCommerceProductDefinitionId = _commerceProductDefinitionId;
		}

		_commerceProductDefinitionId = commerceProductDefinitionId;
	}

	public long getOriginalCommerceProductDefinitionId() {
		return _originalCommerceProductDefinitionId;
	}

	@JSON
	@Override
	public String getSKU() {
		if (_SKU == null) {
			return StringPool.BLANK;
		}
		else {
			return _SKU;
		}
	}

	@Override
	public void setSKU(String SKU) {
		_columnBitmask |= SKU_COLUMN_BITMASK;

		if (_originalSKU == null) {
			_originalSKU = _SKU;
		}

		_SKU = SKU;
	}

	public String getOriginalSKU() {
		return GetterUtil.getString(_originalSKU);
	}

	@JSON
	@Override
	public String getDDMContent() {
		if (_DDMContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _DDMContent;
		}
	}

	@Override
	public void setDDMContent(String DDMContent) {
		_DDMContent = DDMContent;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_columnBitmask = -1L;

		_displayDate = displayDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CommerceProductInstance.class.getName()));
	}

	@Override
	public TrashEntry getTrashEntry() throws PortalException {
		if (!isInTrash()) {
			return null;
		}

		TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		TrashHandler trashHandler = getTrashHandler();

		if (!Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName(
							containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	@Override
	public TrashHandler getTrashHandler() {
		return TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		TrashEntry trashEntry = TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceProductInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceProductInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceProductInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceProductInstanceImpl commerceProductInstanceImpl = new CommerceProductInstanceImpl();

		commerceProductInstanceImpl.setUuid(getUuid());
		commerceProductInstanceImpl.setCommerceProductInstanceId(getCommerceProductInstanceId());
		commerceProductInstanceImpl.setGroupId(getGroupId());
		commerceProductInstanceImpl.setCompanyId(getCompanyId());
		commerceProductInstanceImpl.setUserId(getUserId());
		commerceProductInstanceImpl.setUserName(getUserName());
		commerceProductInstanceImpl.setCreateDate(getCreateDate());
		commerceProductInstanceImpl.setModifiedDate(getModifiedDate());
		commerceProductInstanceImpl.setCommerceProductDefinitionId(getCommerceProductDefinitionId());
		commerceProductInstanceImpl.setSKU(getSKU());
		commerceProductInstanceImpl.setDDMContent(getDDMContent());
		commerceProductInstanceImpl.setDisplayDate(getDisplayDate());
		commerceProductInstanceImpl.setExpirationDate(getExpirationDate());
		commerceProductInstanceImpl.setLastPublishDate(getLastPublishDate());
		commerceProductInstanceImpl.setStatus(getStatus());
		commerceProductInstanceImpl.setStatusByUserId(getStatusByUserId());
		commerceProductInstanceImpl.setStatusByUserName(getStatusByUserName());
		commerceProductInstanceImpl.setStatusDate(getStatusDate());

		commerceProductInstanceImpl.resetOriginalValues();

		return commerceProductInstanceImpl;
	}

	@Override
	public int compareTo(CommerceProductInstance commerceProductInstance) {
		int value = 0;

		value = DateUtil.compareTo(getDisplayDate(),
				commerceProductInstance.getDisplayDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(),
				commerceProductInstance.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceProductInstance)) {
			return false;
		}

		CommerceProductInstance commerceProductInstance = (CommerceProductInstance)obj;

		long primaryKey = commerceProductInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceProductInstanceModelImpl commerceProductInstanceModelImpl = this;

		commerceProductInstanceModelImpl._originalUuid = commerceProductInstanceModelImpl._uuid;

		commerceProductInstanceModelImpl._originalGroupId = commerceProductInstanceModelImpl._groupId;

		commerceProductInstanceModelImpl._setOriginalGroupId = false;

		commerceProductInstanceModelImpl._originalCompanyId = commerceProductInstanceModelImpl._companyId;

		commerceProductInstanceModelImpl._setOriginalCompanyId = false;

		commerceProductInstanceModelImpl._setModifiedDate = false;

		commerceProductInstanceModelImpl._originalCommerceProductDefinitionId = commerceProductInstanceModelImpl._commerceProductDefinitionId;

		commerceProductInstanceModelImpl._setOriginalCommerceProductDefinitionId = false;

		commerceProductInstanceModelImpl._originalSKU = commerceProductInstanceModelImpl._SKU;

		commerceProductInstanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceProductInstance> toCacheModel() {
		CommerceProductInstanceCacheModel commerceProductInstanceCacheModel = new CommerceProductInstanceCacheModel();

		commerceProductInstanceCacheModel.uuid = getUuid();

		String uuid = commerceProductInstanceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commerceProductInstanceCacheModel.uuid = null;
		}

		commerceProductInstanceCacheModel.commerceProductInstanceId = getCommerceProductInstanceId();

		commerceProductInstanceCacheModel.groupId = getGroupId();

		commerceProductInstanceCacheModel.companyId = getCompanyId();

		commerceProductInstanceCacheModel.userId = getUserId();

		commerceProductInstanceCacheModel.userName = getUserName();

		String userName = commerceProductInstanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceProductInstanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceProductInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceProductInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceProductInstanceCacheModel.commerceProductDefinitionId = getCommerceProductDefinitionId();

		commerceProductInstanceCacheModel.SKU = getSKU();

		String SKU = commerceProductInstanceCacheModel.SKU;

		if ((SKU != null) && (SKU.length() == 0)) {
			commerceProductInstanceCacheModel.SKU = null;
		}

		commerceProductInstanceCacheModel.DDMContent = getDDMContent();

		String DDMContent = commerceProductInstanceCacheModel.DDMContent;

		if ((DDMContent != null) && (DDMContent.length() == 0)) {
			commerceProductInstanceCacheModel.DDMContent = null;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			commerceProductInstanceCacheModel.displayDate = displayDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.displayDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			commerceProductInstanceCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.expirationDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			commerceProductInstanceCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		commerceProductInstanceCacheModel.status = getStatus();

		commerceProductInstanceCacheModel.statusByUserId = getStatusByUserId();

		commerceProductInstanceCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = commerceProductInstanceCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			commerceProductInstanceCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			commerceProductInstanceCacheModel.statusDate = statusDate.getTime();
		}
		else {
			commerceProductInstanceCacheModel.statusDate = Long.MIN_VALUE;
		}

		return commerceProductInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", commerceProductInstanceId=");
		sb.append(getCommerceProductInstanceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", commerceProductDefinitionId=");
		sb.append(getCommerceProductDefinitionId());
		sb.append(", SKU=");
		sb.append(getSKU());
		sb.append(", DDMContent=");
		sb.append(getDDMContent());
		sb.append(", displayDate=");
		sb.append(getDisplayDate());
		sb.append(", expirationDate=");
		sb.append(getExpirationDate());
		sb.append(", lastPublishDate=");
		sb.append(getLastPublishDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.commerce.products.model.CommerceProductInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceProductInstanceId</column-name><column-value><![CDATA[");
		sb.append(getCommerceProductInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceProductDefinitionId</column-name><column-value><![CDATA[");
		sb.append(getCommerceProductDefinitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SKU</column-name><column-value><![CDATA[");
		sb.append(getSKU());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DDMContent</column-name><column-value><![CDATA[");
		sb.append(getDDMContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayDate</column-name><column-value><![CDATA[");
		sb.append(getDisplayDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expirationDate</column-name><column-value><![CDATA[");
		sb.append(getExpirationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPublishDate</column-name><column-value><![CDATA[");
		sb.append(getLastPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceProductInstance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceProductInstance.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _commerceProductInstanceId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _commerceProductDefinitionId;
	private long _originalCommerceProductDefinitionId;
	private boolean _setOriginalCommerceProductDefinitionId;
	private String _SKU;
	private String _originalSKU;
	private String _DDMContent;
	private Date _displayDate;
	private Date _expirationDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private CommerceProductInstance _escapedModel;
}