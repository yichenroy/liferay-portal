import com.liferay.gradle.util.OSDetector

apply plugin: "com.liferay.lang.merger"

configurations {
	builder

	compileOnly {
		extendsFrom builder
	}
}

task buildForecasts(type: JavaExec)
task buildOrders(type: JavaExec)
task formatJSON

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

File dependenciesDir = file("src/main/resources/com/liferay/commerce/initializer/customer/portal/internal/dependencies")

File forecastsDir = new File(dependenciesDir, "forecasts")
File ordersDir = new File(dependenciesDir, "orders")

buildForecasts {
	args relativePath(forecastsDir)
	classpath = sourceSets.main.output + configurations.builder

	doFirst {
		delete forecastsDir
	}

	finalizedBy formatJSON
	main = "com.liferay.commerce.initializer.customer.portal.internal.tools.CustomerPortalSampleForecastsBuilder"
}

buildOrders {
	args relativePath(ordersDir)
	classpath = sourceSets.main.output + configurations.builder

	doFirst {
		delete ordersDir
	}

	finalizedBy formatJSON
	main = "com.liferay.commerce.initializer.customer.portal.internal.tools.CustomerPortalSampleOrdersBuilder"
}

dependencies {
	builder group: "com.liferay", name: "com.liferay.petra.string", version: "2.0.0-20180530.144920-1"
	builder group: "com.liferay.portal", name: "com.liferay.portal.kernel", transitive: false, version: "3.0.0-20180518.171544-8"
	builder group: "org.json", name: "json", version: "20180130"
	builder project(":private:apps:commerce:commerce-forecast-api")

	compileOnly group: "com.liferay", name: "com.liferay.dynamic.data.mapping.api", version: "4.0.0-20180316.222213-1"
	compileOnly group: "com.liferay", name: "com.liferay.frontend.taglib", version: "3.0.0-20180521.175836-1"
	compileOnly group: "com.liferay", name: "com.liferay.frontend.taglib.soy", version: "1.0.0"
	compileOnly group: "com.liferay", name: "com.liferay.portal.instance.lifecycle", version: "1.0.0"
	compileOnly group: "com.liferay", name: "com.liferay.portlet.display.template", version: "2.0.0"
	compileOnly group: "com.liferay", name: "com.liferay.site.api", version: "3.0.0-20180321.162152-1"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "3.0.0-20180510.210925-1"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.0.0"
	compileOnly group: "javax.portlet", name: "portlet-api", version: "3.0.0"
	compileOnly group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compileOnly group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
	compileOnly group: "org.osgi", name: "org.osgi.service.cm", version: "1.5.0"
	compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations", version: "1.3.0"
	compileOnly project(":private:apps:commerce:commerce-api")
	compileOnly project(":private:apps:commerce:commerce-currency-api")
	compileOnly project(":private:apps:commerce:commerce-forecast-api")
	compileOnly project(":private:apps:commerce:commerce-organization-api")
	compileOnly project(":private:apps:commerce:commerce-product-api")
}

formatJSON {
	doLast {
		Closure<Void> formatJSONClosure = {
			String fileName = relativePath(it)

			logger.lifecycle "Formatting ${fileName}"

			exec {
				if (OSDetector.windows) {
					commandLine = ["cmd", "/c", "sort-json", fileName]
				}
				else {
					commandLine = ["sort-json", fileName]
				}
			}

			String json = it.getText("UTF-8")

			json = json.replace("  ", "\t")
			json = json.trim()

			it.setText json, "UTF-8"
		}

		if (forecastsDir.exists()) {
			forecastsDir.eachFile formatJSONClosure
		}

		if (ordersDir.exists()) {
			ordersDir.eachFile formatJSONClosure
		}
	}
}

mergeLang {
	setting("../commerce-lang/src/main/resources/content") {
		transformKey "inventory", "inventory"
	}

	sourceDirs = [
		"../commerce-lang/src/main/resources/content",
		"src/main/resources/content"
	]
}