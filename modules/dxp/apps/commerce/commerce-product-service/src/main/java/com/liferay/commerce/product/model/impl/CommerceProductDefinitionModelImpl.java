/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.commerce.product.model.CommerceProductDefinition;
import com.liferay.commerce.product.model.CommerceProductDefinitionLocalization;
import com.liferay.commerce.product.model.CommerceProductDefinitionModel;
import com.liferay.commerce.product.model.CommerceProductDefinitionSoap;
import com.liferay.commerce.product.service.CommerceProductDefinitionLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

/**
 * The base model implementation for the CommerceProductDefinition service. Represents a row in the &quot;CommerceProductDefinition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommerceProductDefinitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommerceProductDefinitionImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CommerceProductDefinitionImpl
 * @see CommerceProductDefinition
 * @see CommerceProductDefinitionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CommerceProductDefinitionModelImpl extends BaseModelImpl<CommerceProductDefinition>
	implements CommerceProductDefinitionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commerce product definition model instance should use the {@link CommerceProductDefinition} interface instead.
	 */
	public static final String TABLE_NAME = "CommerceProductDefinition";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "commerceProductDefinitionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "productTypeName", Types.VARCHAR },
			{ "availableIndividually", Types.BOOLEAN },
			{ "DDMStructureKey", Types.VARCHAR },
			{ "baseSKU", Types.VARCHAR },
			{ "displayDate", Types.TIMESTAMP },
			{ "expirationDate", Types.TIMESTAMP },
			{ "lastPublishDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "defaultLanguageId", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commerceProductDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productTypeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availableIndividually", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("DDMStructureKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("baseSKU", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("defaultLanguageId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CommerceProductDefinition (uuid_ VARCHAR(75) null,commerceProductDefinitionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,productTypeName VARCHAR(75) null,availableIndividually BOOLEAN,DDMStructureKey VARCHAR(75) null,baseSKU VARCHAR(75) null,displayDate DATE null,expirationDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,defaultLanguageId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CommerceProductDefinition";
	public static final String ORDER_BY_JPQL = " ORDER BY commerceProductDefinition.displayDate DESC, commerceProductDefinition.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CommerceProductDefinition.displayDate DESC, CommerceProductDefinition.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.commerce.product.model.CommerceProductDefinition"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.commerce.product.model.CommerceProductDefinition"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.commerce.product.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.commerce.product.model.CommerceProductDefinition"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long DISPLAYDATE_COLUMN_BITMASK = 8L;
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CommerceProductDefinition toModel(
		CommerceProductDefinitionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CommerceProductDefinition model = new CommerceProductDefinitionImpl();

		model.setUuid(soapModel.getUuid());
		model.setCommerceProductDefinitionId(soapModel.getCommerceProductDefinitionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProductTypeName(soapModel.getProductTypeName());
		model.setAvailableIndividually(soapModel.getAvailableIndividually());
		model.setDDMStructureKey(soapModel.getDDMStructureKey());
		model.setBaseSKU(soapModel.getBaseSKU());
		model.setDisplayDate(soapModel.getDisplayDate());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setDefaultLanguageId(soapModel.getDefaultLanguageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CommerceProductDefinition> toModels(
		CommerceProductDefinitionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CommerceProductDefinition> models = new ArrayList<CommerceProductDefinition>(soapModels.length);

		for (CommerceProductDefinitionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.commerce.product.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.commerce.product.model.CommerceProductDefinition"));

	public CommerceProductDefinitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commerceProductDefinitionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommerceProductDefinitionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commerceProductDefinitionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommerceProductDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return CommerceProductDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("commerceProductDefinitionId",
			getCommerceProductDefinitionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("productTypeName", getProductTypeName());
		attributes.put("availableIndividually", getAvailableIndividually());
		attributes.put("DDMStructureKey", getDDMStructureKey());
		attributes.put("baseSKU", getBaseSKU());
		attributes.put("displayDate", getDisplayDate());
		attributes.put("expirationDate", getExpirationDate());
		attributes.put("lastPublishDate", getLastPublishDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("defaultLanguageId", getDefaultLanguageId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long commerceProductDefinitionId = (Long)attributes.get(
				"commerceProductDefinitionId");

		if (commerceProductDefinitionId != null) {
			setCommerceProductDefinitionId(commerceProductDefinitionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String productTypeName = (String)attributes.get("productTypeName");

		if (productTypeName != null) {
			setProductTypeName(productTypeName);
		}

		Boolean availableIndividually = (Boolean)attributes.get(
				"availableIndividually");

		if (availableIndividually != null) {
			setAvailableIndividually(availableIndividually);
		}

		String DDMStructureKey = (String)attributes.get("DDMStructureKey");

		if (DDMStructureKey != null) {
			setDDMStructureKey(DDMStructureKey);
		}

		String baseSKU = (String)attributes.get("baseSKU");

		if (baseSKU != null) {
			setBaseSKU(baseSKU);
		}

		Date displayDate = (Date)attributes.get("displayDate");

		if (displayDate != null) {
			setDisplayDate(displayDate);
		}

		Date expirationDate = (Date)attributes.get("expirationDate");

		if (expirationDate != null) {
			setExpirationDate(expirationDate);
		}

		Date lastPublishDate = (Date)attributes.get("lastPublishDate");

		if (lastPublishDate != null) {
			setLastPublishDate(lastPublishDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String defaultLanguageId = (String)attributes.get("defaultLanguageId");

		if (defaultLanguageId != null) {
			setDefaultLanguageId(defaultLanguageId);
		}
	}

	@Override
	public String getTitle() {
		return getTitle(getDefaultLanguageId(), false);
	}

	@Override
	public String getTitle(String languageId) {
		return getTitle(languageId, true);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		if (useDefault) {
			return LocalizationUtil.getLocalization(new Function<String, String>() {
					@Override
					public String apply(String languageId) {
						return _getTitle(languageId);
					}
				}, languageId, getDefaultLanguageId());
		}

		return _getTitle(languageId);
	}

	@Override
	public String getTitleMapAsXML() {
		return LocalizationUtil.getXml(getLanguageIdToTitleMap(),
			getDefaultLanguageId(), "Title");
	}

	@Override
	public Map<String, String> getLanguageIdToTitleMap() {
		Map<String, String> languageIdToTitleMap = new HashMap<String, String>();

		List<CommerceProductDefinitionLocalization> commerceProductDefinitionLocalizations =
			CommerceProductDefinitionLocalServiceUtil.getCommerceProductDefinitionLocalizations(getPrimaryKey());

		for (CommerceProductDefinitionLocalization commerceProductDefinitionLocalization : commerceProductDefinitionLocalizations) {
			languageIdToTitleMap.put(commerceProductDefinitionLocalization.getLanguageId(),
				commerceProductDefinitionLocalization.getTitle());
		}

		return languageIdToTitleMap;
	}

	private String _getTitle(String languageId) {
		CommerceProductDefinitionLocalization commerceProductDefinitionLocalization =
			CommerceProductDefinitionLocalServiceUtil.fetchCommerceProductDefinitionLocalization(getPrimaryKey(),
				languageId);

		if (commerceProductDefinitionLocalization == null) {
			return StringPool.BLANK;
		}

		return commerceProductDefinitionLocalization.getTitle();
	}

	@Override
	public String getUrlTitle() {
		return getUrlTitle(getDefaultLanguageId(), false);
	}

	@Override
	public String getUrlTitle(String languageId) {
		return getUrlTitle(languageId, true);
	}

	@Override
	public String getUrlTitle(String languageId, boolean useDefault) {
		if (useDefault) {
			return LocalizationUtil.getLocalization(new Function<String, String>() {
					@Override
					public String apply(String languageId) {
						return _getUrlTitle(languageId);
					}
				}, languageId, getDefaultLanguageId());
		}

		return _getUrlTitle(languageId);
	}

	@Override
	public String getUrlTitleMapAsXML() {
		return LocalizationUtil.getXml(getLanguageIdToUrlTitleMap(),
			getDefaultLanguageId(), "UrlTitle");
	}

	@Override
	public Map<String, String> getLanguageIdToUrlTitleMap() {
		Map<String, String> languageIdToUrlTitleMap = new HashMap<String, String>();

		List<CommerceProductDefinitionLocalization> commerceProductDefinitionLocalizations =
			CommerceProductDefinitionLocalServiceUtil.getCommerceProductDefinitionLocalizations(getPrimaryKey());

		for (CommerceProductDefinitionLocalization commerceProductDefinitionLocalization : commerceProductDefinitionLocalizations) {
			languageIdToUrlTitleMap.put(commerceProductDefinitionLocalization.getLanguageId(),
				commerceProductDefinitionLocalization.getUrlTitle());
		}

		return languageIdToUrlTitleMap;
	}

	private String _getUrlTitle(String languageId) {
		CommerceProductDefinitionLocalization commerceProductDefinitionLocalization =
			CommerceProductDefinitionLocalServiceUtil.fetchCommerceProductDefinitionLocalization(getPrimaryKey(),
				languageId);

		if (commerceProductDefinitionLocalization == null) {
			return StringPool.BLANK;
		}

		return commerceProductDefinitionLocalization.getUrlTitle();
	}

	@Override
	public String getDescription() {
		return getDescription(getDefaultLanguageId(), false);
	}

	@Override
	public String getDescription(String languageId) {
		return getDescription(languageId, true);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		if (useDefault) {
			return LocalizationUtil.getLocalization(new Function<String, String>() {
					@Override
					public String apply(String languageId) {
						return _getDescription(languageId);
					}
				}, languageId, getDefaultLanguageId());
		}

		return _getDescription(languageId);
	}

	@Override
	public String getDescriptionMapAsXML() {
		return LocalizationUtil.getXml(getLanguageIdToDescriptionMap(),
			getDefaultLanguageId(), "Description");
	}

	@Override
	public Map<String, String> getLanguageIdToDescriptionMap() {
		Map<String, String> languageIdToDescriptionMap = new HashMap<String, String>();

		List<CommerceProductDefinitionLocalization> commerceProductDefinitionLocalizations =
			CommerceProductDefinitionLocalServiceUtil.getCommerceProductDefinitionLocalizations(getPrimaryKey());

		for (CommerceProductDefinitionLocalization commerceProductDefinitionLocalization : commerceProductDefinitionLocalizations) {
			languageIdToDescriptionMap.put(commerceProductDefinitionLocalization.getLanguageId(),
				commerceProductDefinitionLocalization.getDescription());
		}

		return languageIdToDescriptionMap;
	}

	private String _getDescription(String languageId) {
		CommerceProductDefinitionLocalization commerceProductDefinitionLocalization =
			CommerceProductDefinitionLocalServiceUtil.fetchCommerceProductDefinitionLocalization(getPrimaryKey(),
				languageId);

		if (commerceProductDefinitionLocalization == null) {
			return StringPool.BLANK;
		}

		return commerceProductDefinitionLocalization.getDescription();
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCommerceProductDefinitionId() {
		return _commerceProductDefinitionId;
	}

	@Override
	public void setCommerceProductDefinitionId(long commerceProductDefinitionId) {
		_commerceProductDefinitionId = commerceProductDefinitionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProductTypeName() {
		if (_productTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productTypeName;
		}
	}

	@Override
	public void setProductTypeName(String productTypeName) {
		_productTypeName = productTypeName;
	}

	@JSON
	@Override
	public boolean getAvailableIndividually() {
		return _availableIndividually;
	}

	@JSON
	@Override
	public boolean isAvailableIndividually() {
		return _availableIndividually;
	}

	@Override
	public void setAvailableIndividually(boolean availableIndividually) {
		_availableIndividually = availableIndividually;
	}

	@JSON
	@Override
	public String getDDMStructureKey() {
		if (_DDMStructureKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _DDMStructureKey;
		}
	}

	@Override
	public void setDDMStructureKey(String DDMStructureKey) {
		_DDMStructureKey = DDMStructureKey;
	}

	@JSON
	@Override
	public String getBaseSKU() {
		if (_baseSKU == null) {
			return StringPool.BLANK;
		}
		else {
			return _baseSKU;
		}
	}

	@Override
	public void setBaseSKU(String baseSKU) {
		_baseSKU = baseSKU;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_columnBitmask = -1L;

		_displayDate = displayDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON(include = false)
	@Override
	public String getDefaultLanguageId() {
		if (_defaultLanguageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _defaultLanguageId;
		}
	}

	@Override
	public void setDefaultLanguageId(String defaultLanguageId) {
		_defaultLanguageId = defaultLanguageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CommerceProductDefinition.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {
		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if (!Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName(
							containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	* @deprecated As of 7.0.0, with no direct replacement
	*/
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CommerceProductDefinition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommerceProductDefinition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommerceProductDefinition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommerceProductDefinitionImpl commerceProductDefinitionImpl = new CommerceProductDefinitionImpl();

		commerceProductDefinitionImpl.setUuid(getUuid());
		commerceProductDefinitionImpl.setCommerceProductDefinitionId(getCommerceProductDefinitionId());
		commerceProductDefinitionImpl.setGroupId(getGroupId());
		commerceProductDefinitionImpl.setCompanyId(getCompanyId());
		commerceProductDefinitionImpl.setUserId(getUserId());
		commerceProductDefinitionImpl.setUserName(getUserName());
		commerceProductDefinitionImpl.setCreateDate(getCreateDate());
		commerceProductDefinitionImpl.setModifiedDate(getModifiedDate());
		commerceProductDefinitionImpl.setProductTypeName(getProductTypeName());
		commerceProductDefinitionImpl.setAvailableIndividually(getAvailableIndividually());
		commerceProductDefinitionImpl.setDDMStructureKey(getDDMStructureKey());
		commerceProductDefinitionImpl.setBaseSKU(getBaseSKU());
		commerceProductDefinitionImpl.setDisplayDate(getDisplayDate());
		commerceProductDefinitionImpl.setExpirationDate(getExpirationDate());
		commerceProductDefinitionImpl.setLastPublishDate(getLastPublishDate());
		commerceProductDefinitionImpl.setStatus(getStatus());
		commerceProductDefinitionImpl.setStatusByUserId(getStatusByUserId());
		commerceProductDefinitionImpl.setStatusByUserName(getStatusByUserName());
		commerceProductDefinitionImpl.setStatusDate(getStatusDate());
		commerceProductDefinitionImpl.setDefaultLanguageId(getDefaultLanguageId());

		commerceProductDefinitionImpl.resetOriginalValues();

		return commerceProductDefinitionImpl;
	}

	@Override
	public int compareTo(CommerceProductDefinition commerceProductDefinition) {
		int value = 0;

		value = DateUtil.compareTo(getDisplayDate(),
				commerceProductDefinition.getDisplayDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(),
				commerceProductDefinition.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommerceProductDefinition)) {
			return false;
		}

		CommerceProductDefinition commerceProductDefinition = (CommerceProductDefinition)obj;

		long primaryKey = commerceProductDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommerceProductDefinitionModelImpl commerceProductDefinitionModelImpl = this;

		commerceProductDefinitionModelImpl._originalUuid = commerceProductDefinitionModelImpl._uuid;

		commerceProductDefinitionModelImpl._originalGroupId = commerceProductDefinitionModelImpl._groupId;

		commerceProductDefinitionModelImpl._setOriginalGroupId = false;

		commerceProductDefinitionModelImpl._originalCompanyId = commerceProductDefinitionModelImpl._companyId;

		commerceProductDefinitionModelImpl._setOriginalCompanyId = false;

		commerceProductDefinitionModelImpl._setModifiedDate = false;

		commerceProductDefinitionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommerceProductDefinition> toCacheModel() {
		CommerceProductDefinitionCacheModel commerceProductDefinitionCacheModel = new CommerceProductDefinitionCacheModel();

		commerceProductDefinitionCacheModel.uuid = getUuid();

		String uuid = commerceProductDefinitionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commerceProductDefinitionCacheModel.uuid = null;
		}

		commerceProductDefinitionCacheModel.commerceProductDefinitionId = getCommerceProductDefinitionId();

		commerceProductDefinitionCacheModel.groupId = getGroupId();

		commerceProductDefinitionCacheModel.companyId = getCompanyId();

		commerceProductDefinitionCacheModel.userId = getUserId();

		commerceProductDefinitionCacheModel.userName = getUserName();

		String userName = commerceProductDefinitionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commerceProductDefinitionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commerceProductDefinitionCacheModel.createDate = createDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commerceProductDefinitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commerceProductDefinitionCacheModel.productTypeName = getProductTypeName();

		String productTypeName = commerceProductDefinitionCacheModel.productTypeName;

		if ((productTypeName != null) && (productTypeName.length() == 0)) {
			commerceProductDefinitionCacheModel.productTypeName = null;
		}

		commerceProductDefinitionCacheModel.availableIndividually = getAvailableIndividually();

		commerceProductDefinitionCacheModel.DDMStructureKey = getDDMStructureKey();

		String DDMStructureKey = commerceProductDefinitionCacheModel.DDMStructureKey;

		if ((DDMStructureKey != null) && (DDMStructureKey.length() == 0)) {
			commerceProductDefinitionCacheModel.DDMStructureKey = null;
		}

		commerceProductDefinitionCacheModel.baseSKU = getBaseSKU();

		String baseSKU = commerceProductDefinitionCacheModel.baseSKU;

		if ((baseSKU != null) && (baseSKU.length() == 0)) {
			commerceProductDefinitionCacheModel.baseSKU = null;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			commerceProductDefinitionCacheModel.displayDate = displayDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.displayDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			commerceProductDefinitionCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.expirationDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			commerceProductDefinitionCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		commerceProductDefinitionCacheModel.status = getStatus();

		commerceProductDefinitionCacheModel.statusByUserId = getStatusByUserId();

		commerceProductDefinitionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = commerceProductDefinitionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			commerceProductDefinitionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			commerceProductDefinitionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			commerceProductDefinitionCacheModel.statusDate = Long.MIN_VALUE;
		}

		commerceProductDefinitionCacheModel.defaultLanguageId = getDefaultLanguageId();

		String defaultLanguageId = commerceProductDefinitionCacheModel.defaultLanguageId;

		if ((defaultLanguageId != null) && (defaultLanguageId.length() == 0)) {
			commerceProductDefinitionCacheModel.defaultLanguageId = null;
		}

		return commerceProductDefinitionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", commerceProductDefinitionId=");
		sb.append(getCommerceProductDefinitionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", productTypeName=");
		sb.append(getProductTypeName());
		sb.append(", availableIndividually=");
		sb.append(getAvailableIndividually());
		sb.append(", DDMStructureKey=");
		sb.append(getDDMStructureKey());
		sb.append(", baseSKU=");
		sb.append(getBaseSKU());
		sb.append(", displayDate=");
		sb.append(getDisplayDate());
		sb.append(", expirationDate=");
		sb.append(getExpirationDate());
		sb.append(", lastPublishDate=");
		sb.append(getLastPublishDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", defaultLanguageId=");
		sb.append(getDefaultLanguageId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.commerce.product.model.CommerceProductDefinition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commerceProductDefinitionId</column-name><column-value><![CDATA[");
		sb.append(getCommerceProductDefinitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productTypeName</column-name><column-value><![CDATA[");
		sb.append(getProductTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availableIndividually</column-name><column-value><![CDATA[");
		sb.append(getAvailableIndividually());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DDMStructureKey</column-name><column-value><![CDATA[");
		sb.append(getDDMStructureKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>baseSKU</column-name><column-value><![CDATA[");
		sb.append(getBaseSKU());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayDate</column-name><column-value><![CDATA[");
		sb.append(getDisplayDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expirationDate</column-name><column-value><![CDATA[");
		sb.append(getExpirationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPublishDate</column-name><column-value><![CDATA[");
		sb.append(getLastPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultLanguageId</column-name><column-value><![CDATA[");
		sb.append(getDefaultLanguageId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CommerceProductDefinition.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CommerceProductDefinition.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _commerceProductDefinitionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _productTypeName;
	private boolean _availableIndividually;
	private String _DDMStructureKey;
	private String _baseSKU;
	private Date _displayDate;
	private Date _expirationDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _defaultLanguageId;
	private long _columnBitmask;
	private CommerceProductDefinition _escapedModel;
}