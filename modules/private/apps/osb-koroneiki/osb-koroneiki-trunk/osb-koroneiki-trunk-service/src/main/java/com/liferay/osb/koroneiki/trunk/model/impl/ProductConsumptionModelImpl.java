/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.koroneiki.trunk.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.osb.koroneiki.trunk.model.ProductConsumption;
import com.liferay.osb.koroneiki.trunk.model.ProductConsumptionModel;
import com.liferay.osb.koroneiki.trunk.model.ProductConsumptionSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the ProductConsumption service. Represents a row in the &quot;Koroneiki_ProductConsumption&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ProductConsumptionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductConsumptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductConsumptionImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProductConsumptionModelImpl
	extends BaseModelImpl<ProductConsumption>
	implements ProductConsumptionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product consumption model instance should use the <code>ProductConsumption</code> interface instead.
	 */
	public static final String TABLE_NAME = "Koroneiki_ProductConsumption";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"productConsumptionId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"productConsumptionKey", Types.VARCHAR}, {"accountId", Types.BIGINT},
		{"productEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productConsumptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productConsumptionKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Koroneiki_ProductConsumption (uuid_ VARCHAR(75) null,productConsumptionId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,productConsumptionKey VARCHAR(75) null,accountId LONG,productEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Koroneiki_ProductConsumption";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productConsumption.productConsumptionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Koroneiki_ProductConsumption.productConsumptionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACCOUNTID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long PRODUCTCONSUMPTIONKEY_COLUMN_BITMASK = 4L;

	public static final long PRODUCTENTRYID_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long PRODUCTCONSUMPTIONID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProductConsumption toModel(ProductConsumptionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductConsumption model = new ProductConsumptionImpl();

		model.setUuid(soapModel.getUuid());
		model.setProductConsumptionId(soapModel.getProductConsumptionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProductConsumptionKey(soapModel.getProductConsumptionKey());
		model.setAccountId(soapModel.getAccountId());
		model.setProductEntryId(soapModel.getProductEntryId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProductConsumption> toModels(
		ProductConsumptionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ProductConsumption> models = new ArrayList<ProductConsumption>(
			soapModels.length);

		for (ProductConsumptionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProductConsumptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productConsumptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductConsumptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productConsumptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductConsumption.class;
	}

	@Override
	public String getModelClassName() {
		return ProductConsumption.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductConsumption, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductConsumption, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductConsumption, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductConsumption)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductConsumption, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductConsumption, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductConsumption)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductConsumption, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductConsumption, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductConsumption>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductConsumption.class.getClassLoader(), ProductConsumption.class,
			ModelWrapper.class);

		try {
			Constructor<ProductConsumption> constructor =
				(Constructor<ProductConsumption>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ProductConsumption, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductConsumption, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductConsumption, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ProductConsumption, Object>>();
		Map<String, BiConsumer<ProductConsumption, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ProductConsumption, ?>>();

		attributeGetterFunctions.put("uuid", ProductConsumption::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ProductConsumption, String>)
				ProductConsumption::setUuid);
		attributeGetterFunctions.put(
			"productConsumptionId",
			ProductConsumption::getProductConsumptionId);
		attributeSetterBiConsumers.put(
			"productConsumptionId",
			(BiConsumer<ProductConsumption, Long>)
				ProductConsumption::setProductConsumptionId);
		attributeGetterFunctions.put(
			"companyId", ProductConsumption::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ProductConsumption, Long>)
				ProductConsumption::setCompanyId);
		attributeGetterFunctions.put("userId", ProductConsumption::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ProductConsumption, Long>)
				ProductConsumption::setUserId);
		attributeGetterFunctions.put(
			"createDate", ProductConsumption::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ProductConsumption, Date>)
				ProductConsumption::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ProductConsumption::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ProductConsumption, Date>)
				ProductConsumption::setModifiedDate);
		attributeGetterFunctions.put(
			"productConsumptionKey",
			ProductConsumption::getProductConsumptionKey);
		attributeSetterBiConsumers.put(
			"productConsumptionKey",
			(BiConsumer<ProductConsumption, String>)
				ProductConsumption::setProductConsumptionKey);
		attributeGetterFunctions.put(
			"accountId", ProductConsumption::getAccountId);
		attributeSetterBiConsumers.put(
			"accountId",
			(BiConsumer<ProductConsumption, Long>)
				ProductConsumption::setAccountId);
		attributeGetterFunctions.put(
			"productEntryId", ProductConsumption::getProductEntryId);
		attributeSetterBiConsumers.put(
			"productEntryId",
			(BiConsumer<ProductConsumption, Long>)
				ProductConsumption::setProductEntryId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProductConsumptionId() {
		return _productConsumptionId;
	}

	@Override
	public void setProductConsumptionId(long productConsumptionId) {
		_productConsumptionId = productConsumptionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getProductConsumptionKey() {
		if (_productConsumptionKey == null) {
			return "";
		}
		else {
			return _productConsumptionKey;
		}
	}

	@Override
	public void setProductConsumptionKey(String productConsumptionKey) {
		_columnBitmask |= PRODUCTCONSUMPTIONKEY_COLUMN_BITMASK;

		if (_originalProductConsumptionKey == null) {
			_originalProductConsumptionKey = _productConsumptionKey;
		}

		_productConsumptionKey = productConsumptionKey;
	}

	public String getOriginalProductConsumptionKey() {
		return GetterUtil.getString(_originalProductConsumptionKey);
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_columnBitmask |= ACCOUNTID_COLUMN_BITMASK;

		if (!_setOriginalAccountId) {
			_setOriginalAccountId = true;

			_originalAccountId = _accountId;
		}

		_accountId = accountId;
	}

	public long getOriginalAccountId() {
		return _originalAccountId;
	}

	@JSON
	@Override
	public long getProductEntryId() {
		return _productEntryId;
	}

	@Override
	public void setProductEntryId(long productEntryId) {
		_columnBitmask |= PRODUCTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalProductEntryId) {
			_setOriginalProductEntryId = true;

			_originalProductEntryId = _productEntryId;
		}

		_productEntryId = productEntryId;
	}

	public long getOriginalProductEntryId() {
		return _originalProductEntryId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ProductConsumption.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ProductConsumption.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductConsumption toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductConsumption>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductConsumptionImpl productConsumptionImpl =
			new ProductConsumptionImpl();

		productConsumptionImpl.setUuid(getUuid());
		productConsumptionImpl.setProductConsumptionId(
			getProductConsumptionId());
		productConsumptionImpl.setCompanyId(getCompanyId());
		productConsumptionImpl.setUserId(getUserId());
		productConsumptionImpl.setCreateDate(getCreateDate());
		productConsumptionImpl.setModifiedDate(getModifiedDate());
		productConsumptionImpl.setProductConsumptionKey(
			getProductConsumptionKey());
		productConsumptionImpl.setAccountId(getAccountId());
		productConsumptionImpl.setProductEntryId(getProductEntryId());

		productConsumptionImpl.resetOriginalValues();

		return productConsumptionImpl;
	}

	@Override
	public int compareTo(ProductConsumption productConsumption) {
		long primaryKey = productConsumption.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProductConsumption)) {
			return false;
		}

		ProductConsumption productConsumption = (ProductConsumption)obj;

		long primaryKey = productConsumption.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ProductConsumptionModelImpl productConsumptionModelImpl = this;

		productConsumptionModelImpl._originalUuid =
			productConsumptionModelImpl._uuid;

		productConsumptionModelImpl._originalCompanyId =
			productConsumptionModelImpl._companyId;

		productConsumptionModelImpl._setOriginalCompanyId = false;

		productConsumptionModelImpl._originalUserId =
			productConsumptionModelImpl._userId;

		productConsumptionModelImpl._setOriginalUserId = false;

		productConsumptionModelImpl._setModifiedDate = false;

		productConsumptionModelImpl._originalProductConsumptionKey =
			productConsumptionModelImpl._productConsumptionKey;

		productConsumptionModelImpl._originalAccountId =
			productConsumptionModelImpl._accountId;

		productConsumptionModelImpl._setOriginalAccountId = false;

		productConsumptionModelImpl._originalProductEntryId =
			productConsumptionModelImpl._productEntryId;

		productConsumptionModelImpl._setOriginalProductEntryId = false;

		productConsumptionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductConsumption> toCacheModel() {
		ProductConsumptionCacheModel productConsumptionCacheModel =
			new ProductConsumptionCacheModel();

		productConsumptionCacheModel.uuid = getUuid();

		String uuid = productConsumptionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			productConsumptionCacheModel.uuid = null;
		}

		productConsumptionCacheModel.productConsumptionId =
			getProductConsumptionId();

		productConsumptionCacheModel.companyId = getCompanyId();

		productConsumptionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			productConsumptionCacheModel.createDate = createDate.getTime();
		}
		else {
			productConsumptionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productConsumptionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productConsumptionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productConsumptionCacheModel.productConsumptionKey =
			getProductConsumptionKey();

		String productConsumptionKey =
			productConsumptionCacheModel.productConsumptionKey;

		if ((productConsumptionKey != null) &&
			(productConsumptionKey.length() == 0)) {

			productConsumptionCacheModel.productConsumptionKey = null;
		}

		productConsumptionCacheModel.accountId = getAccountId();

		productConsumptionCacheModel.productEntryId = getProductEntryId();

		return productConsumptionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductConsumption, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductConsumption, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductConsumption, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ProductConsumption)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProductConsumption, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProductConsumption, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductConsumption, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProductConsumption)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductConsumption>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _productConsumptionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _productConsumptionKey;
	private String _originalProductConsumptionKey;
	private long _accountId;
	private long _originalAccountId;
	private boolean _setOriginalAccountId;
	private long _productEntryId;
	private long _originalProductEntryId;
	private boolean _setOriginalProductEntryId;
	private long _columnBitmask;
	private ProductConsumption _escapedModel;

}