/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.koroneiki.scion.service.base;

import com.liferay.osb.koroneiki.scion.model.ServiceProducer;
import com.liferay.osb.koroneiki.scion.service.ServiceProducerLocalService;
import com.liferay.osb.koroneiki.scion.service.persistence.AuthenticationTokenPersistence;
import com.liferay.osb.koroneiki.scion.service.persistence.ServiceProducerPersistence;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the service producer local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.osb.koroneiki.scion.service.impl.ServiceProducerLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.osb.koroneiki.scion.service.impl.ServiceProducerLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class ServiceProducerLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements ServiceProducerLocalService, AopService,
			   IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>ServiceProducerLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.osb.koroneiki.scion.service.ServiceProducerLocalServiceUtil</code>.
	 */

	/**
	 * Adds the service producer to the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProducer the service producer
	 * @return the service producer that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ServiceProducer addServiceProducer(ServiceProducer serviceProducer) {
		serviceProducer.setNew(true);

		return serviceProducerPersistence.update(serviceProducer);
	}

	/**
	 * Creates a new service producer with the primary key. Does not add the service producer to the database.
	 *
	 * @param serviceProducerId the primary key for the new service producer
	 * @return the new service producer
	 */
	@Override
	@Transactional(enabled = false)
	public ServiceProducer createServiceProducer(long serviceProducerId) {
		return serviceProducerPersistence.create(serviceProducerId);
	}

	/**
	 * Deletes the service producer with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProducerId the primary key of the service producer
	 * @return the service producer that was removed
	 * @throws PortalException if a service producer with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ServiceProducer deleteServiceProducer(long serviceProducerId)
		throws PortalException {

		return serviceProducerPersistence.remove(serviceProducerId);
	}

	/**
	 * Deletes the service producer from the database. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProducer the service producer
	 * @return the service producer that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ServiceProducer deleteServiceProducer(
		ServiceProducer serviceProducer) {

		return serviceProducerPersistence.remove(serviceProducer);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			ServiceProducer.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return serviceProducerPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.osb.koroneiki.scion.model.impl.ServiceProducerModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return serviceProducerPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.osb.koroneiki.scion.model.impl.ServiceProducerModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return serviceProducerPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return serviceProducerPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return serviceProducerPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public ServiceProducer fetchServiceProducer(long serviceProducerId) {
		return serviceProducerPersistence.fetchByPrimaryKey(serviceProducerId);
	}

	/**
	 * Returns the service producer with the matching UUID and company.
	 *
	 * @param uuid the service producer's UUID
	 * @param companyId the primary key of the company
	 * @return the matching service producer, or <code>null</code> if a matching service producer could not be found
	 */
	@Override
	public ServiceProducer fetchServiceProducerByUuidAndCompanyId(
		String uuid, long companyId) {

		return serviceProducerPersistence.fetchByUuid_C_First(
			uuid, companyId, null);
	}

	/**
	 * Returns the service producer with the primary key.
	 *
	 * @param serviceProducerId the primary key of the service producer
	 * @return the service producer
	 * @throws PortalException if a service producer with the primary key could not be found
	 */
	@Override
	public ServiceProducer getServiceProducer(long serviceProducerId)
		throws PortalException {

		return serviceProducerPersistence.findByPrimaryKey(serviceProducerId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(serviceProducerLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ServiceProducer.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("serviceProducerId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			serviceProducerLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ServiceProducer.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"serviceProducerId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(serviceProducerLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ServiceProducer.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("serviceProducerId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return serviceProducerLocalService.deleteServiceProducer(
			(ServiceProducer)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return serviceProducerPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the service producer with the matching UUID and company.
	 *
	 * @param uuid the service producer's UUID
	 * @param companyId the primary key of the company
	 * @return the matching service producer
	 * @throws PortalException if a matching service producer could not be found
	 */
	@Override
	public ServiceProducer getServiceProducerByUuidAndCompanyId(
			String uuid, long companyId)
		throws PortalException {

		return serviceProducerPersistence.findByUuid_C_First(
			uuid, companyId, null);
	}

	/**
	 * Returns a range of all the service producers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.osb.koroneiki.scion.model.impl.ServiceProducerModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of service producers
	 * @param end the upper bound of the range of service producers (not inclusive)
	 * @return the range of service producers
	 */
	@Override
	public List<ServiceProducer> getServiceProducers(int start, int end) {
		return serviceProducerPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of service producers.
	 *
	 * @return the number of service producers
	 */
	@Override
	public int getServiceProducersCount() {
		return serviceProducerPersistence.countAll();
	}

	/**
	 * Updates the service producer in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param serviceProducer the service producer
	 * @return the service producer that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ServiceProducer updateServiceProducer(
		ServiceProducer serviceProducer) {

		return serviceProducerPersistence.update(serviceProducer);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			ServiceProducerLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		serviceProducerLocalService = (ServiceProducerLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ServiceProducerLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ServiceProducer.class;
	}

	protected String getModelClassName() {
		return ServiceProducer.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = serviceProducerPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@Reference
	protected AuthenticationTokenPersistence authenticationTokenPersistence;

	protected ServiceProducerLocalService serviceProducerLocalService;

	@Reference
	protected ServiceProducerPersistence serviceProducerPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}