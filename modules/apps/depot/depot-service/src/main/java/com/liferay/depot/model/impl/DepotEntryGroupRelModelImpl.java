/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.depot.model.impl;

import com.liferay.depot.model.DepotEntryGroupRel;
import com.liferay.depot.model.DepotEntryGroupRelModel;
import com.liferay.depot.model.DepotEntryGroupRelSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DepotEntryGroupRel service. Represents a row in the &quot;DepotEntryGroupRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DepotEntryGroupRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepotEntryGroupRelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DepotEntryGroupRelImpl
 * @generated
 */
@JSON(strict = true)
public class DepotEntryGroupRelModelImpl
	extends BaseModelImpl<DepotEntryGroupRel>
	implements DepotEntryGroupRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a depot entry group rel model instance should use the <code>DepotEntryGroupRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "DepotEntryGroupRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"depotEntryGroupRelId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"ddmStructuresAvailable", Types.BOOLEAN},
		{"depotEntryId", Types.BIGINT}, {"searchable", Types.BOOLEAN},
		{"toGroupId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("depotEntryGroupRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ddmStructuresAvailable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("depotEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("searchable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("toGroupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DepotEntryGroupRel (mvccVersion LONG default 0 not null,depotEntryGroupRelId LONG not null primary key,companyId LONG,ddmStructuresAvailable BOOLEAN,depotEntryId LONG,searchable BOOLEAN,toGroupId LONG)";

	public static final String TABLE_SQL_DROP = "drop table DepotEntryGroupRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY depotEntryGroupRel.depotEntryGroupRelId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DepotEntryGroupRel.depotEntryGroupRelId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DDMSTRUCTURESAVAILABLE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DEPOTENTRYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SEARCHABLE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TOGROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DEPOTENTRYGROUPRELID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DepotEntryGroupRel toModel(DepotEntryGroupRelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DepotEntryGroupRel model = new DepotEntryGroupRelImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setDepotEntryGroupRelId(soapModel.getDepotEntryGroupRelId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setDdmStructuresAvailable(soapModel.isDdmStructuresAvailable());
		model.setDepotEntryId(soapModel.getDepotEntryId());
		model.setSearchable(soapModel.isSearchable());
		model.setToGroupId(soapModel.getToGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DepotEntryGroupRel> toModels(
		DepotEntryGroupRelSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DepotEntryGroupRel> models = new ArrayList<DepotEntryGroupRel>(
			soapModels.length);

		for (DepotEntryGroupRelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DepotEntryGroupRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _depotEntryGroupRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDepotEntryGroupRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _depotEntryGroupRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DepotEntryGroupRel.class;
	}

	@Override
	public String getModelClassName() {
		return DepotEntryGroupRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DepotEntryGroupRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DepotEntryGroupRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DepotEntryGroupRel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DepotEntryGroupRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DepotEntryGroupRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DepotEntryGroupRel, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DepotEntryGroupRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DepotEntryGroupRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DepotEntryGroupRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DepotEntryGroupRel>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DepotEntryGroupRel.class.getClassLoader(), DepotEntryGroupRel.class,
			ModelWrapper.class);

		try {
			Constructor<DepotEntryGroupRel> constructor =
				(Constructor<DepotEntryGroupRel>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DepotEntryGroupRel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DepotEntryGroupRel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DepotEntryGroupRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DepotEntryGroupRel, Object>>();
		Map<String, BiConsumer<DepotEntryGroupRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DepotEntryGroupRel, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", DepotEntryGroupRel::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<DepotEntryGroupRel, Long>)
				DepotEntryGroupRel::setMvccVersion);
		attributeGetterFunctions.put(
			"depotEntryGroupRelId",
			DepotEntryGroupRel::getDepotEntryGroupRelId);
		attributeSetterBiConsumers.put(
			"depotEntryGroupRelId",
			(BiConsumer<DepotEntryGroupRel, Long>)
				DepotEntryGroupRel::setDepotEntryGroupRelId);
		attributeGetterFunctions.put(
			"companyId", DepotEntryGroupRel::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DepotEntryGroupRel, Long>)
				DepotEntryGroupRel::setCompanyId);
		attributeGetterFunctions.put(
			"ddmStructuresAvailable",
			DepotEntryGroupRel::getDdmStructuresAvailable);
		attributeSetterBiConsumers.put(
			"ddmStructuresAvailable",
			(BiConsumer<DepotEntryGroupRel, Boolean>)
				DepotEntryGroupRel::setDdmStructuresAvailable);
		attributeGetterFunctions.put(
			"depotEntryId", DepotEntryGroupRel::getDepotEntryId);
		attributeSetterBiConsumers.put(
			"depotEntryId",
			(BiConsumer<DepotEntryGroupRel, Long>)
				DepotEntryGroupRel::setDepotEntryId);
		attributeGetterFunctions.put(
			"searchable", DepotEntryGroupRel::getSearchable);
		attributeSetterBiConsumers.put(
			"searchable",
			(BiConsumer<DepotEntryGroupRel, Boolean>)
				DepotEntryGroupRel::setSearchable);
		attributeGetterFunctions.put(
			"toGroupId", DepotEntryGroupRel::getToGroupId);
		attributeSetterBiConsumers.put(
			"toGroupId",
			(BiConsumer<DepotEntryGroupRel, Long>)
				DepotEntryGroupRel::setToGroupId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("mvccVersion");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getDepotEntryGroupRelId() {
		return _depotEntryGroupRelId;
	}

	@Override
	public void setDepotEntryGroupRelId(long depotEntryGroupRelId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("depotEntryGroupRelId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_depotEntryGroupRelId = depotEntryGroupRelId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("companyId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public boolean getDdmStructuresAvailable() {
		return _ddmStructuresAvailable;
	}

	@JSON
	@Override
	public boolean isDdmStructuresAvailable() {
		return _ddmStructuresAvailable;
	}

	@Override
	public void setDdmStructuresAvailable(boolean ddmStructuresAvailable) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("ddmStructuresAvailable");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_ddmStructuresAvailable = ddmStructuresAvailable;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalDdmStructuresAvailable() {
		return GetterUtil.getBoolean(
			getColumnOriginalValue("ddmStructuresAvailable"));
	}

	@JSON
	@Override
	public long getDepotEntryId() {
		return _depotEntryId;
	}

	@Override
	public void setDepotEntryId(long depotEntryId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("depotEntryId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_depotEntryId = depotEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDepotEntryId() {
		return GetterUtil.getLong(getColumnOriginalValue("depotEntryId"));
	}

	@JSON
	@Override
	public boolean getSearchable() {
		return _searchable;
	}

	@JSON
	@Override
	public boolean isSearchable() {
		return _searchable;
	}

	@Override
	public void setSearchable(boolean searchable) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("searchable");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_searchable = searchable;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalSearchable() {
		return GetterUtil.getBoolean(getColumnOriginalValue("searchable"));
	}

	@JSON
	@Override
	public long getToGroupId() {
		return _toGroupId;
	}

	@Override
	public void setToGroupId(long toGroupId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("toGroupId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_toGroupId = toGroupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalToGroupId() {
		return GetterUtil.getLong(getColumnOriginalValue("toGroupId"));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DepotEntryGroupRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DepotEntryGroupRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DepotEntryGroupRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DepotEntryGroupRelImpl depotEntryGroupRelImpl =
			new DepotEntryGroupRelImpl();

		depotEntryGroupRelImpl.setMvccVersion(getMvccVersion());
		depotEntryGroupRelImpl.setDepotEntryGroupRelId(
			getDepotEntryGroupRelId());
		depotEntryGroupRelImpl.setCompanyId(getCompanyId());
		depotEntryGroupRelImpl.setDdmStructuresAvailable(
			isDdmStructuresAvailable());
		depotEntryGroupRelImpl.setDepotEntryId(getDepotEntryId());
		depotEntryGroupRelImpl.setSearchable(isSearchable());
		depotEntryGroupRelImpl.setToGroupId(getToGroupId());

		depotEntryGroupRelImpl.resetOriginalValues();

		return depotEntryGroupRelImpl;
	}

	@Override
	public int compareTo(DepotEntryGroupRel depotEntryGroupRel) {
		long primaryKey = depotEntryGroupRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DepotEntryGroupRel)) {
			return false;
		}

		DepotEntryGroupRel depotEntryGroupRel = (DepotEntryGroupRel)object;

		long primaryKey = depotEntryGroupRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DepotEntryGroupRel> toCacheModel() {
		DepotEntryGroupRelCacheModel depotEntryGroupRelCacheModel =
			new DepotEntryGroupRelCacheModel();

		depotEntryGroupRelCacheModel.mvccVersion = getMvccVersion();

		depotEntryGroupRelCacheModel.depotEntryGroupRelId =
			getDepotEntryGroupRelId();

		depotEntryGroupRelCacheModel.companyId = getCompanyId();

		depotEntryGroupRelCacheModel.ddmStructuresAvailable =
			isDdmStructuresAvailable();

		depotEntryGroupRelCacheModel.depotEntryId = getDepotEntryId();

		depotEntryGroupRelCacheModel.searchable = isSearchable();

		depotEntryGroupRelCacheModel.toGroupId = getToGroupId();

		return depotEntryGroupRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DepotEntryGroupRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DepotEntryGroupRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DepotEntryGroupRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DepotEntryGroupRel)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DepotEntryGroupRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DepotEntryGroupRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DepotEntryGroupRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DepotEntryGroupRel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DepotEntryGroupRel>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mvccVersion;
	private long _depotEntryGroupRelId;
	private long _companyId;
	private boolean _ddmStructuresAvailable;
	private long _depotEntryId;
	private boolean _searchable;
	private long _toGroupId;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put(
			"depotEntryGroupRelId", _depotEntryGroupRelId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put(
			"ddmStructuresAvailable", _ddmStructuresAvailable);
		_columnOriginalValues.put("depotEntryId", _depotEntryId);
		_columnOriginalValues.put("searchable", _searchable);
		_columnOriginalValues.put("toGroupId", _toGroupId);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new LinkedHashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("depotEntryGroupRelId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("ddmStructuresAvailable", 8L);

		columnBitmasks.put("depotEntryId", 16L);

		columnBitmasks.put("searchable", 32L);

		columnBitmasks.put("toGroupId", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private long _columnBitmask;
	private DepotEntryGroupRel _escapedModel;

}