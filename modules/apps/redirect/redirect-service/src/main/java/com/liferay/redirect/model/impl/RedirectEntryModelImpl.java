/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.redirect.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.redirect.model.RedirectEntry;
import com.liferay.redirect.model.RedirectEntryModel;
import com.liferay.redirect.model.RedirectEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RedirectEntry service. Represents a row in the &quot;RedirectEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RedirectEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RedirectEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RedirectEntryImpl
 * @generated
 */
@JSON(strict = true)
public class RedirectEntryModelImpl
	extends BaseModelImpl<RedirectEntry> implements RedirectEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a redirect entry model instance should use the <code>RedirectEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "RedirectEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"redirectEntryId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"destinationURL", Types.VARCHAR},
		{"expirationDate", Types.TIMESTAMP},
		{"lastOccurrenceDate", Types.TIMESTAMP}, {"permanent_", Types.BOOLEAN},
		{"sourceURL", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("redirectEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("destinationURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastOccurrenceDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permanent_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sourceURL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RedirectEntry (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,redirectEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,destinationURL STRING null,expirationDate DATE null,lastOccurrenceDate DATE null,permanent_ BOOLEAN,sourceURL STRING null)";

	public static final String TABLE_SQL_DROP = "drop table RedirectEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY redirectEntry.redirectEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RedirectEntry.redirectEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DESTINATIONURL_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SOURCEURL_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REDIRECTENTRYID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static RedirectEntry toModel(RedirectEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RedirectEntry model = new RedirectEntryImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setRedirectEntryId(soapModel.getRedirectEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDestinationURL(soapModel.getDestinationURL());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setLastOccurrenceDate(soapModel.getLastOccurrenceDate());
		model.setPermanent(soapModel.isPermanent());
		model.setSourceURL(soapModel.getSourceURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<RedirectEntry> toModels(RedirectEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RedirectEntry> models = new ArrayList<RedirectEntry>(
			soapModels.length);

		for (RedirectEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RedirectEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _redirectEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRedirectEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _redirectEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RedirectEntry.class;
	}

	@Override
	public String getModelClassName() {
		return RedirectEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RedirectEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RedirectEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RedirectEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RedirectEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RedirectEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RedirectEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RedirectEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RedirectEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RedirectEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RedirectEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RedirectEntry.class.getClassLoader(), RedirectEntry.class,
			ModelWrapper.class);

		try {
			Constructor<RedirectEntry> constructor =
				(Constructor<RedirectEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<RedirectEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RedirectEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RedirectEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RedirectEntry, Object>>();
		Map<String, BiConsumer<RedirectEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RedirectEntry, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", RedirectEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<RedirectEntry, Long>)RedirectEntry::setMvccVersion);
		attributeGetterFunctions.put("uuid", RedirectEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<RedirectEntry, String>)RedirectEntry::setUuid);
		attributeGetterFunctions.put(
			"redirectEntryId", RedirectEntry::getRedirectEntryId);
		attributeSetterBiConsumers.put(
			"redirectEntryId",
			(BiConsumer<RedirectEntry, Long>)RedirectEntry::setRedirectEntryId);
		attributeGetterFunctions.put("groupId", RedirectEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RedirectEntry, Long>)RedirectEntry::setGroupId);
		attributeGetterFunctions.put("companyId", RedirectEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RedirectEntry, Long>)RedirectEntry::setCompanyId);
		attributeGetterFunctions.put("userId", RedirectEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<RedirectEntry, Long>)RedirectEntry::setUserId);
		attributeGetterFunctions.put("userName", RedirectEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<RedirectEntry, String>)RedirectEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", RedirectEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RedirectEntry, Date>)RedirectEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RedirectEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RedirectEntry, Date>)RedirectEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"destinationURL", RedirectEntry::getDestinationURL);
		attributeSetterBiConsumers.put(
			"destinationURL",
			(BiConsumer<RedirectEntry, String>)
				RedirectEntry::setDestinationURL);
		attributeGetterFunctions.put(
			"expirationDate", RedirectEntry::getExpirationDate);
		attributeSetterBiConsumers.put(
			"expirationDate",
			(BiConsumer<RedirectEntry, Date>)RedirectEntry::setExpirationDate);
		attributeGetterFunctions.put(
			"lastOccurrenceDate", RedirectEntry::getLastOccurrenceDate);
		attributeSetterBiConsumers.put(
			"lastOccurrenceDate",
			(BiConsumer<RedirectEntry, Date>)
				RedirectEntry::setLastOccurrenceDate);
		attributeGetterFunctions.put("permanent", RedirectEntry::getPermanent);
		attributeSetterBiConsumers.put(
			"permanent",
			(BiConsumer<RedirectEntry, Boolean>)RedirectEntry::setPermanent);
		attributeGetterFunctions.put("sourceURL", RedirectEntry::getSourceURL);
		attributeSetterBiConsumers.put(
			"sourceURL",
			(BiConsumer<RedirectEntry, String>)RedirectEntry::setSourceURL);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("mvccVersion");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("uuid_");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRedirectEntryId() {
		return _redirectEntryId;
	}

	@Override
	public void setRedirectEntryId(long redirectEntryId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("redirectEntryId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_redirectEntryId = redirectEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("groupId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("companyId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("userId");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("userName");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("createDate");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("modifiedDate");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDestinationURL() {
		if (_destinationURL == null) {
			return "";
		}
		else {
			return _destinationURL;
		}
	}

	@Override
	public void setDestinationURL(String destinationURL) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("destinationURL");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_destinationURL = destinationURL;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDestinationURL() {
		return getColumnOriginalValue("destinationURL");
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("expirationDate");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_expirationDate = expirationDate;
	}

	@JSON
	@Override
	public Date getLastOccurrenceDate() {
		return _lastOccurrenceDate;
	}

	@Override
	public void setLastOccurrenceDate(Date lastOccurrenceDate) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("lastOccurrenceDate");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_lastOccurrenceDate = lastOccurrenceDate;
	}

	@JSON
	@Override
	public boolean getPermanent() {
		return _permanent;
	}

	@JSON
	@Override
	public boolean isPermanent() {
		return _permanent;
	}

	@Override
	public void setPermanent(boolean permanent) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("permanent_");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_permanent = permanent;
	}

	@JSON
	@Override
	public String getSourceURL() {
		if (_sourceURL == null) {
			return "";
		}
		else {
			return _sourceURL;
		}
	}

	@Override
	public void setSourceURL(String sourceURL) {
		if (_columnOriginalValues != null) {
			_columnBitmask |= _columnBitmasks.get("sourceURL");

			if (_columnOriginalValues == Collections.EMPTY_MAP) {
				_setColumnOriginalValues();
			}
		}

		_sourceURL = sourceURL;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSourceURL() {
		return getColumnOriginalValue("sourceURL");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(RedirectEntry.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RedirectEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RedirectEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RedirectEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RedirectEntryImpl redirectEntryImpl = new RedirectEntryImpl();

		redirectEntryImpl.setMvccVersion(getMvccVersion());
		redirectEntryImpl.setUuid(getUuid());
		redirectEntryImpl.setRedirectEntryId(getRedirectEntryId());
		redirectEntryImpl.setGroupId(getGroupId());
		redirectEntryImpl.setCompanyId(getCompanyId());
		redirectEntryImpl.setUserId(getUserId());
		redirectEntryImpl.setUserName(getUserName());
		redirectEntryImpl.setCreateDate(getCreateDate());
		redirectEntryImpl.setModifiedDate(getModifiedDate());
		redirectEntryImpl.setDestinationURL(getDestinationURL());
		redirectEntryImpl.setExpirationDate(getExpirationDate());
		redirectEntryImpl.setLastOccurrenceDate(getLastOccurrenceDate());
		redirectEntryImpl.setPermanent(isPermanent());
		redirectEntryImpl.setSourceURL(getSourceURL());

		redirectEntryImpl.resetOriginalValues();

		return redirectEntryImpl;
	}

	@Override
	public int compareTo(RedirectEntry redirectEntry) {
		long primaryKey = redirectEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RedirectEntry)) {
			return false;
		}

		RedirectEntry redirectEntry = (RedirectEntry)object;

		long primaryKey = redirectEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RedirectEntry> toCacheModel() {
		RedirectEntryCacheModel redirectEntryCacheModel =
			new RedirectEntryCacheModel();

		redirectEntryCacheModel.mvccVersion = getMvccVersion();

		redirectEntryCacheModel.uuid = getUuid();

		String uuid = redirectEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			redirectEntryCacheModel.uuid = null;
		}

		redirectEntryCacheModel.redirectEntryId = getRedirectEntryId();

		redirectEntryCacheModel.groupId = getGroupId();

		redirectEntryCacheModel.companyId = getCompanyId();

		redirectEntryCacheModel.userId = getUserId();

		redirectEntryCacheModel.userName = getUserName();

		String userName = redirectEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			redirectEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			redirectEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			redirectEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			redirectEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			redirectEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		redirectEntryCacheModel.destinationURL = getDestinationURL();

		String destinationURL = redirectEntryCacheModel.destinationURL;

		if ((destinationURL != null) && (destinationURL.length() == 0)) {
			redirectEntryCacheModel.destinationURL = null;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			redirectEntryCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			redirectEntryCacheModel.expirationDate = Long.MIN_VALUE;
		}

		Date lastOccurrenceDate = getLastOccurrenceDate();

		if (lastOccurrenceDate != null) {
			redirectEntryCacheModel.lastOccurrenceDate =
				lastOccurrenceDate.getTime();
		}
		else {
			redirectEntryCacheModel.lastOccurrenceDate = Long.MIN_VALUE;
		}

		redirectEntryCacheModel.permanent = isPermanent();

		redirectEntryCacheModel.sourceURL = getSourceURL();

		String sourceURL = redirectEntryCacheModel.sourceURL;

		if ((sourceURL != null) && (sourceURL.length() == 0)) {
			redirectEntryCacheModel.sourceURL = null;
		}

		return redirectEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RedirectEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RedirectEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RedirectEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RedirectEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RedirectEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RedirectEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RedirectEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RedirectEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RedirectEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mvccVersion;
	private String _uuid;
	private long _redirectEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _destinationURL;
	private Date _expirationDate;
	private Date _lastOccurrenceDate;
	private boolean _permanent;
	private String _sourceURL;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("redirectEntryId", _redirectEntryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("destinationURL", _destinationURL);
		_columnOriginalValues.put("expirationDate", _expirationDate);
		_columnOriginalValues.put("lastOccurrenceDate", _lastOccurrenceDate);
		_columnOriginalValues.put("permanent_", _permanent);
		_columnOriginalValues.put("sourceURL", _sourceURL);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new LinkedHashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("redirectEntryId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("destinationURL", 512L);

		columnBitmasks.put("expirationDate", 1024L);

		columnBitmasks.put("lastOccurrenceDate", 2048L);

		columnBitmasks.put("permanent_", 4096L);

		columnBitmasks.put("sourceURL", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private long _columnBitmask;
	private RedirectEntry _escapedModel;

}