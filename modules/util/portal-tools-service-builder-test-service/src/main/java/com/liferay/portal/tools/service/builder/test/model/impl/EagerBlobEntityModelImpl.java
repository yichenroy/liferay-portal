/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.tools.service.builder.test.model.EagerBlobEntity;
import com.liferay.portal.tools.service.builder.test.model.EagerBlobEntityModel;
import com.liferay.portal.tools.service.builder.test.model.EagerBlobEntitySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EagerBlobEntity service. Represents a row in the &quot;EagerBlobEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EagerBlobEntityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EagerBlobEntityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EagerBlobEntityImpl
 * @generated
 */
@JSON(strict = true)
public class EagerBlobEntityModelImpl
	extends BaseModelImpl<EagerBlobEntity> implements EagerBlobEntityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eager blob entity model instance should use the <code>EagerBlobEntity</code> interface instead.
	 */
	public static final String TABLE_NAME = "EagerBlobEntity";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eagerBlobEntityId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"blob_", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eagerBlobEntityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("blob_", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EagerBlobEntity (uuid_ VARCHAR(75) null,eagerBlobEntityId LONG not null primary key,groupId LONG,blob_ BLOB)";

	public static final String TABLE_SQL_DROP = "drop table EagerBlobEntity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY eagerBlobEntity.eagerBlobEntityId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EagerBlobEntity.eagerBlobEntityId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = false;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static EagerBlobEntity toModel(EagerBlobEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EagerBlobEntity model = new EagerBlobEntityImpl();

		model.setUuid(soapModel.getUuid());
		model.setEagerBlobEntityId(soapModel.getEagerBlobEntityId());
		model.setGroupId(soapModel.getGroupId());
		model.setBlob(soapModel.getBlob());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<EagerBlobEntity> toModels(
		EagerBlobEntitySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EagerBlobEntity> models = new ArrayList<EagerBlobEntity>(
			soapModels.length);

		for (EagerBlobEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.
			get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.EagerBlobEntity"));

	public EagerBlobEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eagerBlobEntityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEagerBlobEntityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eagerBlobEntityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EagerBlobEntity.class;
	}

	@Override
	public String getModelClassName() {
		return EagerBlobEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EagerBlobEntity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EagerBlobEntity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EagerBlobEntity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EagerBlobEntity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EagerBlobEntity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EagerBlobEntity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EagerBlobEntity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EagerBlobEntity, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EagerBlobEntity, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EagerBlobEntity>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EagerBlobEntity.class.getClassLoader(), EagerBlobEntity.class,
			ModelWrapper.class);

		try {
			Constructor<EagerBlobEntity> constructor =
				(Constructor<EagerBlobEntity>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EagerBlobEntity, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EagerBlobEntity, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EagerBlobEntity, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<EagerBlobEntity, Object>>();
		Map<String, BiConsumer<EagerBlobEntity, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EagerBlobEntity, ?>>();

		attributeGetterFunctions.put("uuid", EagerBlobEntity::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EagerBlobEntity, String>)EagerBlobEntity::setUuid);
		attributeGetterFunctions.put(
			"eagerBlobEntityId", EagerBlobEntity::getEagerBlobEntityId);
		attributeSetterBiConsumers.put(
			"eagerBlobEntityId",
			(BiConsumer<EagerBlobEntity, Long>)
				EagerBlobEntity::setEagerBlobEntityId);
		attributeGetterFunctions.put("groupId", EagerBlobEntity::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EagerBlobEntity, Long>)EagerBlobEntity::setGroupId);
		attributeGetterFunctions.put("blob", EagerBlobEntity::getBlob);
		attributeSetterBiConsumers.put(
			"blob",
			(BiConsumer<EagerBlobEntity, Blob>)EagerBlobEntity::setBlob);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEagerBlobEntityId() {
		return _eagerBlobEntityId;
	}

	@Override
	public void setEagerBlobEntityId(long eagerBlobEntityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eagerBlobEntityId = eagerBlobEntityId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public Blob getBlob() {
		return _blob;
	}

	@Override
	public void setBlob(Blob blob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_blob = blob;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EagerBlobEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EagerBlobEntity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EagerBlobEntity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EagerBlobEntityImpl eagerBlobEntityImpl = new EagerBlobEntityImpl();

		eagerBlobEntityImpl.setUuid(getUuid());
		eagerBlobEntityImpl.setEagerBlobEntityId(getEagerBlobEntityId());
		eagerBlobEntityImpl.setGroupId(getGroupId());

		eagerBlobEntityImpl.resetOriginalValues();

		return eagerBlobEntityImpl;
	}

	@Override
	public int compareTo(EagerBlobEntity eagerBlobEntity) {
		long primaryKey = eagerBlobEntity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EagerBlobEntity)) {
			return false;
		}

		EagerBlobEntity eagerBlobEntity = (EagerBlobEntity)object;

		long primaryKey = eagerBlobEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();
	}

	@Override
	public CacheModel<EagerBlobEntity> toCacheModel() {
		EagerBlobEntityCacheModel eagerBlobEntityCacheModel =
			new EagerBlobEntityCacheModel();

		eagerBlobEntityCacheModel.uuid = getUuid();

		String uuid = eagerBlobEntityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eagerBlobEntityCacheModel.uuid = null;
		}

		eagerBlobEntityCacheModel.eagerBlobEntityId = getEagerBlobEntityId();

		eagerBlobEntityCacheModel.groupId = getGroupId();

		return eagerBlobEntityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EagerBlobEntity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EagerBlobEntity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EagerBlobEntity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EagerBlobEntity)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EagerBlobEntity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EagerBlobEntity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EagerBlobEntity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EagerBlobEntity)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EagerBlobEntity>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _eagerBlobEntityId;
	private long _groupId;
	private Blob _blob;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("eagerBlobEntityId", _eagerBlobEntityId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("blob_", _blob);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new LinkedHashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("eagerBlobEntityId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("blob_", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private EagerBlobEntity _escapedModel;

}