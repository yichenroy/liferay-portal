import com.liferay.gradle.util.GradleUtil
import com.liferay.gradle.util.Validator

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript
}

task checkoutDXPScript
task removeDXPScript

String gitCommitId = System.getProperty("profile.dxp.commit.id", "")

String gitBranchName = "master-private"
String gitRepositoryURL = "git@github.com:liferay/liferay-portal-ee.git"

Boolean upstreamStableSuite = Boolean.valueOf(System.getProperty("upstream.stable.suite", "false"));

if (upstreamStableSuite) {
	gitRepositoryURL = "git@github.com:brianchandotcom/liferay-portal-ee.git"
}

File gitRepositoryDir = new File(projectDir.parentFile, "git-clone-profile-dxp")

checkoutDXPScript {
	dependsOn removeDXPScript

	doLast {
		if (System.getenv("JENKINS_HOME") && !upstreamStableSuite) {
			logger.lifecycle "git clone --branch={} --depth=100 --no-checkout --single-branch {} {}", gitBranchName, "git@github-dev.liferay.com:liferay/liferay-portal-ee.git", gitRepositoryDir.name

			exec {
				commandLine "git", "clone", "--branch=" + gitBranchName, "--depth=100", "--no-checkout", "--single-branch", "git@github-dev.liferay.com:liferay/liferay-portal-ee.git", gitRepositoryDir.name
				workingDir = projectDir.parentFile
			}

			ByteArrayOutputStream outputByteArrayOutputStream = new ByteArrayOutputStream()

			exec {
				commandLine "git", "rev-parse", gitBranchName
				standardOutput = outputByteArrayOutputStream
				workingDir = gitRepositoryDir
			}

			String githubDevGitHash = outputByteArrayOutputStream.toString()

			outputByteArrayOutputStream = new ByteArrayOutputStream()

			exec {
				commandLine "git", "ls-remote", gitRepositoryURL, gitBranchName
				standardOutput = outputByteArrayOutputStream
				workingDir = projectDir.parentFile
			}

			String githubGitOutput = outputByteArrayOutputStream.toString()

			String githubGitHash = githubGitOutput.replaceAll("([0-9a-f]+).*", "\$1")

			if (!githubGitHash.equals(githubDevGitHash)) {
				delete gitRepositoryDir
			}
		}

		if (!gitRepositoryDir.exists()) {
			logger.lifecycle "git clone --branch={} --depth=100 --no-checkout --single-branch {} {}", gitBranchName, gitRepositoryURL, gitRepositoryDir.name

			exec {
				commandLine "git", "clone", "--branch=" + gitBranchName, "--depth=100", "--no-checkout", "--single-branch", gitRepositoryURL, gitRepositoryDir.name
				workingDir = projectDir.parentFile
			}
		}

		if (gitCommitId) {
			exec {
				commandLine "git", "checkout", gitCommitId, "--", "build-working-dir.xml", "working.dir.properties"
				workingDir = gitRepositoryDir
			}
		}
		else {
			exec {
				commandLine "git", "checkout", "refs/heads/" + gitBranchName, "--", "build-working-dir.xml", "working.dir.properties"
				workingDir = gitRepositoryDir
			}
		}

		ant.move(file: new File(gitRepositoryDir, "build-working-dir.xml"), todir: projectDir.parentFile)
		ant.move(file: new File(gitRepositoryDir, "working.dir.properties"), todir: projectDir.parentFile)
	}
}

removeDXPScript {
	doLast {
		delete gitRepositoryDir, new File(projectDir.parentFile, "build-working-dir.xml"), new File(projectDir.parentFile, "working.dir.properties")
	}
}