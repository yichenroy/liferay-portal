<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-app">
	<extension-point name="release-tool-dependencies" />

	<property location="${modules.dir}/../bundles" name="liferay.home" />
	<property location="${modules.dir}/.." name="project.dir" />

	<property file="../app.server.${user.name}.properties" />
	<property file="../app.server.${env.COMPUTERNAME}.properties" />
	<property file="../app.server.${env.HOST}.properties" />
	<property file="../app.server.${env.HOSTNAME}.properties" />
	<property file="../app.server.properties" />

	<property file="../build.properties" />

	<property name="portal.lib.dir" value="${app.server.tomcat.lib.portal.dir}" />

	<property name="osgi.dir" value="${liferay.home}/osgi" />

	<macrodef name="set-artifact-versions-previous-release">
		<attribute name="app.version.previous.release" />

		<sequential>
			<property name="artifact.versions.previous.release" value="${app.artifacts-@{app.version.previous.release}}" />
		</sequential>
	</macrodef>

	<target depends="dist-module-artifacts,update-app-marketplace-verson,write-app-change-log,zip-app-sources" name="build-app">
		<delete file="${dist.dir}/ticket.list.tmp" />

		<antcall target="git-finalize" />
	</target>

	<target name="build-app-all">
		<fail message="Please provide a comma delimited list of app names.${line.separator}(e.g. -Dapp.names=collaboration,forms-and-workflow,foundation,static,web-experience)">
			<condition>
				<not>
					<isset property="app.names" />
				</not>
			</condition>
		</fail>

		<for list="${app.names}" param="app.name">
			<sequential>
				<antcall inheritall="false" target="build-app">
					<param name="app.name" value="@{app.name}" />
					<param name="git.finalize" value="true" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target depends="dist-module-artifacts,get-app-change-log" name="build-app-from-changelog">
		<delete file="${dist.dir}/ticket.list.tmp" />
	</target>

	<target depends="dist-module-artifacts-lpkg" name="build-app-lpkg" unless="module.dirs.null">
		<if>
			<resourcecount count="0" when="greater">
				<fileset
					dir="${osgi.dir}/marketplace"
					includes="*.jar,*.war"
				/>
			</resourcecount>
			<then>
				<antcall target="write-lpkg-marketplace-properties">
					<param name="lpkg.dir" value="${osgi.dir}/marketplace" />
					<param name="title" value="${Liferay-Releng-App-Title}" />
				</antcall>

				<zip
					basedir="${osgi.dir}/marketplace"
					destfile="${osgi.dir}/marketplace/${Liferay-Releng-App-Title}.lpkg"
					includes="*.jar,*.war,liferay-marketplace.properties"
				/>
			</then>
		</if>

		<for param="lpkg.dir">
			<path>
				<dirset
					dir="${osgi.dir}/marketplace"
				>
					<include name="*/**" />
					<exclude name="override" />
				</dirset>
			</path>
			<sequential>
				<local name="lpkg.dir.name" />

				<basename file="@{lpkg.dir}" property="lpkg.dir.name" />

				<antcall target="write-lpkg-marketplace-properties">
					<param name="lpkg.dir" value="@{lpkg.dir}" />
					<param name="title" value="${lpkg.dir.name}" />
				</antcall>

				<zip
					basedir="@{lpkg.dir}"
					destfile="${osgi.dir}/marketplace/${lpkg.dir.name}.lpkg"
					includes="*.jar,*.war,liferay-marketplace.properties"
				/>
			</sequential>
		</for>

		<delete includeemptydirs="true">
			<fileset
				dir="${osgi.dir}/marketplace"
				excludes="override, *.lpkg"
				includes="**/*"
			/>
		</delete>
	</target>

	<target name="build-app-lpkg-all">
		<pathconvert pathsep="," property="app.names">
			<globmapper
				from="${modules.dir}${file.separator}apps${file.separator}*"
				to="*"
			/>
			<path>
				<dirset
					dir="${modules.dir}"
					includes="apps/*"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/app.bnd"
							type="glob"
						/>
					</present>
				</dirset>
			</path>
		</pathconvert>

		<for list="${app.names}" param="app.name">
			<sequential>
				<antcall inheritall="false" target="build-app-lpkg">
					<param name="app.name" value="@{app.name}" />
				</antcall>
			</sequential>
		</for>

		<antcall target="index-modules-and-app-lpkgs" />
	</target>

	<target name="build-app-lpkg-release">
		<for param="app.dir">
			<path>
				<dirset
					dir="${modules.dir}"
				>
					<include name="apps/*" />
					<include name="private/apps/*" />
					<exclude name="${build.exclude.dirs}" />
				</dirset>
			</path>

			<sequential>
				<local name="app.name" />
				<local name="Liferay-Releng-Bundle" />

				<basename file="@{app.dir}" property="app.name" />

				<property file="@{app.dir}/app.bnd" />

				<if>
					<equals arg1="${Liferay-Releng-Bundle}" arg2="true" />
					<then>
						<ant inheritAll="false" target="build-app-lpkg">
							<property name="app.name" value="${app.name}" />
						</ant>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="check-current-branch">
		<loadproperties srcFile="${modules.dir}/../release.properties">
			<filterchain>
				<linecontains>
					<contains value="lp.version=" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<condition property="current.branch.private">
			<or>
				<istrue value="${ee.override}" />
				<resourcecontains
					resource="${modules.dir}/../portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
					substring=" DXP "
				/>
			</or>
		</condition>

		<condition else="Liferay CE" property="liferay.releng.app.title.prefix" value="Liferay">
			<istrue value="${current.branch.private}" />
		</condition>
	</target>

	<target depends="get-app-version,init-build-app" name="check-stale-artifacts" unless="check.stale.artifacts.skip">
		<property location="${gradle.wrapper.path}" name="gradle.wrapper.path" />

		<exec dir="${app.dir}" executable="${gradle.wrapper.path}" outputproperty="stale.artifacts.output">
			<arg value="printStaleArtifact" />
			<arg value="-q" />
		</exec>

		<loadfile
			property="module.stale.artifacts"
		>
			<filterchain>
				<linecontains>
					<contains value="${app.name}" />
				</linecontains>
			</filterchain>
			<propertyresource name="stale.artifacts.output" />
		</loadfile>

		<fail message="Stale artifacts detected:${line.separator}${module.stale.artifacts}">
			<condition>
				<isset property="module.stale.artifacts" />
			</condition>
		</fail>
	</target>

	<target depends="check-current-branch" if="${current.branch.private}" name="checkout-public-modules-releng">
		<loadfile
			property="git.commit.portal.public"
			srcfile="${project.dir}/git-commit-portal"
		>
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<echo message="Checking out ${app.name} public releng info from commit ID: ${git.commit.portal.public}" />

		<exec dir="${project.dir}/modules" executable="git">
			<arg value="checkout" />
			<arg value="${git.commit.portal.public}" />
			<arg value=".releng/apps/${app.name}" />
		</exec>
	</target>

	<target depends="init-build-app" name="clean-app">
		<delete dir="${dist.dir}" />

		<exec dir="${releng.app.dir}" executable="git">
			<arg line="clean" />
			<arg line="-f" />
		</exec>

		<exec dir="${releng.app.dir}" executable="git">
			<arg line="checkout" />
			<arg line="app.changelog" />
		</exec>
	</target>

	<target depends="check-stale-artifacts,get-artifact-versions-previous-release" name="dist-module-artifacts">
		<mkdir dir="${dist.dir}" />

		<subant genericantfile="${modules.dir}/build-app-module.xml" target="dist-module-artifact">
			<dirset
				dir="${modules.dir}"
				excludes="${build.modules.excludes}"
				includes="${app.module.dirs}"
			/>
			<property name="app.first.version" value="${app.first.version}" />
			<property name="artifact.versions.previous.release" value="${artifact.versions.previous.release}" />
			<property name="build.repository.private.password" value="${build.repository.private.password}" />
			<property name="build.repository.private.username" value="${build.repository.private.username}" />
			<property name="current.branch.private" value="${current.branch.private}" />
			<property name="dist.dir" value="${dist.dir}" />
			<property name="download.artifact.sources" value="${download.app.sources}" />
		</subant>
	</target>

	<target depends="get-osgi-static-modules,init-build-app" name="dist-module-artifacts-lpkg" unless="module.dirs.null">
		<if>
			<and>
				<isset property="Liferay-Releng-Suite" />
				<not>
					<equals arg1="${Liferay-Releng-Suite}" arg2="" />
				</not>
			</and>
			<then>
				<sequential>
					<loadproperties srcFile="${modules.dir}/suites/${Liferay-Releng-Suite}/suite.bnd">
						<filterchain>
							<linecontains>
								<contains value="Liferay-Releng-Suite-Title" />
							</linecontains>
						</filterchain>
					</loadproperties>

					<property name="lpkg.title.prefix" value="${Liferay-Releng-Suite-Title} - " />
				</sequential>
			</then>
			<else>
				<property name="lpkg.title.prefix" value="" />
			</else>
		</if>

		<subant genericantfile="${modules.dir}/build-app-module.xml" target="dist-module-artifact-lpkg">
			<dirset
				dir="${modules.dir}"
				excludes="${build.modules.excludes}"
				includes="${app.module.dirs}"
			/>
			<property name="liferay.releng.app.title" value="${Liferay-Releng-App-Title}" />
			<property name="lp.version" value="${lp.version}" />
			<property name="lpkg.title.prefix" value="${lpkg.title.prefix}" />
			<property name="osgi.dir" value="${osgi.dir}" />
			<property name="osgi.static.modules" value="${osgi.static.modules}" />
			<property name="project.dir" value="${project.dir}" />
		</subant>
	</target>

	<target depends="init-build-app,get-app-version" name="get-app-artifacts">
		<pathconvert pathsep=",\${line.separator}&#x0009;" property="module.versions.list">
			<flattenmapper />

			<path>
				<fileset
					dir="${dist.dir}"
					includes="*.jar,*.war"
				/>
			</path>
		</pathconvert>

		<property name="app.artifacts" value="app.artifacts-${app.version}=\${line.separator}&#x0009;${module.versions.list}" />
	</target>

	<target depends="dist-module-artifacts,init-build-app,get-app-version" name="get-app-change-log">
		<loadfile
			failonerror="false"
			property="app.ticket.list"
			srcfile="${dist.dir}/ticket.list.tmp"
		>
			<filterchain>
				<tokenfilter>
					<filetokenizer />
					<replacestring from=" " to="${line.separator}" />
				</tokenfilter>

				<sortfilter />

				<uniqfilter />

				<tokenfilter>
					<filetokenizer />
					<replacestring from="${line.separator}" to=" " />
					<replaceregex pattern="^ | $" replace="" />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<property name="app.change.log" value="app.change.log-${app.version}=${app.ticket.list}" />
	</target>

	<target name="get-app-change-log-header">
		<condition else="${line.separator}${line.separator}" property="app.change.log.version.separator" value="">
			<istrue value="${app.first.version}" />
		</condition>

		<property name="app.change.log.header" value="${app.change.log.version.separator}#${line.separator}# Liferay App Version ${app.version}${line.separator}#" />
	</target>

	<target depends="get-app-version" name="get-app-git-id">
		<exec dir="${project.dir}" executable="git" outputproperty="git.rev.parse.output">
			<arg value="rev-parse" />
			<arg value="HEAD" />
		</exec>

		<property name="app.git.id" value="app.git.id-${app.version}=${git.rev.parse.output}" />
	</target>

	<target depends="init-build-app" name="get-app-properties">
		<property file="${releng.app.dir}/app.properties" />

		<condition property="app.version" value="${app.marketplace.version}">
			<istrue value="${build.app.from.changelog}" />
		</condition>

		<property name="app.version.previous.release" value="${app.marketplace.version}" />
	</target>

	<target depends="get-app-properties" name="get-app-version" unless="build.app.from.changelog">
		<loadfile
			property="app.major.minor.version.previous.release"
		>
			<filterchain>
				<replaceregex pattern="(\d{1,2}\.\d{1,2})\.\d{1,2}" replace="\1" />

				<striplinebreaks />
			</filterchain>
			<propertyresource name="app.version.previous.release" />
		</loadfile>

		<loadfile
			property="app.bug.fix.version.previous.release"
		>
			<filterchain>
				<replaceregex pattern="\d{1,2}\.\d{1,2}\.(\d{1,2})" replace="\1" />
			</filterchain>
			<propertyresource name="app.version.previous.release" />
		</loadfile>

		<math
			datatype="int"
			operand1="${app.bug.fix.version.previous.release}"
			operand2="1"
			operation="+"
			result="app.bug.fix.version"
		/>

		<property name="app.version" value="${app.major.minor.version.previous.release}.${app.bug.fix.version}" />
	</target>

	<target depends="get-app-properties" name="get-artifact-versions-previous-release">
		<property file="${releng.app.dir}/app.changelog" />

		<set-artifact-versions-previous-release app.version.previous.release="${app.version.previous.release}" />
	</target>

	<target name="get-lpkg-artifacts-list">
		<pathconvert pathsep="," property="lpkg.artifacts.list">
			<chainedmapper>
				<flattenmapper />

				<regexpmapper from="^(.+?)-(\d.*?)\.jar$" to="\1#\2##" />
			</chainedmapper>
			<fileset
				dir="${lpkg.dir}"
				includes="*.jar"
			/>
		</pathconvert>
	</target>

	<target depends="init-build-app" if="osgi.static.dir.available" name="get-osgi-static-modules">
		<pathconvert property="osgi.static.modules">
			<fileset
				dir="${osgi.dir}/static"
				includes="*.jar"
			/>

			<flattenmapper />
		</pathconvert>
	</target>

	<target if="${git.finalize}" name="git-finalize">
		<exec dir="${modules.dir}" executable="git" failonerror="true">
			<arg value="reset" />
		</exec>

		<exec dir="${modules.dir}" executable="git" failonerror="true">
			<arg value="add" />
			<arg value="${releng.app.dir}/app.changelog" />
			<arg value="${releng.app.dir}/app.properties" />
			<arg value="-f" />
		</exec>

		<exec dir="${modules.dir}" executable="git" failonerror="true">
			<arg value="commit" />
			<arg value="-m" />
			<arg value="${git.commit.app.ticket} ${Liferay-Releng-App-Title} ${app.version}" />
		</exec>

		<exec dir="${modules.dir}" executable="git" failonerror="false">
			<arg value="tag" />
			<arg value="-d" />
			<arg value="marketplace-${app.name}-${app.version}" />
		</exec>

		<exec dir="${modules.dir}" executable="git" failonerror="true">
			<arg value="tag" />
			<arg value="marketplace-${app.name}-${app.version}" />
		</exec>
	</target>

	<target name="index-modules-and-app-lpkgs">
		<path id="target.platform.indexer.classpath">

			<!-- Order is important -->

			<fileset
				dir="${liferay.home}/tools/portal-tools-target-platform-indexer-client"
				includes="com.liferay.portal.target.platform.indexer.api.jar,com.liferay.portal.target.platform.indexer.impl.jar,com.liferay.portal.tools.target.platform.indexer.client.jar"
			/>
			<fileset
				dir="${osgi.dir}/core"
				includes="com.liferay.portal.bootstrap.jar,org.eclipse.osgi.jar"
			/>
		</path>

		<java
			classname="com.liferay.portal.tools.target.platform.indexer.client.TargetPlatformIndexerClient"
			classpathref="target.platform.indexer.classpath"
			failonerror="true"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dliferay.home=${liferay.home}" />
			<jvmarg value="-Dportal.lib.dir=${portal.lib.dir}" />
		</java>
	</target>

	<target depends="checkout-public-modules-releng" name="init-build-app">
		<fail message="Please specify a value for &quot;app.name&quot; when running this command.">
			<condition>
				<not>
					<or>
						<isset property="app.name" />
						<istrue value="${build.all}" />
					</or>
				</not>
			</condition>
		</fail>

		<fail message="Please specify a value for &quot;git.commit.app.ticket&quot; when &quot;git.finalize&quot; is set to true.">
			<condition>
				<and>
					<istrue value="${git.finalize}" />
					<not>
						<isset property="git.commit.app.ticket" />
					</not>
				</and>
			</condition>
		</fail>

		<condition else="${modules.dir}/apps/${app.name}" property="app.dir" value="${modules.dir}/private/apps/${app.name}">
			<available file="${modules.dir}/private/apps/${app.name}" />
		</condition>

		<condition else="${modules.dir}/.releng/apps/${app.name}" property="releng.app.dir" value="${modules.dir}/.releng/private/apps/${app.name}">
			<available file="${modules.dir}/.releng/private/apps/${app.name}" />
		</condition>

		<condition property="download.app.sources">
			<or>
				<and>
					<available file="${modules.dir}/private/apps/${app.name}" />
					<available file="${app.dir}/.lfrbuild-release-src" />
				</and>
				<not>
					<available file="${modules.dir}/private/apps/${app.name}" />
				</not>
			</or>
		</condition>

		<property name="dist.dir" value="${releng.app.dir}/dist" />

		<pathconvert pathsep="," property="app.module.dirs.excludes.private">
			<chainedmapper>
				<globmapper
					from="${modules.dir}${file.separator}*"
					to="*"
				/>

				<filtermapper>
					<linecontains>
						<contains value="-dxp" />
					</linecontains>

					<replacestring from="-dxp" to="" />

					<replacestring from="private${file.separator}" to="" />
				</filtermapper>
			</chainedmapper>
			<path>
				<dirset
					dir="${modules.dir}"
					excludes="**/*-test*"
					includes="apps/${app.name}/**,private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal-private"
							type="glob"
						/>
					</present>
				</dirset>
			</path>
		</pathconvert>

		<pathconvert pathsep="," property="app.module.dirs.excludes.public">
			<globmapper
				from="${modules.dir}${file.separator}*"
				to="*"
			/>

			<path>
				<dirset
					dir="${modules.dir}"
					excludes="**/*-test*"
					includes="apps/${app.name}/**,private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal-private"
							type="glob"
						/>
					</present>
				</dirset>
				<dirset
					dir="${modules.dir}"
					excludes="**/*-test*"
					includes="private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal-private"
							type="glob"
						/>
					</present>
				</dirset>
			</path>
		</pathconvert>

		<condition else="${app.module.dirs.excludes.public}" property="app.module.dirs.excludes" value="${app.module.dirs.excludes.private}">
			<istrue value="${current.branch.private}" />
		</condition>

		<pathconvert pathsep="," property="app.module.dirs.private">
			<globmapper
				from="${modules.dir}${file.separator}*"
				to="*"
			/>
			<path>
				<dirset
					dir="${modules.dir}"
					excludes="**/*-test*,${app.module.dirs.excludes}"
					includes="apps/${app.name}/**,private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal"
							type="glob"
						/>
					</present>
				</dirset>
				<dirset
					dir="${modules.dir}"
					excludes="${app.module.dirs.excludes}"
					includes="apps/${app.name}/**,private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal-private"
							type="glob"
						/>
					</present>
				</dirset>
			</path>
		</pathconvert>

		<pathconvert pathsep="," property="app.module.dirs.public">
			<globmapper
				from="${modules.dir}${file.separator}*"
				to="*"
			/>
			<path>
				<dirset
					dir="${modules.dir}"
					excludes="**/*-test*,${app.module.dirs.excludes}"
					includes="apps/${app.name}/**,private/apps/${app.name}/**"
				>
					<present targetdir="${modules.dir}">
						<mapper
							from="*"
							to="*/.lfrbuild-portal"
							type="glob"
						/>
					</present>
				</dirset>
			</path>
		</pathconvert>

		<condition else="${app.module.dirs.public}" property="app.module.dirs" value="${app.module.dirs.private}">
			<istrue value="${current.branch.private}" />
		</condition>

		<condition property="module.dirs.null">
			<or>
				<equals arg1="${app.module.dirs}" arg2="" />
				<not>
					<isset property="app.module.dirs" />
				</not>
			</or>
		</condition>

		<condition property="app.first.version">
			<not>
				<available file="${releng.app.dir}/app.changelog" />
			</not>
		</condition>

		<property file="${modules.dir}/../build.properties" />

		<for list="${modules.dir}/apps/${app.name}/app.bnd,${modules.dir}/private/apps/${app.name}/app.bnd" param="app.bnd.file">
			<sequential>
				<if>
					<available file="@{app.bnd.file}" />
					<then>
						<property file="@{app.bnd.file}" />
					</then>
				</if>
			</sequential>
		</for>

		<condition property="check.stale.artifacts.skip">
			<and>
				<istrue value="${current.branch.private}" />
				<not>
					<available file="${modules.dir}/private/apps/${app.name}" />
				</not>
			</and>
		</condition>

		<condition property="osgi.static.dir.available">
			<available file="${osgi.dir}/static" />
		</condition>
	</target>

	<target name="reset-all">
		<property location="${liferay.home}/deploy" name="deploy.dir.absolute" />
		<property location="${osgi.dir}" name="osgi.dir.absolute" />

		<fail message="${osgi.dir.absolute} and ${deploy.dir.absolute} cannot be reset if ${osgi.dir.absolute}_backup and/or ${deploy.dir.absolute}_backup are not present.">
			<condition>
				<not>
					<or>
						<available file="${deploy.dir.absolute}_backup" />
						<available file="${osgi.dir.absolute}_backup" />
					</or>
				</not>
			</condition>
		</fail>

		<delete dir="${deploy.dir.absolute}" />

		<copy
			todir="${deploy.dir.absolute}"
		>
			<fileset
				dir="${deploy.dir.absolute}_backup"
				includes="**/*"
			/>
		</copy>

		<delete dir="${osgi.dir.absolute}" />

		<copy
			todir="${osgi.dir.absolute}"
		>
			<fileset
				dir="${osgi.dir.absolute}_backup"
				includes="**/*"
			/>
		</copy>
	</target>

	<target name="reset-lpkg">
		<subant genericantfile="${modules.dir}/build-app-module.xml" target="reset-artifact">
			<dirset
				dir="${modules.dir}"
				excludes="${build.modules.excludes}"
				includes="${app.module.dirs}"
			/>
			<property name="osgi.dir" value="${osgi.dir}" />
		</subant>
	</target>

	<target depends="get-app-version,get-artifact-versions-previous-release" name="update-app-marketplace-verson" unless="build.app.from.changelog">
		<echo message="app.version.previous.release = ${app.version.previous.release}" />

		<echo message="app.version = ${app.version}" />

		<replaceregexp
			byline="true"
			file="${releng.app.dir}/app.properties"
			flags="m"
			match="app.marketplace.version=.*$"
			replace="app.marketplace.version=${app.version}"
		/>
	</target>

	<target depends="dist-module-artifacts,get-app-artifacts,get-app-change-log,get-app-change-log-header,get-app-git-id,release-tool-dependencies" name="write-app-change-log" unless="build.app.from.changelog">
		<property name="double.space" value="${line.separator}${line.separator}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${app.change.log.header}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${double.space}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${app.artifacts}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${double.space}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${app.change.log}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${double.space}" />

		<echo append="true" file="${releng.app.dir}/app.changelog" message="${app.git.id}" />
	</target>

	<target depends="get-lpkg-artifacts-list" name="write-lpkg-marketplace-properties" unless="module.dirs.null">
		<echo file="${lpkg.dir}/liferay-marketplace.properties" message="bundles=${lpkg.artifacts.list}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="context-names=" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="remote-app-id=${title}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="version=1.0" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="category=${title}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="description=${title}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="title=${title}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="${line.separator}" />

		<echo append="true" file="${lpkg.dir}/liferay-marketplace.properties" message="icon-url=https://www.liferay.com/web/guest/marketplace/-/mp/asset/icon/71985553" />
	</target>

	<target depends="dist-module-artifacts" name="zip-app-sources">
		<zip
			basedir="${dist.dir}/sources"
			destfile="${dist.dir}/${app.name}-${app.version}-sources.zip"
		/>

		<delete dir="${dist.dir}/sources" />
	</target>
</project>