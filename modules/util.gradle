import com.liferay.gradle.plugins.defaults.tasks.CopyIvyDependenciesTask
import com.liferay.gradle.plugins.node.tasks.ExecuteNodeScriptTask
import com.liferay.gradle.plugins.source.formatter.FormatSourceTask
import com.liferay.gradle.plugins.util.PortalTools
import com.liferay.gradle.util.StringUtil

import java.util.regex.Matcher

import org.gradle.util.GUtil

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript
}

apply plugin: "com.liferay.node"
apply plugin: "com.liferay.node.defaults"
apply plugin: "com.liferay.source.formatter"
apply plugin: "com.liferay.source.formatter.defaults"

buildDir = new File(rootDir.parentFile, "build")

task formatSourceCurrentBranch(type: FormatSourceTask)
task formatSourceLatestAuthor(type: FormatSourceTask)
task formatSourceLocalChanges(type: FormatSourceTask)
task printDependencyPath
task setUpLibs
task setUpPortalTools
task setUpYarn(type: ExecuteNodeScriptTask)
task wrapper(type: Wrapper)
task wrapperSubrepo(type: Wrapper)

FileTree libDependenciesFileTree = fileTree(dir: "../lib", include: "*/dependencies.properties")

Map<File, Properties> libDependenciesMap = libDependenciesFileTree.collectEntries {
	Properties properties = GUtil.loadProperties(it)

	[it.parentFile, properties]
}

formatSourceCurrentBranch {
	description = "Runs Liferay Source Formatter to format the project files that are added or modified in the current Git branch."
	formatCurrentBranch = true
}

formatSourceLatestAuthor {
	description = "Runs Liferay Source Formatter to format the project files that are added or modified in the latest Git commits of the same author."
	formatCurrentBranch = true
}

formatSourceLocalChanges {
	description = "Runs Liferay Source Formatter to format the unstaged project files."
	formatLocalChanges = true
}

printDependencyPath {
	doLast {
		assert project.properties["dependencyNotation"] : "Please provide a value for the '-PdependencyNotation' property"

		Dependency dependency = dependencies.create dependencyNotation

		Configuration configuration = configurations.detachedConfiguration dependency

		configuration.transitive = false

		logger.quiet configuration.singleFile.absolutePath
	}
}

repositories {
	mavenLocal()

	File tmpMavenRepositoryDir = file("../.m2-tmp")

	if (tmpMavenRepositoryDir.exists()) {
		maven {
			url tmpMavenRepositoryDir
		}
	}

	maven {
		url System.properties["repository.url"] ?: "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}

setUpYarn {
	args "install"
	args "--frozen-lockfile"

	scriptFile = new File(projectDir, "yarn-1.13.0.js")
}

wrapper {
	File wrapperDir = projectDir.parentFile

	distributionUrl = "../../tools/gradle-${gradle.gradleVersion}.LIFERAY-PATCHED-3-bin.zip"
	dependsOn wrapperSubrepo

	doLast {
		File gradlewFile = new File(wrapperDir, "gradlew")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: '# Escape application args',
			value: '''\
# Escape application args
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS \\\"-Dgradle.user.home=$APP_HOME/.gradle\\\""'''
		)

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: 'org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"',
			value: 'org.gradle.wrapper.GradleWrapperMain "--init-script=$APP_HOME/modules/init.gradle" "$APP_ARGS"'
		)

		File gradlewBatFile = new File(wrapperDir, "gradlew.bat")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: '@rem Setup the command line',
			value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% "-Dgradle.user.home=%APP_HOME%\\.gradle"'''
		)

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: 'org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%',
			value: 'org.gradle.wrapper.GradleWrapperMain "--init-script=%APP_HOME%\\modules\\init.gradle" %CMD_LINE_ARGS%'
		)
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

wrapperSubrepo {
	File wrapperDir = new File(projectDir.parentFile, "tools/subrepo")

	doLast {
		File gradlewFile = new File(wrapperDir, "gradlew")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: '# Escape application args',
			value: '''\
# Escape application args
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS \\\"-Dgradle.user.home=$APP_HOME/.gradle\\\""'''
		)

		File gradlewBatFile = new File(wrapperDir, "gradlew.bat")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: '@rem Setup the command line',
			value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% "-Dgradle.user.home=%APP_HOME%\\.gradle"'''
		)
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

tasks.withType(FormatSourceTask) {
	baseDirName = "../"
	group = "formatting"
	showStatusUpdates = true
}

_createSetUpLibTasks(libDependenciesMap)
_createSetUpPortalToolTasks()

private void _createSetUpLibTasks(Map<File, Properties> libDependenciesMap) {
	libDependenciesMap.each {
		File dir, Properties properties ->

		String libSuffix = StringUtil.capitalize(dir.name)

		Configuration libConfiguration = configurations.create("lib" + libSuffix)

		libConfiguration.transitive = false

		Task libTask = tasks.create(name: "setUpLib" + libSuffix, type: Copy) {
			from libConfiguration
			into dir
		}

		for (String fileTitle in properties.stringPropertyNames()) {
			String dependencyNotation = properties.getProperty(fileTitle)

			def dependency = dependencies.add(libConfiguration.name, dependencyNotation)

			DependencyArtifact dependencyArtifact = dependency.artifacts.find()

			if (dependencyArtifact) {
				libTask.rename "${dependency.name}-${dependency.version}-${dependencyArtifact.classifier}.jar", "${fileTitle}.jar"
			}
			else {
				libTask.rename "${dependency.name}-${dependency.version}.jar", "${fileTitle}.jar"
			}
		}

		setUpLibs.dependsOn libTask
	}
}

private void _createSetUpPortalToolTasks() {
	FileTree ivyXmlFileTree = fileTree(dir: "../tools/sdk", includes: ["ivy.xml", "dependencies/*/ivy.xml"])

	XmlSlurper xmlSlurper = new XmlSlurper()

	ivyXmlFileTree.each {
		File ivyXmlFile ->

		File portalToolDir = ivyXmlFile.parentFile

		String portalToolSuffix = _getPortalToolSuffix(portalToolDir.name)

		CopyIvyDependenciesTask copyIvyDependenciesTask = tasks.create(name: "setUp" + portalToolSuffix, type: CopyIvyDependenciesTask) {
			configuration.exclude group: "com.liferay.portal"

			dependencyTransformClosure = {
				Map<String, Object> dependencyNotation ->

				String version = PortalTools.getVersion(project, dependencyNotation["name"])

				if (version) {
					dependencyNotation["version"] = version
				}

				dependencyNotation
			}

			if (ivyXmlFile.parentFile.name != "sdk") {
				doFirst {
					delete destinationDir
				}
			}

			inputFile = ivyXmlFile
			into new File(portalToolDir, "lib")

			outputs.upToDateWhen {
				false
			}
		}

		setUpPortalTools.dependsOn copyIvyDependenciesTask
	}
}

private String _getPortalToolSuffix(String name) {
	String suffix = name.replaceAll(/\.(\w)/) {
		String s = it[1]

		s.toUpperCase()
	}

	return StringUtil.capitalize(suffix)
}