<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-app-module">
	<import file="build-common.xml" />

	<pathconvert property="releng.module.dir">
		<filtermapper>
			<replacestring from="modules${file.separator}apps" to="modules${file.separator}.releng${file.separator}apps" />
			<replacestring from="modules${file.separator}private${file.separator}apps" to="modules${file.separator}.releng${file.separator}private${file.separator}apps" />
		</filtermapper>

		<path>
			<pathelement location="${basedir}" />
		</path>
	</pathconvert>

	<condition property="artifact.bnd">
		<available file="bnd.bnd" />
	</condition>

	<condition property="artifact.private">
		<contains string="${basedir}" substring="private${file.separator}" />
	</condition>

	<loadfile
		failonerror="false"
		property="artifact.deploy.dependencies"
		srcFile="build.gradle"
	>
		<filterchain>
			<linecontains>
				<contains value="deployDependencies {" />
			</linecontains>
		</filterchain>
	</loadfile>

	<condition property="artifact.exclude">
		<or>
			<available file="hotfix" />
			<available file=".lfrbuild-app-server-lib" />
			<available file=".lfrbuild-portal-pre" />
			<contains string="${basedir}" substring="modules-compat-data" />
			<contains string="${basedir}" substring="required-dependencies" />
		</or>
	</condition>

	<condition property="artifact.hotfix">
		<available file="hotfix" />
	</condition>

	<condition property="artifact.json">
		<available file="package.json" />
	</condition>

	<condition property="artifact.legacy">
		<available file="build.xml" />
	</condition>

	<condition property="download.artifact.wsdd">
		<available file=".lfrbuild-deploy-wsdd" />
	</condition>

	<condition property="replace.artifact.sources.license.text">
		<and>
			<istrue value="${current.branch.private}" />
			<istrue value="${download.artifact.sources}" />
		</and>
	</condition>

	<target if="artifact.hotfix" name="copy-hotfix-artifact">
		<copy
			todir="${dist.dir}"
		>
			<fileset
				dir="hotfix"
				includes="*.jar"
			/>
		</copy>
	</target>

	<target
		depends="
			copy-hotfix-artifact,
			download-artifact,
			download-artifact-dependencies,
			download-artifact-sources,
			download-artifact-wsdd,
			record-artifact-change-log,
			replace-artifact-sources-license-text"
		name="dist-module-artifact"
	/>

	<target depends="move-artifact,move-artifact-dependencies,move-artifact-wsdd" name="dist-module-artifact-lpkg" />

	<target depends="get-artifact-properties" name="download-artifact" unless="artifact.exclude">
		<fail message="Missing artifact.properties file in ${releng.module.dir}.">
			<condition>
				<not>
					<available file="${releng.module.dir}/artifact.properties" />
				</not>
			</condition>
		</fail>

		<loadproperties srcFile="${releng.module.dir}/artifact.properties">
			<filterchain>
				<linecontains>
					<contains value="artifact.url=" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<if>
			<contains string="${basedir}" substring="private${file.separator}" />
			<then>
				<get
					dest="${dist.dir}"
					password="${build.repository.private.password}"
					src="${artifact.url}"
					username="${build.repository.private.username}"
				/>
			</then>
			<else>
				<get
					dest="${dist.dir}"
					src="${artifact.url}"
				/>
			</else>
		</if>
	</target>

	<target if="artifact.deploy.dependencies" name="download-artifact-dependencies">
		<exec dir="${modules.dir}" executable="${modules.dir}/../gradlew${gradlew.suffix}">
			<arg value="${gradle.project.path}:deployDependencies" />
			<arg value="-Ddeploy.dependencies.keep.versions=true" />
			<arg value="-Dforced.cache.enabled=true" />
			<arg value="-Pforced.deploy.dir=${dist.dir}" />
		</exec>
	</target>

	<target depends="get-artifact-properties" if="${download.artifact.sources}" name="download-artifact-sources" unless="artifact.exclude">
		<fail message="Missing artifact.properties file in ${releng.module.dir}.">
			<condition>
				<not>
					<available file="${releng.module.dir}/artifact.properties" />
				</not>
			</condition>
		</fail>

		<loadproperties srcFile="${releng.module.dir}/artifact.properties">
			<filterchain>
				<linecontains>
					<contains value="artifact.sources.url=" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<mkdir dir="${dist.dir}/sources" />

		<if>
			<contains string="${basedir}" substring="private${file.separator}" />
			<then>
				<get
					dest="${dist.dir}/sources"
					password="${build.repository.private.password}"
					src="${artifact.sources.url}"
					username="${build.repository.private.username}"
				/>
			</then>
			<else>
				<get
					dest="${dist.dir}/sources"
					src="${artifact.sources.url}"
				/>
			</else>
		</if>
	</target>

	<target depends="get-artifact-properties" if="download.artifact.wsdd" name="download-artifact-wsdd" unless="artifact.exclude">
		<fail message="Missing artifact.properties file in ${releng.module.dir}.">
			<condition>
				<not>
					<available file="${releng.module.dir}/artifact.properties" />
				</not>
			</condition>
		</fail>

		<loadproperties srcFile="${releng.module.dir}/artifact.properties">
			<filterchain>
				<linecontains>
					<contains value="artifact.wsdd.url=" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<if>
			<contains string="${basedir}" substring="private${file.separator}" />
			<then>
				<get
					dest="${dist.dir}"
					password="${build.repository.private.password}"
					src="${artifact.wsdd.url}"
					username="${build.repository.private.username}"
				/>
			</then>
			<else>
				<get
					dest="${dist.dir}"
					src="${artifact.wsdd.url}"
				/>
			</else>
		</if>
	</target>

	<target depends="get-artifact-version-previous-release,get-artifact-change-log-ticket-list-since-previous-release,get-artifact-change-log-ticket-list-full" description="Get an aggregated list of tickets from the change logs of all versions of the current module since the version present in the previous release of this app." if="${app.has.artifact.previous.release}" name="get-artifact-change-log-ticket-list" />

	<target name="get-artifact-change-log-ticket-list-full" unless="${app.has.artifact.previous.release}">
		<loadfile
			failonerror="false"
			property="artifact.change.log.ticket.list"
			srcfile="${releng.module.dir}/liferay-releng.changelog"
		>
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="[0-9a-f]{40}\^\.\.[0-9a-f]{40}" />
				</linecontainsregexp>

				<tailfilter lines="1" />

				<tokenfilter>
					<filetokenizer />
					<replaceregex flags="g" pattern="[0-9a-f]{40}\^\.\.[0-9a-f]{40}=" replace="" />
					<replaceregex flags="g" pattern="\n|\r\n" replace=" " />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<property name="artifact.change.log.ticket.list" value="" />

		<condition property="artifact.has.change.log.ticket.list">
			<isset property="artifact.change.log.ticket.list" />
		</condition>
	</target>

	<target depends="get-artifact-version-previous-release" description="Get an aggregated list of tickets from the change logs of all versions of the current module since the version present in the previous release of this app." if="${app.has.artifact.previous.release}" name="get-artifact-change-log-ticket-list-since-previous-release">
		<loadfile
			failonerror="false"
			property="artifact.change.log.ticket.list"
			srcfile="${releng.module.dir}/liferay-releng.changelog"
		>
			<filterchain>
				<tokenfilter>
					<filetokenizer />

					<replaceregex pattern="[\s\S]* Bundle Version ${artifact.version.previous.release}" replace="" />
				</tokenfilter>

				<linecontainsregexp>
					<regexp pattern="[0-9a-f]{40}\^\.\.[0-9a-f]{40}" />
				</linecontainsregexp>

				<headfilter lines="-1" skip="1" />

				<tokenfilter>
					<filetokenizer />
					<replaceregex flags="g" pattern="[0-9a-f]{40}\^\.\.[0-9a-f]{40}=" replace="" />
					<replaceregex flags="g" pattern="\n|\r\n" replace=" " />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<property name="artifact.change.log.ticket.list" value="" />

		<condition property="artifact.has.change.log.ticket.list">
			<isset property="artifact.change.log.ticket.list" />
		</condition>
	</target>

	<target depends="get-artifact-properties-bnd,get-artifact-properties-json,get-artifact-properties-legacy" name="get-artifact-properties" />

	<target if="artifact.bnd" name="get-artifact-properties-bnd">
		<property file="bnd.bnd" />

		<condition property="artifact.location.dest" value="${osgi.dir}/marketplace/${Bundle-SymbolicName}-${Bundle-Version}.jar">
			<equals arg1="${lp.version}" arg2="7.0.0" />
		</condition>

		<condition property="artifact.location.dest" value="${osgi.dir}/marketplace/${lpkg.title.prefix}${liferay.releng.app.title} - SPI/${Bundle-SymbolicName}-${Bundle-Version}.jar">
			<matches pattern=".*\.spi" string="${Bundle-SymbolicName}" />
		</condition>

		<condition property="artifact.location.dest" value="${osgi.dir}/marketplace/${lpkg.title.prefix}${liferay.releng.app.title} - API/${Bundle-SymbolicName}-${Bundle-Version}.jar">
			<isset property="Export-Package" />
		</condition>

		<property name="artifact.location.dest" value="${osgi.dir}/marketplace/${lpkg.title.prefix}${liferay.releng.app.title} - Impl/${Bundle-SymbolicName}-${Bundle-Version}.jar" />

		<property name="artifact.location.dest" value="${osgi.dir}/marketplace/${Bundle-SymbolicName}-${Bundle-Version}.jar" />

		<condition property="artifact.location.src" value="${osgi.dir}/static/${Bundle-SymbolicName}.jar">
			<or>
				<contains string="${osgi.static.modules}" substring="${Bundle-SymbolicName}.jar" />
				<equals arg1="${Bundle-SymbolicName}" arg2="com.liferay.required.dependencies" />
			</or>
		</condition>

		<condition property="artifact.location.src" value="${osgi.dir}/portal/${Bundle-SymbolicName}.jar">
			<contains string="${Bundle-SymbolicName}" substring="com.liferay.portal" />
		</condition>

		<property name="artifact.location.src" value="${osgi.dir}/modules/${Bundle-SymbolicName}.jar" />

		<dirname file="${artifact.location.src}" property="artifact.dir.name" />
		<basename file="${artifact.location.src}" property="artifact.file.name" />
	</target>

	<target if="artifact.json" name="get-artifact-properties-json">
		<basename file="${basedir}" property="app.dir.name" />

		<loadfile
			property="artifact.name"
			srcfile="package.json"
		>
			<filterchain>
				<linecontains>
					<contains value="&quot;distName&quot;:" />
				</linecontains>

				<tokenfilter>
					<replaceregex pattern="\s.*&quot;distName&quot;: &quot;([0-9a-z-]+)&quot;," replace="\1" />
				</tokenfilter>

				<striplinebreaks />
			</filterchain>
		</loadfile>

		<loadfile
			property="artifact.name"
			srcfile="package.json"
		>
			<filterchain>
				<linecontains>
					<contains value="&quot;name&quot;:" />
				</linecontains>

				<tokenfilter>
					<replaceregex pattern="\s.*&quot;name&quot;: &quot;([0-9a-z-]+)&quot;," replace="\1" />
				</tokenfilter>

				<striplinebreaks />
			</filterchain>
		</loadfile>

		<loadfile
			property="artifact.version"
			srcfile="package.json"
		>
			<filterchain>
				<linecontains>
					<contains value="&quot;version&quot;:" />
				</linecontains>

				<tailfilter lines="1" />

				<tokenfilter>
					<replaceregex pattern="\t&quot;version&quot;: &quot;([\d.]+)&quot;,?" replace="\1" />
				</tokenfilter>

				<striplinebreaks />
			</filterchain>
		</loadfile>

		<condition property="artifact.location.dest" value="${osgi.dir}/marketplace/${artifact.name}-${artifact.version}.war">
			<equals arg1="${lp.version}" arg2="7.0.0" />
		</condition>

		<property name="artifact.location.dest" value="${osgi.dir}/marketplace/${lpkg.title.prefix}${liferay.releng.app.title} - Impl/${artifact.name}-${artifact.version}.war" />

		<condition property="artifact.location.src" value="${osgi.dir}/war/${artifact.name}.war">
			<available file="${osgi.dir}/war/${artifact.name}.war" />
		</condition>

		<property name="artifact.location.src" value="${osgi.dir}/../deploy/${artifact.name}.war" />
	</target>

	<target if="artifact.legacy" name="get-artifact-properties-legacy">
		<basename file="${basedir}" property="artifact.name" />

		<property file="${ant.file}/../../release.properties" />

		<property file="docroot/WEB-INF/liferay-plugin-package.properties" />

		<condition property="artifact.location.dest" value="${osgi.dir}/marketplace/${artifact.name}-${lp.version}.${module-incremental-version}.war">
			<equals arg1="${lp.version}" arg2="7.0.0" />
		</condition>

		<property name="artifact.location.dest" value="${osgi.dir}/marketplace/${lpkg.title.prefix}${liferay.releng.app.title} - Impl/${artifact.name}-${lp.version}.${module-incremental-version}.war" />
		<property name="artifact.location.src" value="${osgi.dir}/../deploy/${artifact.name}-${lp.version}.${module-incremental-version}.war" />
	</target>

	<target description="Get the version of the current module that was present in the previous release of this app." name="get-artifact-version-previous-release" unless="${app.first.version}">
		<loadfile
			property="artifact.version.previous.release"
		>
			<propertyresource name="artifact.versions.previous.release" />

			<filterchain>
				<tokenfilter delimOutput="">
					<stringtokenizer delims="," />

					<containsstring contains="${Bundle-SymbolicName}" />

					<deletecharacters chars="," />

					<replacestring from="${Bundle-SymbolicName}-" to="" />

					<replacestring from=".jar" to="" />
				</tokenfilter>

				<striplinebreaks />
			</filterchain>
		</loadfile>

		<condition property="app.has.artifact.previous.release">
			<isset property="artifact.version.previous.release" />
		</condition>
	</target>

	<target depends="get-artifact-properties" name="move-artifact" unless="artifact.exclude">
		<move
			file="${artifact.location.src}"
			tofile="${artifact.location.dest}"
		/>
	</target>

	<target depends="get-artifact-properties" if="artifact.deploy.dependencies" name="move-artifact-dependencies">
		<tempfile destdir="tmp" prefix="deployDependencies" property="artifact.dependencies.tmp.dir" />

		<exec dir="${modules.dir}" executable="${modules.dir}/../gradlew${gradlew.suffix}">
			<arg value="${gradle.project.path}:deployDependencies" />
			<arg value="-Ddeploy.dependencies.keep.versions=true" />
			<arg value="-Dforced.cache.enabled=true" />
			<arg value="-Pforced.deploy.dir=${artifact.dependencies.tmp.dir}" />
		</exec>

		<fileset
			dir="${artifact.dependencies.tmp.dir}"
			id="artifact.dependencies.files"
		/>

		<pathconvert pathsep="," property="artifact.dependencies.file.names" refid="artifact.dependencies.files">
			<chainedmapper>
				<flattenmapper />

				<regexpmapper from="^(.+?)-\d.*?\.jar$" to="\1.jar" />
			</chainedmapper>
		</pathconvert>

		<delete>
			<fileset
				dir="${artifact.dir.name}"
				includes="${artifact.dependencies.file.names}"
			/>
		</delete>

		<dirname file="${artifact.location.dest}" property="artifact.location.parent.dir" />

		<move
			todir="${artifact.location.parent.dir}"
		>
			<fileset
				refid="artifact.dependencies.files"
			/>
		</move>

		<delete dir="artifact.dependencies.tmp.dir" quiet="true" />
	</target>

	<target depends="get-artifact-properties" if="download.artifact.wsdd" name="move-artifact-wsdd" unless="artifact.exclude">
		<loadfile
			property="artifact.location.wsdd.dest"
		>
			<filterchain>
				<replaceregex pattern="(.*?)(-\d+\.\d+\.\d+)(\..+)?(\.[jw]ar)" replace="\1-wsdd\2\3\4" />

				<striplinebreaks />
			</filterchain>
			<propertyresource name="artifact.location.dest" />
		</loadfile>

		<loadfile
			property="artifact.location.wsdd.src"
		>
			<filterchain>
				<replaceregex pattern="\.jar$" replace="-wsdd.jar" />

				<striplinebreaks />
			</filterchain>
			<propertyresource name="artifact.location.src" />
		</loadfile>

		<move
			file="${artifact.location.wsdd.src}"
			tofile="${artifact.location.wsdd.dest}"
		/>
	</target>

	<target depends="get-artifact-change-log-ticket-list" description="Record the change log tickets for the current module to app.changelog." if="${artifact.has.change.log.ticket.list}" name="record-artifact-change-log">
		<echo append="true" file="${dist.dir}/ticket.list.tmp">${artifact.change.log.ticket.list} </echo>
	</target>

	<target depends="download-artifact-sources" if="replace.artifact.sources.license.text" name="replace-artifact-sources-license-text">
		<delete dir="tmp" />

		<mkdir dir="tmp" />

		<loadfile
			property="artifact.sources.file"
		>
			<filterchain>
				<replaceregex pattern="^.+\/" replace="" />

				<striplinebreaks />
			</filterchain>
			<propertyresource name="artifact.sources.url" />
		</loadfile>

		<unzip
			dest="tmp"
			src="${dist.dir}/sources/${artifact.sources.file}"
		/>

		<regexp id="license.text.pattern" pattern="/\*\*${line.separator} \* Copyright \(c\) 2000-(?:20\d\d|present) Liferay, Inc\. All rights reserved.${line.separator} \*${line.separator} \* This library is free software; you can redistribute it and\/or modify it under${line.separator} \* the terms of the GNU Lesser General Public License as published by the Free${line.separator} \* Software Foundation; either version 2\.1 of the License, or \(at your option\)${line.separator} \* any later version\.${line.separator} \*${line.separator} \* This library is distributed in the hope that it will be useful, but WITHOUT${line.separator} \* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS${line.separator} \* FOR A PARTICULAR PURPOSE\. See the GNU Lesser General Public License for more${line.separator} \* details\.${line.separator} \*/" />

		<substitution expression="/**${line.separator} * Copyright (c) 2000-present Liferay, Inc. All rights reserved.${line.separator} *${line.separator} * The contents of this file are subject to the terms of the Liferay Enterprise${line.separator} * Subscription License (&quot;License&quot;). You may not use this file except in${line.separator} * compliance with the License. You can obtain a copy of the License by${line.separator} * contacting Liferay, Inc. See the License for the specific language governing${line.separator} * permissions and limitations under the License, including but not limited to${line.separator} * distribution rights of the Software.${line.separator} *${line.separator} *${line.separator} *${line.separator} */" id="license.text.replace" />

		<replaceregexp
			flags="g"
		>
			<fileset
				dir="tmp"
				id="files"
				includes="**/*"
			/>
			<regexp refid="license.text.pattern" />
			<substitution refid="license.text.replace" />
		</replaceregexp>

		<loadfile
			property="artifact.sources.file.commercial"
		>
			<propertyresource name="artifact.sources.file" />
			<filterchain>
				<tokenfilter>
					<replaceregex pattern="(.+-sources)\.jar" replace="\1-commercial.jar" />
				</tokenfilter>
			</filterchain>
		</loadfile>

		<zip
			basedir="tmp"
			destfile="${dist.dir}/sources/${artifact.sources.file.commercial}"
		/>

		<delete file="${dist.dir}/sources/${artifact.sources.file}" />
	</target>

	<target depends="reset-artifact-dependencies" name="reset-artifact">
		<move
			failonerror="false"
			file="${artifact.location.dest}"
			tofile="${artifact.location.src}"
		/>
	</target>

	<target if="artifact.deploy.dependencies" name="reset-artifact-dependencies">
		<exec dir="${modules.dir}" executable="${modules.dir}/../gradlew${gradlew.suffix}">
			<arg value="${gradle.project.path}:deployDependencies" />
			<arg value="-Dforced.cache.enabled=true" />
		</exec>
	</target>
</project>