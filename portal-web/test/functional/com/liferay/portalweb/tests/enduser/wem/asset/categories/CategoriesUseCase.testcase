@component-name = "portal-categories"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Categories";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@priority = "4"
	test AddCategorywithLocalization {
		property testray.component.names = "Categories,Localization";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.addCategoryLocalizationCP(
			categoryName = "Category Name",
			locale = "de_DE",
			localizationName = "Kategorienamen",
			vocabularyName = "Vocabulary Name");

		User.openUsersAdmin(siteURLKey = "test-site-name");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin(siteURLKey = "test-site-name");

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Site.openSiteMembershipsAdmin(siteURLKey = "test-site-name");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin(siteURLKey = "test-site-name");

		User.assignSiteRoleCP(
			siteRoleName = "Site Administrator",
			userScreenName = "usersn");

		User.openUsersAdmin(siteURLKey = "test-site-name");

		User.editDisplaySettingsCP(
			languageName = "Deutsch (Deutschland)",
			userScreenName = "usersn");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Category Page Name");

		Navigator.gotoSitePage(
			pageName = "Category Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Category Page Name",
			siteName = "Test Site Name");

		SearchPortlets.addWidgets(searchPortletList = "Search Bar,Search Results");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.gotoSitePage(
			pageName = "Category Page Name",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Category Page Name",
			siteName = "Test Site Name");

		SearchPortlets.searchWidget(searchTerm = "Kategorienamen");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Web Content Title",
			searchAssetType = "Webcontent");
	}

	@priority = "4"
	test AddCategorywithSiteRole {
		property testray.component.names = "Categories,Permissions,Roles";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Site.openSiteMembershipsAdmin(siteURLKey = "test-site-name");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Site");

		Role.add(roleTitle = "Category Role Name");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CATEGORIES_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			permissionNavigationKey = "SITE_ADMIN_CATEGORIES",
			permissionNavigationValue = "Categories",
			roleTitle = "Category Role Name",
			roleType = "Site");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CATEGORIES_RESOURCE_PERMISSIONS_ASSET_ENTRIES_ADD_CATEGORY_CHECKBOX",
			permissionDefinitionValue = "Add Category",
			permissionNavigationKey = "SITE_ADMIN_CATEGORIES",
			permissionNavigationValue = "Categories",
			roleTitle = "Category Role Name",
			roleType = "Site");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CATEGORIES_RESOURCE_PERMISSIONS_ASSET_ENTRIES_ADD_VOCABULARY_CHECKBOX",
			permissionDefinitionValue = "Add Vocabulary",
			permissionNavigationKey = "SITE_ADMIN_CATEGORIES",
			permissionNavigationValue = "Categories",
			roleTitle = "Category Role Name",
			roleType = "Site");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CATEGORIES_RESOURCE_PERMISSIONS_CATEGORY_VOCABULARY_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			permissionNavigationKey = "SITE_ADMIN_CATEGORIES",
			permissionNavigationValue = "Categories",
			roleTitle = "Category Role Name",
			roleType = "Site");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_CATEGORIES_RESOURCE_PERMISSIONS_CATEGORY_ADD_CATEGORY_CHECKBOX",
			permissionDefinitionValue = "Add Category",
			permissionNavigationKey = "SITE_ADMIN_CATEGORIES",
			permissionNavigationValue = "Categories",
			roleTitle = "Category Role Name",
			roleType = "Site");

		User.openUsersAdmin();

		User.assignSiteRoleCP(
			siteRoleName = "Category Role Name",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");
	}

	@priority = "3"
	test AddSubcategoryConfigureParentCategory {
		property test.name.skip.portal.instance = "CategoriesUseCase#AddSubcategoryConfigureParentCategory";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Topic");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Assets",
			configurationName = "Asset Categories Web",
			configurationScope = "System Scope");

		SystemSettings.configureDisplayStyle(displayStyle = "Flattened Tree");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Topic");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Topic");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Topic");

		Category.viewPath(
			categoryName = "Category Name",
			path = "Topic &gt; Category Name");

		Category.viewPath(
			categoryName = "Subcategory Name",
			path = "Topic &gt; Category Name &gt; Subcategory Name");
	}

	@priority = "3"
	test AddSubcategoryProperty {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.viewCP(
			categoryName = "Category Name",
			subcategoryName = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Subcategory.addPropertyCP(
			propertiesKeyField = "Subcategory Key",
			propertiesValueField = "Subcategory Value",
			subcategoryName = "Subcategory Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.viewCategoryPropertyCP(
			categoryName = "Category Name",
			propertiesKeyField = "Subcategory Key",
			propertiesValueField = "Subcategory Value",
			subcategoryName = "Subcategory Name",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "3"
	test AddVocabularyWithAssetSubtype {
		property testray.component.names = "Categories,Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

		WebContentTemplates.addCP(
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.addWithAssociatedAssetTypeCP(
			assetSubtype = "Basic Web Content",
			assetType = "Web Content Article",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(webContentTitle = "WC Title");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.addCategory(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		PortletEntry.publish();

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		Panel.expandPanel(panel = "Categorization");

		AssertTextNotPresent(value1 = "Vocabulary Name");
	}

	@priority = "4"
	test AddVocabularyWithMultipleAssetTypes {
		property testray.component.names = "Categories";

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = "Vocabulary Name");

		Vocabulary.addAssociatedAssetType(
			assetType = "Blogs Entry",
			required = "true");

		Button.clickAddRow();

		Vocabulary.addAssociatedAssetType(
			assetType = "Web Content Article",
			required = "true",
			rowNumber = "2");

		Button.clickSave();

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Page Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Page Name");

		Page.viewNoSelectCategory(
			pageName = "Page Name",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "3"
	test AddWCFailWithRequiredVocabularyAssetType {
		property testray.component.names = "Categories,Web Content Administration";

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.addWithAssociatedAssetTypeCP(
			assetType = "Web Content Article",
			required = "true",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addFailWithoutRequiredCategoryAssetTypeCP(vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "3"
	test AddWCWithOptionalVocabularyAssetType {
		property portal.release = "false";
		property testray.component.names = "Categories,Web Content Administration";

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.addWithAssociatedAssetTypeCP(
			assetType = "Web Content Article",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Bookmarks");

		Bookmark.viewNoCategoryCP(vocabularyName = "Vocabulary Name");
	}

	@priority = "4"
	test DeletePartialCategory {
		property testray.component.names = "Categories,Permissions,Roles";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Site.openSiteMembershipsAdmin(siteURLKey = "test-site-name");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.addSiteRole(
			roleKey = "Category Role Name",
			roleTitle = "Category Role Name");

		for (var resourceActionIndex : list "ADD_VOCABULARY,ADD_CATEGORY") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.asset.categories",
				roleTitle = "Category Role Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Category Role Name",
			roleType = "site");

		for (var resourceActionIndex : list "VIEW,CONFIGURATION,ACCESS_IN_CONTROL_PANEL") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_asset_categories_admin_web_portlet_AssetCategoriesAdminPortlet",
				roleTitle = "Category Role Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ADD_TO_PAGE,PERMISSIONS,CONFIGURATION,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_asset_categories_navigation_web_portlet_AssetCategoriesNavigationPortlet",
				roleTitle = "Category Role Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Category Role Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.asset.kernel.model.AssetCategory",
			roleTitle = "Category Role Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.asset.kernel.model.AssetVocabulary",
			roleTitle = "Category Role Name",
			roleType = "site");

		User.openUsersAdmin(siteURLKey = "test-site-name");

		User.assignSiteRoleCP(
			siteRoleName = "Category Role Name",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 2",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.deleteCategoryNoPermissionCP(
			rowEntry = "Category Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.viewCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "4"
	test DisableMultipleCategories {
		property testray.component.names = "Categories,Web Content Administration";

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Vocabulary.addCP(
			allowMultipleCategories = "false",
			vocabularyName = "Vocabulary Name");

		for (var categoryName : list "Category Name 1,Category Name 2") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "${categoryName}",
				vocabularyName = "Vocabulary Name");
		}

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithMultipleCategories(
			allowMultipleCategories = "false",
			categoryNameList = "Category Name 1,Category Name 2",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name 1,Category Name 2",
			webContentTitle = "Web Content Title");
	}

	@priority = "3"
	test DuplicateCategoriesViaWebContentCopy {
		property testray.component.names = "Categories,Web Content Administration";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationVocabularyCP(vocabularyNameList = "Vocabulary Name");

		WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.copyCP(webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Duplicate 1");

		WebContent.viewCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title Duplicate 1");

		WebContent.viewCategorizationVocabularyCP(vocabularyNameList = "Vocabulary Name");

		WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name");
	}

	@priority = "5"
	test ExportImportWCWithCategoryViaAP {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name",
			vocabularyName = "Vocabulary Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Subcategory Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content Content",
			webContentTitle = "Subcategory WC Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "Subcategory WC Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Categories Navigation");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Import Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Import Site Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Import Site Name");

		CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Category Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content Content",
			assetTitle = "Web Content Title");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Import Site Name");

		CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Category Name");

		CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Subcategory Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content Content",
			assetTitle = "Subcategory WC Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "import-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Category Name",
			webContentTitle = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "import-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Subcategory WC Title");

		WebContent.viewCategorizationCategoryCP(
			categoryNameList = "Subcategory Name",
			webContentTitle = "Subcategory WC Title");
	}

	@priority = "5"
	test ImportLAR {
		property portal.acceptance = "true";
		property portal.upstream = "quarantine";
		property testray.component.names = "Training";

		JSONGroup.addGroup(groupName = "Site Name 2");

		for (var title : list "Unit 2 - Moon Minerals,Unit 3 - Ingeneous Moon Rocks,Unit 4 - Metamorphic Moon Rocks,Unit 5 - Sedimentary Moon Rocks,Unit 6 - Moon Rock Structure and Deformation,Unit 7 - Geological Structures on the Moon,Unit 8 - Moon Tectonics,Unit 9 - Nova Rocks,Unit 10 - Moon Crust Formation,Unit 11 - Evidence of Moon Rivers,Unit 12 - Geological Mapping,Unit 13 - Moon Topography,Unit 14 - Field Techniques,Unit 15 - Climate Through Moon History") {
			JSONCategory.addVocabulary(
				groupName = "Site Name 2",
				siteURLKey = "site-name-2",
				title = "${title}");
		}

		Category.openCategoriesAdmin(siteURLKey = "site-name-2");

		LAR.exportPortlet(larFileName = "Moon-Rocks-Unit-Category-Hierarchy.lar");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		LAR.importPortlet(
			larFileName = "Moon-Rocks-Unit-Category-Hierarchy.lar",
			uploadFrom = "dependencies");
	}

	@priority = "3"
	test MoveSubcategory {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		for (var categoryName : list "dog,cat") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCP(
				categoryName = "${categoryName}",
				vocabularyName = "Vocabulary Name");
		}

		for (var subcategoryName : list "bone,milk") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.addCP(
				categoryName = "dog",
				subcategoryName = "${subcategoryName}",
				vocabularyName = "Vocabulary Name");
		}

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.moveCP(
			categoryName = "dog",
			categoryNameMove = "cat",
			subcategoryName = "milk",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.viewCP(
			categoryName = "cat",
			subcategoryName = "milk",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "4"
	test SearchCategory {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.addCP(
			categoryDescription = "black and white",
			categoryName = "panda",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.addCP(
			categoryDescription = "brown or white",
			categoryName = "llama",
			vocabularyName = "Vocabulary Name");

		for (var categoryName : list "llama,panda") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.searchCP(
				categorySearchEntry = "${categoryName}",
				vocabularyName = "Vocabulary Name");

			Category.viewSearchResultsCP(categoryNameList = "${categoryName}");
		}

		for (var categoryDescription : list "brown,black") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.searchCP(
				categorySearchEntry = "${categoryDescription}",
				vocabularyName = "Vocabulary Name");

			Category.viewSearchResultsCP(categoryDefinitionList = "${categoryDescription}");
		}

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.searchCP(
			categorySearchEntry = "white",
			vocabularyName = "Vocabulary Name");

		Category.viewSearchResultsCP(
			categoryDefinitionList = "brown or white,black and white",
			categoryNameList = "llama,panda");
	}

	@priority = "3"
	test SearchCategoryWithNullResult {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.searchCP(
			categorySearchEntry = "Null",
			vocabularyName = "Vocabulary Name");

		Category.viewSearchResultsCP(nullResult = "true");
	}

	@priority = "4"
	test SearchEditedCategory {
		property testray.component.names = "Categories";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Search Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Search Page",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Search Page",
			widgetName = "Search Results");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "Test Content",
			groupName = "Test Site Name",
			title = "Test Title");

		JSONCategory.updateCategoryName(
			categoryName = "Category Name",
			groupName = "Test Site Name",
			title = "Edited",
			vocabularyName = "Vocabulary Name");

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Test Site Name");

		SearchPortlets.searchWidget(searchTerm = "Edited");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Title",
			searchAssetType = "Web Content Article");
	}

	@priority = "4"
	test SearchSubcategory {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.addCP(
			categoryName = "Category Name",
			subcategoryDescription = "friendly chops",
			subcategoryName = "beard hair",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.addCP(
			categoryName = "Category Name",
			subcategoryDescription = "handlebar",
			subcategoryName = "mustache hair",
			vocabularyName = "Vocabulary Name");

		for (var categoryName : list "beard,mustache") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.searchCP(
				categoryName = "Category Name",
				subcategorySearchEntry = "${subcategoryName}",
				vocabularyName = "Vocabulary Name");

			Subcategory.viewSearchResultsCP(categoryNameList = "${categoryName}");
		}

		for (var categoryDescription : list "friendly chops,handlebar") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.searchCP(
				categoryName = "Category Name",
				categorySearchEntry = "${subcategoryDescription}",
				vocabularyName = "Vocabulary Name");

			Subcategory.viewSearchResultsCP(subcategoryDefinitionList = "${subcategoryDescription}");
		}

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.searchCP(
			categoryName = "Category Name",
			categorySearchEntry = "hair",
			vocabularyName = "Vocabulary Name");

		Subcategory.viewSearchResultsCP(
			subcategoryDefinitionList = "friendly chops,handlebar",
			subcategoryNameList = "mustache,beard");
	}

	@priority = "3"
	test SearchSubcategoryWithNullResult {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.searchCP(
			categoryName = "Category Name",
			subCategorySearchEntry = "Null",
			vocabularyName = "Vocabulary Name");

		Subcategory.viewSearchResultsCP(nullResult = "true");
	}

	@Description ="This is for LPS-101409. Validate selecting multiple categories when creating page with blank template."
	@priority ="4"
	test SelectMultipleRequiredCategoriesWithBlankPageTemplate {
		property testray.component.names = "Categories";

		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		for (var index : list "1,2,3") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name ${index}",
				vocabularyName = "Vocabulary Name");
		}

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(
			categoryNameList = "Category Name 1,Category Name 2,Category Name 3",
			pageName = "Test Content Page Name",
			vocabularyName = "Vocabulary Name");

		Alert.viewSuccessMessage();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		AssertVisible(
			key_itemName = "Test Content Page Name",
			locator1 = "SitePages#LIST_GROUP_ITEM");
	}

	@Description ="This is for LPS-101409. Validate if select a required category when entering the page name not based on a page template."
	@priority ="5"
	test SelectRequiredCategoryWhenEnterPageNameWithBlankPageTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Categories";

		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a page with blank page template and select a required category") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				categoryName = "Category Name",
				pageName = "Test Content Page Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Assert there is a success message") {
			Alert.viewSuccessMessage();
		}

		task ("Navigate to the Pages Administration") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		task ("Assert the page exist") {
			SitePages.togglePrivacy(privacy = "Public Pages");

			AssertVisible(
				key_itemName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}
	}

	@Description ="This is for LPS-101409. Validate if select a required category when entering the page name based on a page template. Also add a step to check adding page with category successfully via json."
	@priority ="5"
	test SelectRequiredCategoryWhenEnterPageNameWithWidgetPageTemplate {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property testray.component.names = "Categories";

		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a page with widget page template and select a required category") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.addPublicPage(
				categoryName = "Category Name",
				pageName = "Test Widget Page Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Assert there is a success message") {
			Alert.viewSuccessMessage();
		}

		task ("Navigate to the Pages Administration") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		task ("Assert the page exist") {
			SitePages.togglePrivacy(privacy = "Public Pages");

			AssertVisible(
				key_itemName = "Test Widget Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}

		task ("Add a page with category via json addLayout") {

			JSONLayout.addPublicLayout(
				assetCategoryIds = "${categoryId}",
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2");
		}

		task ("Navigate to the Pages Administration") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		task ("Assert the page added") {
			SitePages.togglePrivacy(privacy = "Public Pages");

			AssertVisible(
				key_itemName = "Test Page Name 2",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}
	}

	@priority = "4"
	test UseCategoryFromParentSiteViaSiteHierarchy {
		property testray.component.names = "Categories,Site Administration,Web Content Administration";

		var parentSiteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		Site.openSitesAdmin(siteURLKey = "test-site-name");

		Site.addBlankCP(
			parentSiteName = "${parentSiteName}",
			siteName = "Child SiteName");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "WC Content Body",
			webContentTitle = "WC Content Title");

		SitePages.openPagesAdmin(siteURLKey = "Child SiteName");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Content Title");

		WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name");
	}

	@priority = "3"
	test ViewCannotAddDuplicateSubCategory {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.addDuplicateCP(
			categoryName = "Category Name",
			subcategoryName = "Subcategory Name",
			vocabularyName = "Vocabulary Name");
	}

	@priority = "3"
	test ViewFlattenedTreeCategoryNavigationDisplayStyle {
		property test.name.skip.portal.instance = "CategoriesUseCase#ViewFlattenedTreeCategoryNavigationDisplayStyle";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Topic");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Assets",
			configurationName = "Asset Categories Web",
			configurationScope = "System Scope");

		SystemSettings.configureDisplayStyle(displayStyle = "Flattened Tree");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Topic");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Subcategory.addCP(
			categoryName = "Category Name",
			subcategoryName = "Subcategory Name",
			vocabularyName = "Topic");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Topic");

		Category.viewPath(
			categoryName = "Category Name",
			path = "Topic &gt; Category Name");

		Category.viewPath(
			categoryName = "Subcategory Name",
			path = "Topic &gt; Category Name &gt; Subcategory Name");
	}

	@priority = "3"
	test ViewNavigation {
		property testray.component.names = "Categories";

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name",
			title = "Subcategory Name",
			vocabularyName = "Vocabulary Name");

		Category.openCategoriesAdmin(siteURLKey = "test-site-name");

		Category.viewNavigationCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");
	}

}