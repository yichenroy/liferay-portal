@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Page.tearDownCP();

			Site.tearDownCP();
		}
	}

	@description = "This is a test for LPS-84223."
	@priority = "3"
	test DLLinkValidationInWebContent {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		var dmDocumentURL = selenium.getAttribute("//input[contains(@id,'urlInput')]@value");
		var editDocumentURL = StringUtil.extractFirst("${dmDocumentURL}", "jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "${editDocumentURL}",
			webContentTitle = "WC WebContent Title");

		AlloyEditor.addEntryExternalURL(entryExternalURL = "${editDocumentURL}");

		Button.clickPublish();

		AssertTextPresent(
			locator1 = "Message#ERROR",
			value1 = "Your request failed to complete.");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Unable to validate referenced document because it cannot be found with the following parameters");
	}

	@priority = "4"
	test EditExportTemplate {
		property test.name.skip.portal.instance = "ExportImport#EditExportTemplate";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		LAR.openExportAdmin(siteScopeName = "guest");

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.configureExportOptions(
			checkContentNameList = "Web Content",
			uncheckContentNameList = "Blogs");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name",
			larFileName = "Export.Template");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		LAR.openExportAdmin(siteScopeName = "guest");

		LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

		LAR.editExportTemplateCP(
			exportTemplateDescriptionEdit = "Export Template Description Edit",
			exportTemplateName = "Export Template Name",
			exportTemplateNameEdit = "Export Template Name Edit");

		LAR.configureExportOptions(checkContentNameList = "Blogs");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit",
			larFileName = "Edited Export Template Name");

		var larFileName = LAR.getLarFileName();

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		LAR.downloadLar();

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a use case for LPS-86501."
	@priority = "3"
	test EditImportedContentPageViaImportedSiteTemplate {
		property osgi.module.configuration.file.names = "com.liferay.layout.configuration.LayoutExportImportConfiguration.config";
		property osgi.module.configurations = "exportDraftLayout=true";
		property testray.component.names = "Training";

		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Fragments");

		FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Test Template Content Page",
			sitePageType = "Content Page",
			siteTemplateName = "Site Template Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content");

		PageEditor.editFragmentText(
			contributed = "false",
			fragmentName = "Content",
			id = "content",
			text = "Editing Finished");

		PageEditor.viewFragmentEditableText(
			contributed = "false",
			editableText = "Editing Finished",
			fragmentName = "Content",
			id = "content");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.exportPortlet(
			larFileName = "site-template-content-page.lar",
			portletName = "Site Templates");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.deleteCP(siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.importPortlet(
			larFileName = "site-template-content-page.lar",
			portletName = "Site Templates");

		SiteTemplates.viewCP(siteTemplateName = "Site Template Name");

		Refresh();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.gotoPageMenuItem(
			menuItem = "Edit",
			pageName = "Test Template Content Page");

		PageEditor.viewFragmentEditableText(
			contributed = "false",
			editableText = "Editing Finished",
			fragmentName = "Content",
			id = "content");

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException:");

		AssertConsoleTextNotPresent(value1 = "org.apache.jasper.JasperException:");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is a use case for LPS-82752."
	@priority = "5"
	test ExportContentThenPublish {
		JSONGroup.addGroup(groupName = "Site Name");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.activateStagingCP(siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		LAR.exportSiteCP(siteScopeName = "Site Name");

		Staging.openStagingAdmin(siteURLKey = "site-name-staging");

		Staging.publishCustomPublication();
	}

	@description = "This is a use case for LPS-95589."
	@priority = "4"
	test ExportDMWithDeletedDocumentLink {
		JSONGroup.addGroup(groupName = "Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Documents and Media",
			dmDocumentTypeName = "DM Document Type Name");

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Type Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			documentsAndMediaField = "DM Document Title");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		LAR.exportPortlet(larFileName = "DocumentsandMedia_portlet.lar");

		AssertConsoleTextNotPresent(value1 = "NoSuchFileEntryException");
	}

	@description = "This is a use case for LPS-96391."
	@priority = "5"
	test ExportImportContentPageWithWCDOnFragment {
		property test.name.skip.portal.instance = "ExportImport#ExportImportContentPageWithWCDOnFragment";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONFragment.addFragmentCollection(
			groupName = "Site Name",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		var fragmentHTML = '''<lfr-widget-web-content>''';
		var htmlSnippet = '''<lfr-''';

		FragmentsEditor.autocompleteFragmentHTML(
			autocompleteField = "lfr-widget-web-content",
			fragmentHTML = "${fragmentHTML}",
			htmlSnippet = "${htmlSnippet}");

		PortletEntry.publish();

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-content-page-name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		LAR.exportSiteCP(siteScopeName = "Site Name");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "New Site");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "New Site");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent New Content",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent New Title");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-content-page-name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent New Content");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/new-site/test-content-page-name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@priority = "5"
	test ExportImportDDLViaGlobal {
		property test.name.skip.portal.instance = "ExportImport#ExportImportDDLViaGlobal";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Dynamic Data Lists");

		DDLDataDefinition.addCP(
			ddlDataDefinitionDescription = "DDL Definition Description",
			ddlDataDefinitionName = "DDL Definition");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName");

		DDLDataDefinition.save();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Dynamic Data Lists");

		DDLList.addCP(
			ddlListDescription = "DDL List Description",
			ddlListName = "DDL List");

		DDLDataDefinition.selectCP(ddlDataDefinitionName = "DDL Definition");

		DDLDataDefinition.save();

		DDLRecord.addCP(
			ddlDataDefinitionName = "DDL Definition",
			ddlListName = "DDL List");

		DDLRecord.populateFieldText(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName");

		PortletEntry.publish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Dynamic Data Lists");

		LAR.exportPortlet(
			larFileName = "DDL.portlet.lar",
			siteScopeName = "Global");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Dynamic Data Lists");

		LAR.importPortlet(
			larFileName = "DDL.portlet.lar",
			siteName = "Site Name");

		Navigator.openURL();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Dynamic Data Lists");

		DDLNavigator.gotoListRecords(ddlListName = "DDL List");

		DDLRecord.viewFirstFieldCP(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label");
	}

	@priority = "4"
	test ExportImportDeletions {
		property test.name.skip.portal.instance = "ExportImport#ExportImportDeletions";

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "ExportWebContent.lar");

		JSONWebcontent.deleteWebContent(
			groupName = "Guest",
			title = "Web Content Title");

		Refresh();

		LAR.exportPortlet(
			exportIndividualDeletions = "true",
			larFileName = "ExportWebContentDeletion.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.importPortlet(larFileName = "ExportWebContent.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.importPortlet(
			importDeletions = "true",
			larFileName = "ExportWebContentDeletion.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
	}

	@description = "This is a use case for LPS-91735."
	@priority = "3"
	test ExportImportGlobalDDMStructureViaInstances {
		property portal.release = "false";
		property test.name.skip.portal.instance = "ExportImport#ExportImportGlobalDDMStructureViaInstances";

		LAR.openExportAdmin(siteScopeName = "Global");

		LexiconEntry.gotoAdd();

		LAR.configureExportOptions(
			checkContentNameList = "Web Content",
			uncheckContentNameList = "Documents and Media,Pages");

		AssertClick(
			locator1 = "SitePagesExport#EXPORT_BUTTON",
			value1 = "Export");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		LAR.importSiteCP(
			baseURL = "http://www.able.com:8080",
			larFileName = "${larFileName}",
			siteName = "Global");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@description = "This is a use case for LPS-91440."
	@priority = "3"
	test ExportImportGlobalPagesViaInstances {
		property test.name.skip.portal.instance = "ExportImport#ExportImportGlobalPagesViaInstances";
		property portal.release = "false";

		LAR.openExportAdmin(siteScopeName = "Global");

		LexiconEntry.gotoAdd();

		LAR.configureExportOptions(
			checkContentNameList = "Pages",
			uncheckContentNameList = "Documents and Media,Web Content");

		AssertClick(
			locator1 = "SitePagesExport#EXPORT_BUTTON",
			value1 = "Export");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.logoutPG();

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		LAR.importSiteCP(
			baseURL = "http://www.able.com:8080",
			larFileName = "${larFileName}",
			siteName = "Global");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@description = "This is a use case for LPS-88378."
	@priority = "3"
	test ExportImportLayoutCircularReference {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Child Page",
			parentLayoutName = "Site Page");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Child Child Page",
			parentLayoutName = "Site Child Page");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Link to Page",
			fieldFieldLabel = "Link to Page",
			fieldName = "LinkToPage");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Link to Page",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			linkedPageName = "Site Child Page",
			linkFieldName = "LinkToPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			linkedPageName = "Site Child Child Page",
			linkFieldName = "LinkToPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		WebContent.viewPGViaWCD(
			linkName = "Link to Page",
			linkToPage = "true");

		LAR.exportSiteCP(siteScopeName = "Site Name");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name B");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@priority = "5"
	test ExportImportPortlet {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page Name");

		Navigator.gotoPage(pageName = "Test Page Name");

		Portlet.addPG(portletName = "Hello World");

		Portlet.gotoPortletOptions(
			portletName = "Hello World",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.configureCustomTitleViaLookandfeelPG(portletName = "Hello World");

		PortletEntry.save();

		IFrame.closeFrame();

		LAR.exportPortlet(larFileName = "HelloWorld.lar");

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Site Page");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Hello World");

		LAR.importPortlet(larFileName = "HelloWorld.lar");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Portlet.viewTitle(portletName = "Hello World Custom");
	}

	@priority = "3"
	test ExportImportPortletWithADT {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Widget Templates");

		ApplicationDisplayTemplates.addCP(
			adtFile = "adt_blogs_basic.ftl",
			adtType = "Blogs");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page Name",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Test Page Name");

		ApplicationDisplayTemplates.selectPortletADT(
			portletName = "Blogs",
			templateName = "Blogs Test ADT");

		Navigator.gotoPage(pageName = "Test Page Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_RECYCLING_BIN");

		LAR.configureExportSiteCP(siteScopeName = "Guest");

		LAR.exportWithAssertionOnSuccess();

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_RECYCLING_BIN");
	}

	@priority = "5"
	test ExportImportPrivatePage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPrivatePage(pageName = "Private Page");

		Navigator.gotoPrivateSitePage(
			pageName = "Private Page",
			siteName = "Guest");

		LAR.exportSiteCP(
			larFileName = "ExportPrivatePage",
			privateLayout = "true",
			siteScopeName = "Guest");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			privateLayout = "true",
			siteName = "Site Name");

		Navigator.gotoPrivateSitePage(
			pageName = "Private Page",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-84201."
	@priority = "3"
	test ExportImportSiteWithAssetPublisherScopeSetting {
		JSONGroup.addGroup(groupName = "Site Name A");

		JSONLayout.addPublicLayout(
			groupName = "Site Name A",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name A",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		AssetPublisherPortlet.configureAddSiteScopes(otherSite = "Site Name B");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		AssetPublisherPortlet.removeSiteScope(removeSiteScopes = "Site Name A");

		LAR.exportSiteCP(siteScopeName = "Site Name A");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name A");

		JSONGroup.deleteGroupByName(groupName = "Site Name B");

		JSONGroup.addGroup(groupName = "Site Name A");

		JSONGroup.addGroup(groupName = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name A");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		AssetPublisherPortlet.viewConfigureSiteScope(siteName = "Site Name B");
	}

	@description = "This is a use case for LPS-88331."
	@priority = "3"
	test ExportImportSiteWithNestedDocumentsAndMediaField {
		JSONGroup.addGroup(groupName = "Site A");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-a");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-a");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DynamicDataMapping.addFieldNested(
			field = "Documents and Media",
			fieldFieldLabel = "Documents and Media",
			fieldName = "DocumentsAndMedia");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-a");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text,Documents and Media",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-a");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "DocumentsAndMedia",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentDocumentsAndMedia = "DM Document Title",
			webContentText = "Web Content Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		LAR.exportSiteCP(siteScopeName = "Site A");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site A");

		JSONGroup.addGroup(groupName = "Site B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site B");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-b");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCP(
			webContentDocumentsAndMedia = "DM Document Title",
			webContentText = "Web Content Text",
			webContentTitle = "Web Content Title");

		AssertConsoleTextNotPresent(value1 = "com.liferay.portal.kernel.repository.InvalidRepositoryIdException");
	}

	@description = "This is a use case for LPS-54392 and LPS-88014."
	@priority = "3"
	test ExportImportSiteWithReferencedWebContent {
		property test.name.skip.portal.instance = "ExportImport#ExportImportSiteWithReferencedWebContent";

		JSONGroup.addGroup(groupName = "Site Name A");

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Site Name A",
			title = "Web Content Title");

		LAR.exportSiteCP(siteScopeName = "Site Name A");

		var key_larFileName = "${larFileName1}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName1 = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name B");

		JSONLayout.addPublicLayout(
			groupName = "Site Name B",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name B",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		WebContentDisplayPortlet.selectOtherSiteWebContent(
			otherSiteName = "Site Name A",
			webContentTitle = "Web Content Title");

		LAR.exportSiteCP(siteScopeName = "Site Name B");

		var key_larFileName = "${larFileName2}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName2 = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name A");

		JSONGroup.deleteGroupByName(groupName = "Site Name B");

		JSONGroup.addGroup(groupName = "Site Name C");

		LAR.importSiteCP(
			larFileName = "${larFileName1}",
			siteName = "Site Name C");

		JSONGroup.addGroup(groupName = "Site Name D");

		LAR.importSiteCP(
			larFileName = "${larFileName2}",
			siteName = "Site Name D");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@priority = "5"
	test ExportImportSmoke {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		LAR.exportSiteCP(siteScopeName = "Guest");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		AssertConsoleTextNotPresent(value1 = "java.lang.StringIndexOutOfBoundsException");
	}

	@priority = "4"
	test ExportImportThemeSettings {
		JSONGroup.addGroup(groupName = "Site Name");

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		SitePages.addPublicPage(pageName = "Test Page");

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		Theme.configureLookAndFeelSpecificLook();

		Theme.configureLookAndFeelShowHeaderSearch(showHeaderSearch = "false");

		Theme.configureLookAndFeelShowMaxMinAppLinks(showMaxMinAppLinks = "true");

		PortletEntry.save();

		LAR.configureExportSiteCP(
			siteScopeName = "Site Name",
			uncheckLogo = "true",
			uncheckSitePagesSettings = "true",
			uncheckSiteTemplateSettings = "true");

		AssertClick(
			locator1 = "SitePagesExport#EXPORT_BUTTON",
			value1 = "Export");

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name 2");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name 2");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name 2");

		Page.viewCurrentThemeSettings(
			checkThemeSettingList = "Show Maximize/Minimize Application Links",
			pageName = "Test Page",
			uncheckThemeSettingList = "Show Header Search");
	}

	@priority = "5"
	test ExportImportValidation {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExportImport#ExportImportValidation";
		property testray.component.names = "Training";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			imageFileName = "DM Document Title",
			navTab = "Documents and Media");

		LAR.configureExportSiteCP(
			checkContentNameList = "Blogs",
			mainContent = "Blogs",
			siteScopeName = "Guest",
			uncheckContentNameList = "Documents and Media",
			uncheckSubContent = "Referenced Content");

		LAR.exportWithAssertionOnSuccess();

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			importValidationMissingItem = "DM Document Title",
			larFileName = "${larFileName}",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-84204."
	@priority = "4"
	test ExportImportWCDReferenceWhenNotStagedWebContent {
		property test.name.skip.portal.instance = "ExportImport#ExportImportWCDReferenceWhenNotStagedWebContent";

		JSONGroup.addGroup(groupName = "Site Name A");

		Staging.openStagingAdmin(siteURLKey = "site-name-a");

		Staging.activateStagingCP(
			siteName = "Site Name A",
			uncheckContent = "Web Content");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name A",
			title = "Web Content Title");

		Staging.openStagingAdmin(siteURLKey = "site-name-a-staging");

		Staging.publishCustomPublication();

		JSONGroup.addGroup(groupName = "Site Name B");

		JSONLayout.addPublicLayout(
			groupName = "Site Name B",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name B",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		Refresh();

		WebContentDisplayPortlet.selectOtherSiteWebContent(
			otherSiteName = "Site Name A",
			webContentTitle = "Web Content Title");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		LAR.exportSiteCP(siteScopeName = "Site Name B");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name C");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name C");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name C");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");
	}

	@description = "This is a use case for LPS-88743."
	@priority = "3"
	test ExportImportWebContentCircularReference {
		JSONGroup.addGroup(groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Web Content",
			fieldFieldLabel = "Web Content",
			fieldName = "WebContent");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Web Content",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "WebContent",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentSelectWCFile = "WC WebContent Title 1",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 1");

		WebContent.editCP(
			fieldName = "WebContent",
			webContentSelectWCFile = "WC WebContent Title 2",
			webContentTitle = "WC WebContent Title 1",
			webContentTitleEdit = "WC WebContent Title 1");

		LAR.exportSiteCP(siteScopeName = "Site Name");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name");

		JSONGroup.addGroup(groupName = "Site Name A");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name A");

		AssertConsoleTextNotPresent(value1 = "com.liferay.journal.exception.NoSuchArticleException");
	}

	@description = "This is a use case for LPS-83326."
	@priority = "5"
	test ExportImportWebContentFolderWithWorkflow {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentFolder.configureWorkflowCP(
			folderName = "WC Folder Name",
			workflowDefinition = "Single Approver",
			workflowRestriction = "Default Workflow");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		JSONGroup.addGroup(groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LAR.importPortlet(larFileName = "WebContent_portlet.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentFolder.viewFolderWorkflow(
			folderName = "WC Folder Name",
			workflowResourceValue = "Single Approver");
	}

	@description = "This is a use case for LPS-86608."
	@priority = "3"
	test ExportImportWebcontentWithRepeatField {
		JSONGroup.addGroup(groupName = "Exported Site");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Exported Structure Description",
			structureName = "Exported Structure");

		DynamicDataMapping.addField(
			field = "Separator",
			fieldFieldLabel = "SeparatorField",
			fieldName = "Separator");

		DynamicDataMapping.editFieldRepeatable(fieldFieldLabel = "SeparatorField");

		DynamicDataMapping.addFieldNested(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "Exported Structure");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "Exported Structure",
			templateDescription = "Exported Template Description",
			templateFieldNames = "Text",
			templateName = "Exported Template");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Exported Structure");

		WebContent.addWithStructureCP(
			structureName = "Exported Structure",
			webContentText = "Exported Template",
			webContentTitle = "Exported Article");

		SelectFrame(value1 = "relative=top");

		DDLRecord.addRepeatableField(fieldName = "Separator");

		takeScreenshot();

		DDLRecord.populateFieldText(
			ddlRecordFieldData = "Liferay",
			fieldName = "Separator");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Exported Article");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		JSONGroup.addGroup(groupName = "Imported Site");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

		LAR.importPortlet(larFileName = "WebContent_portlet.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

		WebContent.viewWithStructureCP(webContentTitle = "Exported Article");

		WebContent.viewFieldRepeated(
			ddlRecordFieldData = "Liferay",
			fieldName = "Separator");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

		NavItem.gotoStructures();

		WebContentStructures.viewCP(
			structureDescription = "Exported Structure Description",
			structureName = "Exported Structure");

		LexiconEntry.gotoEntry(rowEntry = "Exported Structure");

		DynamicDataMapping.viewField(
			field = "Separator",
			fieldFieldLabel = "SeparatorField",
			fieldName = "Separator");

		DynamicDataMapping.viewField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

		NavItem.gotoTemplates();

		WebContentTemplates.viewCP(
			structureName = "Exported Structure",
			templateDescription = "Exported Template Description",
			templateName = "Exported Template");
	}

	@priority = "4"
	test ExportImportWithExportTemplate {
		property test.name.skip.portal.instance = "ExportImport#ExportImportWithExportTemplate";

		LAR.openExportAdmin(siteScopeName = "Guest");

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.viewExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-88498."
	@priority = "5"
	test ExportViaGuest {
		property test.name.skip.portal.instance = "ExportImport#ExportViaGuest";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		LAR.exportSiteCP(siteScopeName = "Guest");

		var downloadURL = selenium.getAttribute("//ul/li/div/h2/span/a@href");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSpecificURL(url = "${downloadURL}");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Forbidden");
	}

	@description = "This is a use case for LPS-88831, LPS-88889 and LPS-88890."
	@priority = "4"
	test ExportWebContentWithDeletedReference {
		property test.name.skip.portal.instance = "ExportImport#ExportWebContentWithDeletedReference";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		for (var structureFieldName : list "Documents and Media,Link to Page,Image") {
			DynamicDataMapping.addField(
				field = "${structureFieldName}",
				fieldFieldLabel = "${structureFieldName}",
				fieldName = StringUtil.replace("${structureFieldName}", " ", ""));
		}

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Documents and Media,Link to Page,Image",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "DocumentsandMedia",
			linkedPageName = "Test Page",
			linkFieldName = "LinktoPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentDocumentsAndMedia = "DM Document Title",
			webContentImageUnderDocumentsAndMedia = "Document_1.jpg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name");

		JSONDocument.deleteFile(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name");

		JSONLayout.deletePublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@priority = "5"
	test ImportCorruptedFile {
		property portal.acceptance = "true";
		property portal.release = "false";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Bookmarks");

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Bookmarks");

		LAR.importPortlet(
			cannotImport = "true",
			larFileName = "bookmarks-corrupted.portlet.lar",
			uploadFrom = "dependencies");
	}

	@description = "This is a use case for LPS-88571."
	@priority = "3"
	test ImportSiteWithMissingReferenceOfPreloadedEntry {
		property portal.release = "false";
		property test.name.skip.portal.instance = "ExportImport#ImportSiteWithMissingReferenceOfPreloadedEntry";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "Global");

		DMNavigator.gotoDocumentType();

		LAR.exportPortlet(
			larFileName = "Global.DM.portlet.lar",
			siteScopeName = "Global");

		JSONGroup.addGroup(groupName = "Site A");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-a");

		LAR.importPortlet(
			larFileName = "Global.DM.portlet.lar",
			siteName = "Site A");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-a");

		DMNavigator.gotoDocumentType();

		DMDocumentType.viewCP(
			dmDocumentTypeName = "Google Drive Shortcut",
			dmDocumentTypeScope = "Global");

		DMDocumentType.viewCP(
			dmDocumentTypeName = "Google Drive Shortcut",
			dmDocumentTypeScope = "Current Site");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "Global");

		DMNavigator.gotoDocumentType();

		DMDocumentType.deletePG(dmDocumentTypeName = "Google Drive Shortcut");

		Portlet.viewEmptyMessage(message = "There are no results.");

		JSONGroup.addGroup(groupName = "Site B");

		JSONLayout.addPublicLayout(
			groupName = "Site B",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site B",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site B");

		AssetPublisherPortlet.configureAddSiteScopes(otherSite = "Site A");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site B");

		AssetPublisherPortlet.configureAssetTypePG(
			selectedAsset = "Document",
			selectMoreThanOneSubtype = "true");

		LAR.exportSiteCP(siteScopeName = "Site B");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site A");

		JSONGroup.deleteGroupByName(groupName = "Site B");

		JSONGroup.addGroup(groupName = "Site C");

		LAR.importSiteCP(
			importValidationMissingItem = "Document Type",
			larFileName = "${larFileName}",
			siteName = "Site C");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Export/Import",
			configurationScope = "Virtual Instance Scope");

		SystemSettings.configureSystemSetting(
			enableSetting = "false",
			settingFieldName = "Validate Missing References");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site C");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site C");
	}

	@description = "This is a use case for LPS-97544 and LPS-90886."
	@priority = "3"
	test ImportStagedSiteWithCircularReference {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page A");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page B");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.activateStagingCP(siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Structure Description A",
			structureName = "Structure Name A");

		DynamicDataMapping.addField(
			field = "Link to Page",
			fieldFieldLabel = "Link to Page",
			fieldName = "LinkToPage");

		WebContentStructures.saveCP(structureName = "Structure Name A");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "Structure Name A",
			templateDescription = "Template Description A",
			templateFieldNames = "Link to Page",
			templateName = "Template Name A");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Structure Description B",
			structureName = "Structure Name B");

		DynamicDataMapping.addField(
			field = "Web Content",
			fieldFieldLabel = "Web Content",
			fieldName = "WebContent");

		WebContentStructures.saveCP(structureName = "Structure Name B");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		NavItem.gotoTemplates();

		LexiconEntry.gotoAdd();

		WebContentTemplates.inputTemplateAddScreenFields(
			structureName = "Structure Name B",
			templateDescription = "Template Description B",
			templateFieldNames = "Web Content",
			templateName = "Template Name B");

		var templateScript = '''
<#assign webContentData = jsonFactoryUtil.createJSONObject(WebContent.getData())/>
${webContentData}
''';

		WebContentTemplates.inputScript(templateScript = "${templateScript}");

		PortletEntry.save();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Structure Name A");

		WebContent.addWithStructureCP(
			linkedPageName = "Page B",
			linkFieldName = "LinkToPage",
			structureName = "Structure Name A",
			templateName = "Template Name A",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Structure Name B");

		WebContent.addWithStructureCP(
			fieldName = "WebContent",
			structureName = "Structure Name B",
			templateName = "Template Name B",
			webContentSelectWCFile = "WC WebContent Title 1",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Page A",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 1");

		Navigator.gotoStagedSitePage(
			pageName = "Page B",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		Staging.openStagingAdmin(siteURLKey = "site-name-staging");

		Staging.publishCustomPublication(rangeAll = "true");

		Navigator.gotoSitePage(
			pageName = "Page A",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(
			linkName = "Link to Page",
			linkToPage = "true");

		Navigator.gotoSitePage(
			pageName = "Page B",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Title 1");

		LAR.exportSiteCP(siteScopeName = "Site Name");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name");

		JSONGroup.addGroup(groupName = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name B");
	}

	@description = "This is a use case for LPS-94738."
	@priority = "4"
	test ImportWCDReferenceAfterActivateStaging {
		property test.name.skip.portal.instance = "ExportImport#ImportWCDReferenceAfterActivateStaging";

		JSONGroup.addGroup(groupName = "Site Name A");

		JSONLayout.addPublicLayout(
			groupName = "Site Name A",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name A",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name A");

		WebContent.addPGViaWCD(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WebContent Content");

		LAR.exportSiteCP(siteScopeName = "Site Name A");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name A");

		JSONGroup.addGroup(groupName = "Site Name B");

		Staging.openStagingAdmin(siteURLKey = "site-name-b");

		Staging.activateStagingCP(siteName = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "site-name-b-staging");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		WebContent.viewPGViaWCD(webContentContent = "WebContent Content");
	}

	@description = "This is a test for LPS-91233."
	@priority = "3"
	test PublishWebContentWithBrokenLink {
		property test.name.skip.portal.instance = "ExportImport#PublishWebContentWithBrokenLink";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Export/Import",
			configurationScope = "Virtual Instance Scope");

		SystemSettings.configureSystemSetting(
			enableSetting = "false",
			settingFieldName = "Validate Layout References");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		var dmDocumentURL = selenium.getAttribute("//input[contains(@id,'urlInput')]@value");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "${dmDocumentURL}",
			webContentTitle = "WC WebContent Title");

		AlloyEditor.addEntryExternalURL(entryExternalURL = "${dmDocumentURL}");

		PortletEntry.publish();
	}

}