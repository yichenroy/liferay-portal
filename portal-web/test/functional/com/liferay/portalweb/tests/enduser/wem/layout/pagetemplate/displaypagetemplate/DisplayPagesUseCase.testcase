@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			MyAccount.openMyAccountAdmin();

			User.deleteProfileImage();

			Button.click(button = "Save");

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This is a test for LPS-90999. A user with permissions has access to edit the web content article or display page while viewing the article through its display page."
	@priority = "5"
	test EditWhenViewingInDisplayPageAsUser {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a display page with fragments mapped to Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Title",
				fragmentName = "Title",
				id = "title",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Content",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.publish();
		}

		task ("Add a user with permission to edit web content articles and display pages") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "Userfn1",
				userLastName = "Userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add a second user without any permissions") {
			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "Userfn2",
				userLastName = "Userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Sign in as the first user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "Userfn1 Userln1");
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Click the pencil icon > Edit Display Page Template") {
			DisplayPageTemplate.clickPencilItem(item = "Edit Display Page Template");
		}

		task ("Edit the display page by adding a Static Text fragment to the display page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Static Text",
				targetFragmentName = "Rich Text");

			Button.clickPublish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article displays with the additional Content fragment in the staging site") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "This is static text.",
				key_fragmentClass = "static-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Click the pencil icon > Edit Webcontent Title") {
			DisplayPageTemplate.clickPencilItem(item = "Edit Webcontent Title");
		}

		task ("Edit the web content article") {
			Click(locator1 = "TextInput#TITLE");

			PortletEntry.inputTitle(title = "Webcontent Title Edit");

			Type.typeCKEditorWaitForCKEditor(
				key_fieldLabel = "content",
				locator1 = "CKEditor#BODY_FIELD_WEB_CONTENT_ARTICLE",
				value1 = "Webcontent Content Edit");

			Button.clickPublish();
		}

		task ("Assert the new version of the web content article displays through the display page") {
			AssertVisible(
				key_content = "Webcontent Title Edit",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content Edit",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "This is static text.",
				key_fragmentClass = "static-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Sign in as the second user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea2@liferay.com",
				userLoginFullName = "Userfn2 Userln2");
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the user cannot edit the web content article or display page") {
			AssertElementNotPresent(locator1 = "Button#PENCIL");
		}
	}

	@description = "This ensures that images can be added to the fragment background via the file URL when mapping a document."
	@priority = "5"
	test MapDMImageToFragmentBackground {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Content Mapping",
			entryTitle = "Document_1.jpg",
			fieldName = "File URL",
			navItem = "Documents and Media",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		AssertElementPresent(
			key_imageName = "Document_1.jpg",
			locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
	}

	@description = "This is a test for LPS-86550. Users should be able to map author name and author profile image to a fragment editable field in a display page."
	@priority = "5"
	test MapWebContentAuthor {
		property portal.acceptance = "true";

		task ("Add a display page with author name and profile fields mapped") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Image",
				targetFragmentName = "Rich Text");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Author Name",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Author Profile Image",
				fragmentName = "Image",
				id = "image",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}

		task ("Add a profile image for the super admin user") {
			MyAccount.openMyAccountAdmin();

			User.changeProfileImage(imageName = "marketplace_icon.png");

			Button.click(button = "Save");
		}

		task ("Add a web content article that uses the display page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Assert the super admin's name and profile image appear in the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");

			AssertVisible(
				key_content = "Test Test",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "",
				key_fragmentClass = "image",
				locator1 = "Fragment#FRAGMENT");

			SikuliAssertElementPresent(locator1 = "Fragment#MARKETPLACE_ICON_PNG");
		}
	}

	@description = "This case ensures a user can map the editable background image of a fragment to an existing image content."
	@priority = "5"
	test MapWebContentImageToFragmentBackground {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Image",
			fieldFieldLabel = "Image",
			fieldName = "Image");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Image",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentImage = "Document_2.jpeg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			fileName = "Document_1.png",
			fragmentName = "Image",
			id = "image");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Image",
			id = "image");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title",
			navItem = "Web Content");

		task ("Select mapping panel field.") {
			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Image");

			SelectFrame(value1 = "relative=top");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the image field contains the mapped image.") {
			PageEditor.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

			AssertElementPresent(locator1 = "WCD#WEB_CONTENT_IMAGE_PNG");
		}
	}

	@description = "This case ensures a user can map the layout of a fragment to an existing image content."
	@priority = "5"
	test MapWebContentImageToLayoutSection {
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Image",
			fieldFieldLabel = "Image",
			fieldName = "Image");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Image",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentImage = "Document_2.jpeg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Content Mapping",
			entryTitle = "WC WebContent Title",
			navItem = "Web Content",
			panel = "Styles");

		task ("Assert the layout background field contains the mapped image.") {
			PageEditor.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

			AssertElementPresent(
				key_imageName = "Document_2.jpeg",
				locator1 = "Fragment#FRAGMENT_SECTION_BACKGROUND_IMAGE");
		}
	}

	@description = "This is a test for LPS-86550. Users should be able to map last editor name and author profile image to a fragment editable field in a display page."
	@priority = "5"
	test MapWebContentLastEditor {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a display page with last editor name and profile fields mapped") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Image",
				targetFragmentName = "Rich Text");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Last Editor Name",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Last Editor Profile Image",
				fragmentName = "Image",
				id = "image",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}

		task ("Add a profile image for the super admin user") {
			MyAccount.openMyAccountAdmin();

			User.changeProfileImage(imageName = "marketplace_icon.png");

			Button.click(button = "Save");
		}

		task ("Add a second user with permission to edit web content articles") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a profile image for the second user") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			User.changeProfileImage(imageName = "Document_4.jpg");

			Button.click(button = "Save");
		}

		task ("As the super admin user, add a web content article that uses the display page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Assert the super admin name and profile image appear in the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");

			AssertVisible(
				key_content = "Test Test",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "",
				key_fragmentClass = "image",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Sign in as the second user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "Userfn Userln");
		}

		task ("As the second user, edit the web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editCP(
				webContentContentEdit = "Webcontent Content Edit",
				webContentTitleEdit = "Webcontent Title Edit");
		}

		task ("Assert the second user's name and profile image appear in the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");

			AssertVisible(
				key_content = "Userfn Userln",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "",
				key_fragmentClass = "image",
				locator1 = "Fragment#FRAGMENT");

			SikuliAssertElementPresent(locator1 = "Fragment#DOCUMENT_4_PNG");
		}
	}

	@description = "Add a fragment with multiple editable fields in it."
	@priority = "4"
	test ViewDisplayPageWithComplexRichTextFragments {
		property testray.component.names = "Training";

		task ("Add a display page") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");
		}

		task ("Add a fragment with multiple editable fields in it and map it to Basic Web Content") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Multiple Editables");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Title",
				fragmentName = "Multiple Editables",
				id = "test1",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Content",
				fragmentName = "Multiple Editables",
				id = "test2",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Tags",
				fragmentName = "Multiple Editables",
				id = "test3",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Publish Date",
				fragmentName = "Multiple Editables",
				id = "test4",
				source = "Basic Web Content (Default)");
		}

		task ("Publish the display page") {
			Button.clickPublish();
		}

		task ("Add a web content article with tags that uses the display page") {
			var serviceContext = '''{"assetTagNames": ["tag1","tag2","tag3"]}''';

			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				serviceContext = "${serviceContext}",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Assert the display page displays correctly along with its tags") {
			Navigator.gotoSitePage(
				pageName = "Site Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Webcontent Title");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Webcontent Content");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Webcontent Title");

			for (var content : list "Webcontent Title,Webcontent Content,tag1,tag2,tag3") {
				AssertVisible(
					key_text = "${content}",
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "Add a fragment with new added structure in it."
	@priority = "4"
	test ViewDisplayPageWithNewStructureMapInFragments {
		property testray.component.names = "Training";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text Box",
			fieldFieldLabel = "Content",
			fieldName = "Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Content",
			templateName = "WC Template Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Web Content Article",
			displayPageName = "Display Page Name",
			subType = "WC Structure Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Multiple Editables");

		PageEditorMapping.mapEditableTextToField(
			contributed = "false",
			field = "Title",
			fragmentName = "Multiple Editables",
			id = "test1",
			source = "WC Structure Name (Default)");

		PageEditorMapping.mapEditableTextToField(
			contributed = "false",
			field = "Content",
			fragmentName = "Multiple Editables",
			id = "test2",
			source = "WC Structure Name (Default)");

		PageEditorMapping.mapEditableTextToField(
			contributed = "false",
			field = "Tags",
			fragmentName = "Multiple Editables",
			id = "test3",
			source = "WC Structure Name (Default)");

		PageEditorMapping.mapEditableTextToField(
			contributed = "false",
			field = "Publish Date",
			fragmentName = "Multiple Editables",
			id = "test4",
			source = "WC Structure Name (Default)");

		Button.clickPublish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "Content",
			webContentTextBox = "Webcontent Content",
			webContentTitle = "Webcontent Title");

		WebContent.addWithTagCP(tagNameList = "tag1,tag2,tag3");

		WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Page Templates");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Site Page Name",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Site Page Name",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureAssetLinkBehaviorPG(assetLinkBehavior = "View in Context");

		DisplayPageTemplatesAdmin.viewPGViaAP(
			contentList = "Webcontent Title,Webcontent Content,tag1,tag2,tag3",
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title");
	}

	@description = "This is a test for LPS-96187. When there is a Language Selector widget on a display page template, selecting a different language should not redirect the user to a different place."
	@priority = "4"
	test ViewlanguageSelectorRedirect {
		property test.name.skip.portal.instance = "DisplayPagesUseCase#ViewlanguageSelectorRedirect";

		task ("Add a display page with a Language Selector widget and with a fragment mapped to Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Language Selector");

			PageEditor.gotoTab(tabName = "Fragments");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title",
				targetFragmentName = "Language Selector");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Title",
				fragmentName = "Title",
				id = "title",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Content",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.publish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Use the Language Selector to change the language to Spanish") {
			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");
		}

		task ("Assert the page did not redirect to a different page but is still viewing the web content through the display page, only in Spanish") {
			AssertTextEquals.assertPartialText(
				key_portletName = "LanguagePortlet",
				locator1 = "Language#DROPDOWN_LANGUAGE",
				value1 = "es-ES");

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Change the language back to English") {
			LanguagePortlet.selectLanguagePG(
				locale = "en_US",
				textIcon = "english-United States");
		}

		task ("Assert the page did not redirect to a different page but is still viewing the web content through the display page, only in English") {
			AssertTextEquals.assertPartialText(
				key_portletName = "LanguagePortlet",
				locator1 = "Language#DROPDOWN_LANGUAGE",
				value1 = "en-US");

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

}