@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-116975. Map all categories from asset entry to editable field."
	@priority = "4"
	test MapAllCategoriesToEditableField {
		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name 1");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name 2");

		JSONCategory.addVocabulary(
			groupName = "Test Site Name",
			title = "Vocabulary Name 3");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 1",
			vocabularyName = "Vocabulary Name 1");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 2",
			vocabularyName = "Vocabulary Name 2");

		JSONCategory.addSubcategory(
			groupName = "Test Site Name",
			parentCategoryName = "Category Name 2",
			title = "Subcategory Name 2",
			vocabularyName = "Vocabulary Name 2");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 3-1",
			vocabularyName = "Vocabulary Name 3");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 3-2",
			vocabularyName = "Vocabulary Name 3");

		JSONCategory.addCategory(
			groupName = "Test Site Name",
			title = "Category Name 3-3",
			vocabularyName = "Vocabulary Name 3");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.selectCategory(
			categoryName = "Category Name 1",
			vocabularyName = "Vocabulary Name 1");

		WebContent.selectCategory(
			categoryName = "Subcategory Name 2",
			vocabularyName = "Vocabulary Name 2");

		AssetCategorization.addMultipleCategories(
			categoryNameList = "Category Name 3-1,Category Name 3-2,Category Name 3-3",
			vocabularyName = "Vocabulary Name 3");

		PortletEntry.publish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WebContent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "All Categories");

		AssertTextEquals.assertPartialText(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			value1 = "Category Name 3-1, Category Name 3-2, Category Name 3-3");

		AssertTextEquals.assertPartialText(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			value1 = "Subcategory Name 2");

		AssertTextEquals.assertPartialText(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			value1 = "Category Name 1");
	}

	@description = "This is a test for LPS-116034. The custom ddmfields of content are available for mapping in editable field."
	@priority = "4"
	test MapCustomDDMFieldToFragment {
		task ("Add a custom Web Content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DynamicDataMapping.addField(
				field = "Text",
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.inputTitle(title = "Web Content Title");

			Type(
				key_fieldName = "Text",
				locator1 = "TextInput#DDM",
				value1 = "Web Content Content");

			PortletEntry.publish();
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Map custom ddmfield of web content structure to Heading fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Text");

			Pause(locator1 = "3000");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				value1 = "Web Content Content");
		}

		task ("Map custom ddmfield of document type to Paragraph fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "DM Document Title",
				navItem = "Documents and Media");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Text");

			Pause(locator1 = "3000");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				id = "element-text",
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				value1 = "DM Document Text");
		}

		task ("Assert mapped content in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Web Content Content");

			AssertTextEquals(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "DM Document Text");
		}
	}

	@description = "This is a test for LPS-116034. The custom ddmfields of single type collection items are available for mapping in editable field."
	@priority = "4"
	test MapCustomDDMFieldToFragmentInCollectionDisplayBasedOnSingleTypeCollection {
		task ("Add a custom Web Content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DynamicDataMapping.addField(
				field = "Text",
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.inputTitle(title = "Web Content Title");

			Type(
				key_fieldName = "Text",
				locator1 = "TextInput#DDM",
				value1 = "Web Content Content");

			PortletEntry.publish();
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Add a dynamic collection with Web Content Article and new web content structure") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

			AssetListsAdmin.configureAssetEntrySubtype(selectedSubtype = "WC Structure Name");
		}

		task ("Add a manual collection with new document entry") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "DM Document Title",
				assetType = "DM Document Type Name",
				itemSubtype = "DM Document Type Name",
				itemType = "Document");
		}

		task ("Map custom ddmfield of web content structure to Heading fragment in Collection Display based on the dynamic collection") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Text",
				fragmentName = "Heading",
				id = "element-text");

			AssertTextEquals(
				key_colPosition = "1",
				key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
				value1 = "Web Content Content");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
				value1 = "Web Content Content");
		}

		task ("Map custom ddmfield of document type to Paragraph fragment in Collection Display based on the manual collection") {
			ContentPages.clickPencil();

			PageEditor.removeFragment(fragmentName = "Collection Display");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "DM Document Title",
				fragmentName = "Paragraph");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Text",
				fragmentName = "Paragraph",
				id = "element-text");

			AssertTextEquals(
				key_colPosition = "1",
				key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Paragraph')]//*[contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
				value1 = "DM Document Text");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_colPosition = "1",
				key_fragmentName = "paragraph",
				key_rowPosition = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
				value1 = "DM Document Text");
		}
	}

	@description = "This is a test for LPS-98031."
	@priority = "5"
	test MapManualURLToLinkFragment {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.updateURL(url = "https://liferay.com");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert editable has the specified URL mapped correctly") {
			Click(locator1 = "//a[contains(@class,'btn')][contains(@href,'https://liferay.com')]");
		}
	}

	@description = "This is a test for LPS-LPS-117818. Map manual URL to text fragment."
	@priority = "5"
	test MapManualURLToTextFragment {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map manual URL to editable field of Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.updateURL(url = "https://liferay.com");

			PageEditor.clickPublish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "//a[contains(@href,'https://liferay.com')][normalize-space(text())='Heading Example']");

			Click(locator1 = "//a[contains(@href,'https://liferay.com')][normalize-space(text())='Heading Example']");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a use case for LPS-116975. Map multiple tags from asset entry to editable field."
	@priority = "5"
	test MapTagsToEditableField {
		property portal.acceptance = "true";

		JSONAssettag.addTag(
			groupName = "Test Site Name",
			tagName = "tagname1");

		JSONAssettag.addTag(
			groupName = "Test Site Name",
			tagName = "tagname2");

		JSONAssettag.addTag(
			groupName = "Test Site Name",
			tagName = "tagname3");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithTagCP(
			tagNameList = "tagname1,tagname2,tagname3",
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Paragraph");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Paragraph",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "Web Content Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Tags");

		PageEditor.viewFragmentEditableText(
			editableText = "tagname1, tagname2, tagname3",
			fragmentName = "Paragraph",
			id = "element-text");
	}

	@description = "This is a use case for LPS-116975. Map single tag from asset entry to editable field."
	@priority = "5"
	test MapTagToEditableField {
		property portal.acceptance = "true";

		JSONAssettag.addTag(
			groupName = "Test Site Name",
			tagName = "tagname1");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		Blogs.addEntryWithTag(
			entryContent = "Entry Content",
			entryTitle = "Entry Title",
			tagName = "tagname1");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "Entry Title",
			navItem = "Blogs");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Tags");

		PageEditor.viewFragmentEditableText(
			editableText = "tagname1",
			fragmentName = "Heading",
			id = "element-text");
	}

	@description = "This is a test for LPS-96794. Mapped Web Contents' state will appear in the sidebar in a Page Editor's edit mode."
	@priority = "4"
	test MapWebContentsToBannerFragment {
		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${count}",
				groupName = "Test Site Name",
				title = "WebContent Title ${count}");
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner",
			id = "link");

		PageEditorEditableLink.mapURLToAsset(
			entryTitle = "WebContent Title 1",
			field = "Title",
			navItem = "Web Content");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Banner",
			id = "01-title");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WebContent Title 2",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Banner",
			id = "02-subtitle");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WebContent Title 3",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		PageEditor.clickPublish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContent Title 2");

		WebContent.editCP(
			saveAsDraft = "true",
			webContentContentEdit = "WC WebContent Content 2 Edit",
			webContentTitle = "WebContent Title 2",
			webContentTitleEdit = "WebContent Title 2 Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.expireCP(webContentTitleList = "WebContent Title 3");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.gotoTab(tabName = "Contents");

		AssertTextEquals(
			key_listEntry = "WebContent Title 1",
			locator1 = "LexiconList#LIST_ENTRY_INFO",
			value1 = "Approved");

		AssertTextEquals(
			key_listEntry = "WebContent Title 2",
			locator1 = "LexiconList#LIST_ENTRY_STATUS",
			value1 = "draft");

		AssertTextEquals(
			key_listEntry = "WebContent Title 3",
			locator1 = "LexiconList#LIST_ENTRY_INFO",
			value1 = "expired");
	}

	@description = "This is a test for LPS-96794. Mapped Web Content will appear in the sidebar in a Page Editor's edit mode."
	@priority = "5"
	test MapWebContentURLToLinkFragment {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "Test Content",
			groupName = "Test Site Name",
			title = "liferay.com");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.mapURLToAsset(
			entryTitle = "liferay.com",
			field = "Title",
			navItem = "Web Content");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert editable has the specified URL mapped correctly") {
			AssertElementPresent(locator1 = "//a[contains(@class,'btn')][contains(@href,'liferay.com')]");
		}

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Contents");

		AssertVisible(
			key_webContentTitle = "liferay.com",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_CONTENTS_LIST_TITLE");
	}

	@description = "This is a use case for LPS-112749. When mapping asset field fragment in Collection Display based on collection with single itemType and specific subType, the Item Type and Item Subtype label will be shown in mapping panel."
	@priority = "4"
	test ViewItemTypeLabelMappedInCollectionWithSingleAndSpecificItemType {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Web Content Title");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Collection");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

		AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection");

		AssetListsAdmin.configureAssetEntrySubtype(selectedSubtype = "Basic Web Content");

		JSONAssetlist.addManualAssetListEntry(
			groupName = "Test Site Name",
			title = "Manual Collection");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Manual Collection",
			assetName = "Document Title",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Collection",
			fragmentName = "Collection Display");

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Basic Components",
			entryTitle = "Web Content Title",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
			value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TYPE_LABEL",
			value1 = "Item Type:Web Content Article");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SUB_TYPE_LABEL",
			value1 = "Item Subtype:Basic Web Content");

		PageEditor.editCollectionDisplay(
			assetListName = "Manual Collection",
			fragmentName = "Collection Display");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
			value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TYPE_LABEL",
			value1 = "Item Type:Document");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SUB_TYPE_LABEL",
			value1 = "Item Subtype:Basic Document");
	}

	@description = "This is a use case for LPS-112749. When mapping asset field to fragment in Collection Display based on collection with single itemType, the Item Type label will be shown in mapping panel."
	@priority = "4"
	test ViewItemTypeLabelMappedInCollectionWithSingleItemType {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Web Content Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "First Dynamic Collection");

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Blogs Entry",
			title = "Second Dynamic Collection");

		JSONAssetlist.addManualAssetListEntry(
			groupName = "Test Site Name",
			title = "Manual Collection");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

		Click(
			key_title = "Manual Collection",
			locator1 = "AssetLists#ASSET_LIST_ENTRY_TITLE");

		AssetListsAdmin.configureItemTypeInManualCollection(itemType = "Document");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Manual Collection",
			assetName = "Document Title",
			assetType = "Basic Document");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "First Dynamic Collection",
			fragmentName = "Collection Display");

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Basic Components",
			entryTitle = "Web Content Title",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
			value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TYPE_LABEL",
			value1 = "Item Type:Web Content Article");

		PageEditor.editCollectionDisplay(
			assetListName = "Second Dynamic Collection",
			fragmentName = "Collection Display");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
			value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TYPE_LABEL",
			value1 = "Item Type:Blogs Entry");

		PageEditor.editCollectionDisplay(
			assetListName = "Manual Collection",
			fragmentName = "Collection Display");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
			value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TYPE_LABEL",
			value1 = "Item Type:Document");
	}

	@description = "This is a test for LPS-96794. In a Permission mode, the edit actions associated that will show a modal with the permission information. In an edit mode, the edit actions associated that will show a modal with the usages of the web content."
	@priority = "4"
	test ViewPermissionsAndUsageViaSidebarWithMappedWebContent {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "true",
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WebContent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.gotoTab(tabName = "Contents");

		LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
			menuItem = "Permissions",
			rowEntry = "WebContent Title");

		IFrame.selectPermissionsFrame();

		Role.viewPermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			permissionFlagged = "true",
			roleTitle = "Owner");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.gotoTab(tabName = "Contents");

		LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
			menuItem = "View Usages",
			rowEntry = "WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			locator1 = "AssetLists#ASSET_LIST_USAGES",
			usageAmount = "2",
			usageType = "Pages");
	}

}