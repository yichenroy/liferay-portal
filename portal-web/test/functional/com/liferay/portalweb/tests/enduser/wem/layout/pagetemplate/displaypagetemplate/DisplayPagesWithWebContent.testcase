@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add a display page with fragments mapped to Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Title",
				fragmentName = "Title",
				id = "title",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Content",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-86191. A user can configure the page settings for each individual display page. This test will test 'Show Header' and 'Show Footer'. This test has been extended to also cover LPS-96438."
	@priority = "4"
	test ConfigureDisplayPageShowHeaderAndFooter {
		task ("Add a couple pages to the site so the navigation menu will appear in the display page template header") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page 1");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page 2");
		}

		task ("Add a web content that uses the display page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the page header which contains the site logo, search bar, and navigation menu appears") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(
				key_pageName = "Test Page 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page 2",
				locator1 = "Home#PAGE");
		}

		task ("Assert the web content article content appears") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the page footer appears") {
			AssertVisible(locator1 = "Home#FOOTER");
		}

		task ("Configure the display page settings so the header and footer do not appear") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Click(locator1 = "Radio#SPECIFIC_LOOK");

			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the page header which contains the site logo, search bar, and navigation menu does not appear") {
			AssertElementNotPresent(locator1 = "Home#DEFAULT_LOGO");

			AssertElementNotPresent(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertElementNotPresent(
				key_pageName = "Test Page 1",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page 2",
				locator1 = "Home#PAGE");
		}

		task ("Assert the web content article content still appears") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the page footer does not appear") {
			AssertElementNotPresent(locator1 = "Home#FOOTER");
		}
	}

	@description = "This is a test for LPS-86191. A user can configure the page settings for each individual display page. This test changes the theme."
	@priority = "4"
	test ConfigureDisplayPageTheme {
		property test.name.skip.portal.instance = "DisplayPagesWithWebContent#ConfigureDisplayPageTheme";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.uploadAppCP(
			appName = "test-theme",
			warFileName = "test-theme.war");

		task ("Add a web content that uses the display page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the display page is using the Classic Theme") {
			AssertElementPresent(locator1 = "//link[contains(@href,'classic-theme')]");

			AssertElementNotPresent(locator1 = "//link[contains(@href,'fjord-theme')]");
		}

		task ("Change the display page theme from Classic to Fjord") {
			DisplayPageTemplate.clickPencilItem(item = "Edit Display Page Template");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Click(locator1 = "Radio#SPECIFIC_LOOK");

			Click(locator1 = "SitePagesEditPage#CHANGE_CURRENT_THEME_BUTTON");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			LexiconCard.clickCard(card = "test-theme-7-3");

			SelectFrameTop(value1 = "relative=top");

			Button.clickSave();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.clickPublish();
		}

		task ("Assert the display page is using the Fjord Theme") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			AssertElementPresent(locator1 = "//link[contains(@href,'test-theme')]");

			AssertElementNotPresent(locator1 = "//link[contains(@href,'classic-theme')]");
		}
	}

	@description = "This is a test for LPS-90999. A user has access to edit a display page while viewing the article through its display page."
	@priority = "5"
	test EditDisplayPageWhenViewingInDisplayPage {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.publish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Click the pencil icon > Edit Display Page Template") {
			DisplayPageTemplate.clickPencilItem(item = "Edit Display Page Template");
		}

		task ("Edit the display page by adding a Static Text fragment to the display page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Static Text",
				targetFragmentName = "Rich Text");

			Button.clickPublish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article displays with the additional Content fragment in the staging site") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "This is static text.",
				key_fragmentClass = "static-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-90999. A user has access to edit the web content article while viewing the article through its display page."
	@priority = "5"
	test EditWebContentWhenViewingInDisplayPage {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.publish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Click the pencil icon > Edit Webcontent Title") {
			DisplayPageTemplate.clickPencilItem(item = "Edit Webcontent Title");
		}

		task ("Edit the web content article") {
			Click(locator1 = "TextInput#TITLE");

			PortletEntry.inputTitle(title = "Webcontent Title Edit");

			Type.typeCKEditorWaitForCKEditor(
				key_fieldLabel = "content",
				locator1 = "CKEditor#BODY_FIELD_WEB_CONTENT_ARTICLE",
				value1 = "Webcontent Content Edit");

			Button.clickPublish();
		}

		task ("Assert the new version of the web content article displays through the display page") {
			AssertVisible(
				key_content = "Webcontent Title Edit",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content Edit",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a draft status web content article within its display page."
	@priority = "5"
	test PreviewDraftWebContent {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a draft status web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.saveAsDraft();
		}

		task ("Preview the draft status web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview Draft");
		}

		task ("Assert the draft status web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title");

			IFrame.selectModalFrame();

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a pending status web content article within its display page."
	@priority = "5"
	test PreviewPendingWebContent {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Workflow");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Submit a web content article for publication") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.submitForPublication();
		}

		task ("Preview the pending status web content article") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview");
		}

		task ("Assert the draft status web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title");

			IFrame.selectModalFrame();

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a published web content article within its display page."
	@priority = "5"
	test PreviewPublishedWebContent {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title");

			PortletEntry.publish();
		}

		task ("Preview the web content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview");
		}

		task ("Assert the web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title");

			IFrame.selectModalFrame();

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test for LPS-96438. Guests should be able to view web content articles through display page templates."
	@priority = "5"
	test ViewDisplayPageAsGuest {
		property portal.acceptance = "true";

		task ("Add a couple pages to the site so the navigation menu will appear in the display page template header") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page 1");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page 2");
		}

		task ("Add a destination page for the Search Bar widget so it will appear to a guest user") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Search Results");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Type Facet");
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");
		}

		task ("Assert the display page is selected by default") {
			Panel.expandPanel(panel = "Display Page Template");

			AssertSelectedLabel(
				locator1 = "WCEditWebContent#DISPLAY_PAGE_SELECT",
				value1 = "Default Display Page Template");

			AssertTextEquals(
				locator1 = "WCEditWebContent#DISPLAY_PAGE_DEFAULT_SELECTION",
				value1 = "Display Page Name");
		}

		task ("Publish the web content article") {
			PortletEntry.publish();
		}

		task ("Logout of portal") {
			User.logoutPG();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the page header which contains the site logo, search bar, and navigation menu appears") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertVisible(locator1 = "TextInput#SEARCH");

			AssertVisible(
				key_pageName = "Test Page 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page 2",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Search",
				locator1 = "Home#PAGE");
		}

		task ("Assert the web content article content appears") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the page footer appears") {
			AssertVisible(locator1 = "Home#FOOTER");
		}
	}

	@description = "When a display page is marked as default, associated assets will be displayed through the display page by default without need for additional configuration."
	@priority = "5"
	test ViewDisplayPageMarkedAsDefault {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");
		}

		task ("Assert the display page is selected by default") {
			Panel.expandPanel(panel = "Display Page Template");

			AssertSelectedLabel(
				locator1 = "WCEditWebContent#DISPLAY_PAGE_SELECT",
				value1 = "Default Display Page Template");

			AssertTextEquals(
				locator1 = "WCEditWebContent#DISPLAY_PAGE_DEFAULT_SELECTION",
				value1 = "Display Page Name");
		}

		task ("Publish the web content article") {
			PortletEntry.publish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article displays through the display page") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-86190. Asset metadata should appear in page source."
	@priority = "4"
	test ViewDisplayPageMetadata {
		task ("Add a vocabulary and category") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content article with a category and tag") {
			var categoryId = JSONCategory.getCategoryId(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				vocabularyName = "Vocabulary Name");

			var serviceContext = '''{"assetTagNames": ["test tag"], "assetCategoryIds": ["${categoryId}"]}''';

			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				serviceContext = "${serviceContext}",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View page source of the web content article's friendly URL page") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "view-source:${baseURL}/web/test-site-name/w/webcontent-title");
		}

		task ("Assert the display page contains the web content article's tag and category") {
			AssertTextPresent(value1 = "meta content=&quot;test tag,category name&quot;");
		}
	}

	@description = "Display pages can be viewed through the asset publisher widget."
	@priority = "5"
	test ViewDisplayPageViaAssetPublisher {
		property portal.acceptance = "true";

		task ("Add a web content article that uses the display page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name");
		}

		task ("Add an Asset Publisher Widget to the widget page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name",
				widgetName = "Asset Publisher");
		}

		task ("View the web content article through the Asset Publisher widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Webcontent Title");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Webcontent Content");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Webcontent Title");
		}

		task ("Assert the Asset Publisher widget brings the user to view the web content article through the display page") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "Display pages can be viewed through friendly URL."
	@priority = "5"
	test ViewDisplayPageViaFriendlyURL {
		property portal.acceptance = "true";

		task ("Add a web content article") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Navigate to the web content article's friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article displays through the display page") {
			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "A selected display page should override the default display page."
	@priority = "5"
	test ViewNonDefaultDisplayPage {
		property portal.acceptance = "true";

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a second display page that is mapped to Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Non-Default Display Page",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Non-Default Display Page");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title",
				targetFragmentName = "Rich Text");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Content",
				fragmentName = "Rich Text",
				id = "rich-text",
				source = "Basic Web Content (Default)");

			PageEditorMapping.mapEditableTextToField(
				contributed = "false",
				field = "Title",
				fragmentName = "Title",
				id = "title",
				source = "Basic Web Content (Default)");

			Button.clickPublish();
		}

		task ("Add a web content article that uses the second display page") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Non-Default Display Page",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Navigate to the web content article's friendly URL") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article displays through the second display page and not the first display page") {
			AssertVisible(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "When no display page is selected, assets should not be displayed through the default display page."
	@priority = "4"
	test ViewNoSelectedDisplayPage {
		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article that has no display page selected") {
			JSONWebcontent.addWebContent(
				content = "Webcontent Content",
				groupName = "Test Site Name",
				title = "Webcontent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			Panel.expandPanel(panel = "Display Page Template");

			Select(
				locator1 = "WCEditWebContent#DISPLAY_PAGE_SELECT",
				value1 = "No Display Page Template");

			PortletEntry.publish();
		}

		task ("Navigate to what the web content article's friendly URL would have been if it had a display page selected") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");
		}

		task ("Assert the web content article does not display because there is no display page") {
			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name");
		}

		task ("Add an Asset Publisher Widget to the page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Name",
				widgetName = "Asset Publisher");
		}

		task ("View the web content article through the Asset Publisher widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Webcontent Title");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Webcontent Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Webcontent Content");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Webcontent Title");
		}

		task ("Assert a default generic template instead of the default display page is used to display the web content article") {
			AssertTextEquals.assertPartialText(
				locator1 = "AP#ASSET_ABSTRACT_DETAIL_CONTENT",
				value1 = "Webcontent Content");

			AssertElementNotPresent(
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");

			AssertElementNotPresent(
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

}