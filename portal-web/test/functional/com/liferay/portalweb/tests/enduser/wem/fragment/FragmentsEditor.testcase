@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-80503 and LPS-108566. Assert that when lfr is typed within a tag, a list of choices to autocomplete the fragment are presented. Assert the available variables and taglibs are shown in the IntelliSense and autocomplete works."
	@priority = "5"
	test AutocompleteFragment {
		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Add a fragment") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");
		}

		task ("Assert the fragment editor has autocomplete for lfr-editable tags") {
			var fragmentHTML = '''<lfr-editable id="" type="image">''';
			var htmlSnippet = '''<lfr-''';

			FragmentsEditor.autocompleteFragmentHTML(
				autocompleteField = "lfr-editable:image",
				fragmentHTML = "${fragmentHTML}",
				htmlSnippet = "${htmlSnippet}");
		}

		task ("Assert the fragment editor has autocomplete for lfr-widget tags") {
			var fragmentHTML = '''<lfr-widget-asset-list>''';
			var htmlSnippet = '''<lfr-''';

			FragmentsEditor.autocompleteFragmentHTML(
				autocompleteField = "lfr-widget-asset-list",
				fragmentHTML = "${fragmentHTML}",
				htmlSnippet = "${htmlSnippet}");
		}

		task ("Assert the fragment editor has autocomplete for variables") {
			var fragmentHTML = '''${portalUtil''';
			var htmlSnippet = '''${''';

			FragmentsEditor.autocompleteFragmentHTML(
				autocompleteField = "portalUtil",
				fragmentHTML = "${fragmentHTML}",
				htmlSnippet = "${htmlSnippet}");
		}

		task ("Assert the fragment editor has autocomplete for variables") {
			var fragmentHTML = '''[@liferay_editor''';
			var htmlSnippet = '''[@''';

			FragmentsEditor.autocompleteFragmentHTML(
				autocompleteField = "liferay_editor",
				fragmentHTML = "${fragmentHTML}",
				htmlSnippet = "${htmlSnippet}");
		}
	}

}