@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Page Templates";
	property testray.main.component.name = "Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();

			PageTemplatesAdminGlobalSite.tearDownCP();
		}
	}

	@priority = "4"
	test AddGlobalPageTemplate {
		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.addCP(
			pageTemplateActive = "Active",
			pageTemplateName = "Page Template Name");
	}

	@priority = "5"
	test AddPageBasedOnGlobalPageTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "Page Template Name");

		JSONGroup.addGroup(groupName = "Site Name");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		SitePages.addPublicPage(
			pageName = "Site Page",
			pageTemplateName = "Page Template Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Page.viewPageTemplate(
			page = "Site Page",
			pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		Portlet.viewPG(portletName = "Blogs");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		SitePages.gotoPageMenuItem(
			menuItem = "Configure",
			pageName = "Site Page");

		Page.togglePageTemplateInheritChanges(toggleValue = "disable");

		Button.clickSave();

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

		Portlet.addPG(portletName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		Portlet.viewNoSpecificPG(portletName = "Web Content Display");
	}

	@description = "This is a use case for LPS-115361. Add a widget page template in normal site."
	@priority = "5"
	test AddPageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Widget Page Template");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Page Template Name");
		}

		task ("Add a Web Content Display portlet to widget page template") {
			Portlet.addPG(portletName = "Web Content Display");

			Portlet.viewPG(portletName = "Web Content Display");
		}
	}

	@description = "This is a use case for LPS-115361. Can not delete a widget page template is used by a page in normal site."
	@priority = "5"
	test CannotDeletePageTemplateIsUsedByAPage {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Page Template Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("Add a page based on the widget page template") {
			SitePages.openPagesAdmin(siteURLKey = "site-name");

			SitePages.addPublicPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			Pause(locator1 = "3000");

			Portlet.viewPG(portletName = "Web Content Display");
		}

		task ("Assert can not delete the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");

			Alert.viewErrorMessage(errorMessage = "You cannot delete page templates that are used by a page.");
		}
	}

	@priority = "4"
	test DeactivateAndActivateGlobalPageTemplate {
		JSONGroup.addGroup(groupName = "Site Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.addCP(
			pageTemplateActive = "Active",
			pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.deactivateAndActivate(
			pageTemplateName = "Page Template Name",
			pageTemplateStatus = "Not Active");

		PageTemplatesAdminGlobalSite.viewStatus(
			pageTemplateName = "Page Template Name",
			pageTemplateStatus = "Not Active");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");

		Navigator.gotoNavNested(navNested = "Global Templates");

		Page.viewPageTemplateTypeNotPresent(pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.deactivateAndActivate(
			pageTemplateName = "Page Template Name",
			pageTemplateStatus = "Active");

		PageTemplatesAdminGlobalSite.viewStatus(
			pageTemplateName = "Page Template Name",
			pageTemplateStatus = "Active");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");

		Navigator.gotoNavNested(navNested = "Global Templates");

		Page.viewPageTemplateTypePresent(pageTemplateName = "Page Template Name");
	}

	@priority = "5"
	test DeleteGlobalPageTemplate {
		property portal.acceptance = "true";

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.viewDefaultCP();
	}

	@description = "This is a use case for LPS-115361. Delete a widget page template in normal site."
	@priority = "5"
	test DeletePageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Delete the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.viewPageTemplateNotPresent(pageTemplateName = "Page Template Name");
		}
	}

	@description = "This is a use case for LPS-54099."
	@priority = "5"
	test EditGlobalPageTemplate {
		property portal.acceptance = "true";

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

		Portlet.addPG(portletName = "Calendar");

		Refresh();

		CalendarNavigator.gotoConfiguration();

		CalendarConfiguration.selectWeekStartsOn(weekStartDay = "Saturday");

		CalendarConfiguration.save();

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.editCP(
			pageTemplateActive = "Not Active",
			pageTemplateName = "Page Template Name");
	}

	@priority = "4"
	test EditGlobalPageTemplateDescription {
		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryDescription = "This is a page template description",
			pageTemplateEntryName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.editDescription(
			pageTemplateDescription = "This is a page template description",
			pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.viewDescription(
			pageTemplateDescription = "This is a page template description edit",
			pageTemplateName = "Page Template Name");
	}

	@description = "This is a use case for LPS-115361. Edit a widget page template in normal site."
	@priority = "5"
	test EditPageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Edit the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Asset Publisher");

			Portlet.viewPG(portletName = "Asset Publisher");
		}
	}

	@priority = "5"
	test ImportLAR {
		property portal.acceptance = "true";
		property portal.upstream = "quarantine";
		property testray.component.names = "Training";

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "College Landing Page");

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "Department Landing Page");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Edit",
			pageTemplateName = "College Landing Page");

		for (var portletName : list "Media Gallery,Web Content Display,Web Content Display,Web Content Display,Asset Publisher") {
			Portlet.addPG(portletName = "${portletName}");

			Refresh();
		}

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Edit",
			pageTemplateName = "Department Landing Page");

		for (var portletName : list "Media Gallery,Web Content Display,Web Content Display,Navigation Menu,Members,Asset Publisher") {
			Portlet.addPG(portletName = "${portletName}");

			Refresh();
		}

		LAR.exportSiteCP(
			larFileName = "college-and-department-page-templates",
			siteScopeName = "Global");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "College Landing Page");

		PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "Department Landing Page");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Global");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.viewCP(pageTemplateName = "College Landing Page");

		PageTemplatesAdminGlobalSite.viewCP(pageTemplateName = "Department Landing Page");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		PageTemplatesAdminGlobalSite.viewPG(
			pageTemplateName = "College Landing Page",
			siteName = "${siteName}");

		Portlet.viewSpecificPG(portletName = "Media Gallery");

		Portlet.viewDuplicatePG(
			portletName = "Web Content Display",
			totalPortletCount = "3");

		Portlet.viewSpecificPG(portletName = "Asset Publisher");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.viewPG(
			pageTemplateName = "Department Landing Page",
			siteName = "${siteName}");

		Portlet.viewSpecificPG(portletName = "Media Gallery");

		Portlet.viewDuplicatePG(
			portletName = "Web Content Display",
			totalPortletCount = "2");

		Portlet.viewSpecificPG(portletName = "Members");

		Portlet.viewSpecificPG(portletName = "Navigation Menu");
	}

	@priority = "4"
	test LocalizeGlobalDefaultPageTemplates {
		property test.name.skip.portal.instance = "WidgetPageTemplates#LocalizeDefaultPageTemplates";

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.viewDefaultCP();

		Navigator.gotoAccountSettings();

		MyAccount.changeUserLanguage(
			languageName = "español (España)",
			saveButton = "Save",
			successMessage = "Su petición ha terminado con éxito.");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.viewDefaultLocalizedCP(
			pageTemplateNameList = "Blog,Búsqueda,Wiki",
			portletTitle = "Plantillas de página");

		Navigator.openURL();

		Click(locator1 = "UserBar#USER_AVATAR_IMAGE");

		Click(
			key_dropdownItem = "Mi cuenta",
			locator1 = "UserBar#USER_AVATAR_DROPDOWN_ITEM");

		MyAccount.changeUserLanguage(
			languageName = "English (United States)",
			saveButton = "Guardar",
			successMessage = "Your request completed successfully.");

		Navigator.openURL();

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.viewDefaultCP();
	}

	@priority = "4"
	test RenameGlobalPageTemplate {
		property testray.component.names = "Page Templates";

		JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
			pageTemplateEntryActive = "true",
			pageTemplateEntryName = "Page Template Name");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		PageTemplatesAdminGlobalSite.viewPG(
			pageTemplateName = "Page Template Name",
			siteName = "${siteName}");

		PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

		PageTemplatesAdminGlobalSite.editCP(
			pageTemplateActive = "Active",
			pageTemplateName = "Page Template Name");

		PageTemplatesAdminGlobalSite.viewPG(
			pageTemplateName = "Page Template Name Edit",
			siteName = "${siteName}");
	}

}