@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Layout Page Templates";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdmin.importCollectionFromDependenciesFolder(
			collectionZipFile = "fragment-collection.zip"
		);

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Change a fragment's editable image field."
	@priority = "5"
	test ChangeEditableImage {
		property testray.component.names = "Training";
		property portal.acceptance = "roy";

		task ("Add a content page template") {
			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");
		}

		task ("Add an Image fragment to the content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Image"
			);
		}

		task ("Edit the Image fragment's image") {
			PageEditor.editFragmentImage(
				fileName = "Document_1.png",
				fragmentName = "Image",
				id = "image"
			);
		}

		task ("Assert the Image fragment's image was changed") {
			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE",
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1"
			);
		}
	}

	@description = "Change a fragment's editable text field."
	@priority = "5"
	test ChangeEditableText {
		property portal.acceptance = "roy";

		task ("Add a content page template") {
			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");
		}

		task ("Add a Content fragment to the content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content"
			);
		}

		task ("Edit the Content fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Content",
				id = "content",
				text = "Editing Finished"
			);
		}

		task ("Assert the Content fragment's editable text was changed") {
			PageEditor.viewFragmentEditableText(
				editableText = "Editing Finished",
				fragmentName = "Content",
				id = "content"
			);
		}
	}

	@description = "Delete a page template collection."
	@priority = "5"
	test DeleteCollection {
		property portal.acceptance = "roy";

		task ("Delete the page template collection") {
			PageTemplatesAdmin.addCollection(collectionName = "Collection Name");

			Collection.deleteCollection(collectionName = "Collection Name");
		}

		task ("Assert the collection was deleted") {
			Collection.viewNotPresent(rowEntry = "Collection Name");
		}
	}

	@description = "Delete a page template."
	@priority = "5"
	test DeletePageTemplate {
		property portal.acceptance = "roy";

		task ("Add a content page template") {
			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");
		}

		task ("Delete the content page template") {
			PageTemplatesAdmin.deletePageTemplate(
				pageTemplateName = "Page Template Name"
			);
		}

		task ("Assert the content page template was deleted") {
			PageTemplatesAdmin.viewPageTemplateNotPresent(
				pageTemplateName = "Page Template Name"
			);
		}
	}

	@description = "Rename a page template collection."
	@priority = "4"
	test RenameCollection {
		task ("Add a page template collection") {
			PageTemplatesAdmin.addCollection(
				collectionDescription = "Collection Description Original",
				collectionName = "Collection Name Original"
			);
		}

		task ("Rename the collection") {
			Collection.renameCollection(
				collectionDescription = "Collection Description New",
				collectionName = "Collection Name Original",
				collectionNameEdit = "Collection Name New"
			);
		}

		task ("Assert the collection was renamed") {
			Collection.viewPresent(collectionName = "Collection Name New");
		}
	}

	@description = "Rename a page template."
	@priority = "4"
	test RenamePageTemplate {
		task ("Add a content page template") {
			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");
		}

		task ("Rename the content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.renamePageTemplate(
				pageTemplateName = "Page Template Name",
				newPageTemplateName = "Page Template Name New"
			);
		}

		task ("Assert the content page template was renamed") {
			PageTemplatesAdmin.viewPageTemplatePresent(
				pageTemplateName = "Page Template Name New"
			);
		}
	}

	@description = "An unpublished fragment should not show up in the fragments sidebar."
	@priority = "4"
	test ViewDraftFragmentDoesNotDisplayInSidebar {
		task ("Add a fragment without publishing it") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.addCollection(
				collectionDescription = "Collection Description",
				collectionName = "New Collection"
			);

			FragmentsAdmin.addSection(fragmentName = "Fragment Name");
		}

		task ("Assert the unpublished fragment does not appear in the sidebar when editing a content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.viewCollectionNotPresent(collectionName = "New Collection");
		}
	}
}