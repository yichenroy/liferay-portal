@component-name = "portal-search-ee"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownCP();
		}
	}

	test AssertSimilarResultsDisplayTemplate {
		property osgi.app.includes = "portal-search-similar-results";

		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC Title 1");

		AssertElementPresent(
			key_linkResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(displayTemplate = "List Layout");

		AssertElementPresent(
			key_listResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LIST_TITLE");

		AssertElementPresent(
			key_listResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LIST_TITLE");

		SearchPortlets.configureSimilarResults(displayTemplate = "Card Layout");

		AssertElementPresent(
			key_cardResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_CARD_TITLE");

		AssertElementPresent(
			key_cardResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_CARD_TITLE");
	}

	test AssertSimilarResultsMatchesAssetType {
		property osgi.app.includes = "portal-search-similar-results";

		for (var count : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Content",
				entryTitle = "Similar Results Blogs Title ${count}");

			JSONDocument.addFile(
				dmDocumentDescription = "DM Content",
				dmDocumentTitle = "Similar Results DM Title ${count}",
				groupName = "Guest");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Content",
				threadSubject = "Similar Results MB Title ${count}");

			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "Similar Results WC Title ${count}");
		}

		WikiNavigator.openWikiAdmin(siteURLKey = "guest");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		for (var count : list "1,2,3") {
			WikiPage.addCP(
				wikiPageContent = "Wiki Content",
				wikiPageTitle = "Similar Results Wiki Title ${count}");
		}

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results Blogs Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Blogs Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Blogs Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Wiki Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results DM Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results DM Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results DM Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Wiki Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results MB Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results MB Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results MB Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Wiki Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results WC Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Wiki Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results Wiki Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Wiki Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Wiki Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsDocumentFrequency {
		property osgi.app.includes = "portal-search-similar-results";
		property test.name.skip.portal.instance = "Elasticsearch7EE#ConfigureSimilarResultsDocumentFrequency";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Alpha Bravo");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Alpha Delta");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Alpha Bravo Charlie");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Charlie");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		Navigator.openURL();

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "3",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Alpha Bravo Charlie");

		AssertElementPresent(
			key_linkResultTitle = "Alpha Bravo",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Alpha Delta",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(
			maximumDocumentFrequency = "2",
			minimumDocumentFrequency = "1");

		AssertElementPresent(
			key_linkResultTitle = "Alpha Bravo",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Alpha Delta",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsFields {
		property osgi.app.includes = "portal-search-similar-results";

		JSONBlog.addEntry(
			entryContent = "Content",
			entryTitle = "No Match Content");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		Blogs.addEntryWithTag(
			entryContent = "No Match",
			entryTitle = "No Match Tag",
			tagName = "Apple");

		Blogs.addEntryWithTag(
			entryContent = "Content",
			entryTitle = "Similar Results Blogs Title",
			tagName = "Apple");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "content_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results Blogs Title");

		AssertElementPresent(
			key_linkResultTitle = "No Match Content",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "No Match Tag",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(fields = "assetTagNames,content_en_US");

		AssertElementPresent(
			key_linkResultTitle = "No Match Content",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "No Match Tag",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsMaximumItemDisplay {
		property osgi.app.includes = "portal-search-similar-results";

		for (var titleName : list "Alpha,Bravo,Charlie,Delta,Echo,Foxtrot") {
			JSONWebcontent.addWebContent(
				content = "${titleName}",
				groupName = "Guest",
				title = "${titleName}");
		}

		JSONWebcontent.addWebContent(
			content = "Content",
			groupName = "Guest",
			title = "Alpha Bravo Charlie Delta Echo Foxtrot");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			maximumItemDisplay = "0",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Alpha Bravo Charlie Delta Echo Foxtrot");

		AssertTextEquals.assertPartialText(
			key_widgetName = "Similar Results",
			locator1 = "Message#INFO_SPECIFIC_WIDGET",
			value1 = "no similar results available");

		SearchPortlets.configureSimilarResults(maximumItemDisplay = "5");

		AssertElementPresent(
			key_resultPosition = "5",
			locator1 = "Search#SIMILAR_RESULTS_SPECIFIC_POSITION");

		AssertElementNotPresent(
			key_resultPosition = "6",
			locator1 = "Search#SIMILAR_RESULTS_SPECIFIC_POSITION");
	}

	test ConfigureSimilarResultsMaximumQueryTerms {
		property osgi.app.includes = "portal-search-similar-results";

		for (var count : list "One, Two, Three") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "${count}");
		}

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "One Two Three");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			maximumQueryTerms = "2",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "One Two Three");

		AssertElementPresent(
			key_resultPosition = "2",
			locator1 = "Search#SIMILAR_RESULTS_SPECIFIC_POSITION");

		AssertElementNotPresent(
			key_resultPosition = "3",
			locator1 = "Search#SIMILAR_RESULTS_SPECIFIC_POSITION");
	}

	test ConfigureSimilarResultsMinimumShouldMatch {
		property osgi.app.includes = "portal-search-similar-results";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar 1");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar Results 1");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar Results Web 1");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar Results Web Content");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumShouldMatch = "25%",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results Web Content");

		AssertElementPresent(
			key_linkResultTitle = "Similar 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Web 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(minimumShouldMatch = "75%");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Web 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results 1",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsStopWords {
		property osgi.app.includes = "portal-search-similar-results";

		JSONWebcontent.addWebContent(
			content = "No Match",
			groupName = "Guest",
			title = "Alpha");

		JSONWebcontent.addWebContent(
			content = "Alpha Bravo Charlie",
			groupName = "Guest",
			title = "Alpha Bravo Charlie");

		JSONWebcontent.addWebContent(
			content = "No Match",
			groupName = "Guest",
			title = "Charlie");

		JSONWebcontent.addWebContent(
			content = "Bravo",
			groupName = "Guest",
			title = "No Match");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "content_en_US,localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1",
			stopWords = "Alpha");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Alpha Bravo Charlie");

		AssertElementPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "No Match",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Alpha",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(stopWords = "Alpha,Bravo");

		AssertElementPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Alpha",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "No Match",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsTermFrequency {
		property osgi.app.includes = "portal-search-similar-results";

		for (var count : list "One, Two, Three") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "${count}");
		}

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "One Two Two Three Three Three");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "One Two Two Three Three Three");

		for (var count : list "One, Two, Three") {
			AssertElementPresent(
				key_linkResultTitle = "${count}",
				locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
		}

		SearchPortlets.configureSimilarResults(minimumTermFrequency = "3");

		AssertElementPresent(
			key_linkResultTitle = "Three",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "One",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Two",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(minimumTermFrequency = "4");

		AssertElementNotPresent(
			key_linkResultTitle = "One",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Two",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Three",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test ConfigureSimilarResultsWordLength {
		property osgi.app.includes = "portal-search-similar-results";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Alpha Bravo");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Alpha Bravo Charlie");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Charlie");

		SearchPortlets.setupSimilarResultsPage();

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1",
			minimumWordLength = "6");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Alpha Bravo Charlie");

		AssertElementPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Alpha Bravo",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(minimumWordLength = "8");

		AssertElementNotPresent(
			key_linkResultTitle = "Alpha Bravo",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(
			maximumWordLength = "5",
			minimumWordLength = "5");

		AssertElementPresent(
			key_linkResultTitle = "Alpha Bravo",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Charlie",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test HotDeployLearningToRankApp {
		property hot.deploy.osgi.app.includes = "portal-search-learning-to-rank";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#HotDeployLearningToRankApp";

		var appName = "Liferay Enterprise Search Learning to Rank";

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");

		AssertConsoleTextPresent(value1 = "STARTED ${appName}");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.viewAppCP(
			appName = "${appName}",
			appStatus = "Active",
			searchTerm = "Learning");

		AppManager.deactivateAppCP(appName = "${appName}");

		AppManager.viewAppCP(
			appName = "${appName}",
			appStatus = "Resolved",
			searchTerm = "Learning");

		AssertConsoleTextPresent(value1 = "STOPPED com.liferay.portal.search.learning.to.rank");

		AppManager.activateAppCP(appName = "${appName}");

		AssertConsoleTextPresent(value1 = "STARTED com.liferay.portal.search.learning.to.rank");

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");
	}

	@priority = "5"
	test LearningToRankSmoke {
		property osgi.app.includes = "portal-search-learning-to-rank";
		property portal.upstream = "quarantine";
		property remote.elasticsearch.enabled = "true";
		property remote.elasticsearch.ltr.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#LearningToRankSmoke";

		AntCommand(
			locator1 = "build-test-elasticsearch7.xml",
			value1 = "add-ltr-linear-regression-model -Dbackup.index=.ltrstore -Delasticsearch.port=9200");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		var script = TestCase.getFileContent(fileName = "blogs-ltr-subset.groovy");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListNoLTR = "";
		var iterator = "1";

		while ("${iterator}" != "21" && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListNoLTR = StringUtil.add("${assetEntryTitleListNoLTR}", "${assetEntryTitle}");

			var iterator = MathUtil.sum("${iterator}", "1");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.editTextMultiline(
			fieldName = "model",
			fieldValue = "linearregression");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListLTR = "";
		var iterator = "1";

		while ("${iterator}" != "21" && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListLTR = StringUtil.add("${assetEntryTitleListLTR}", "${assetEntryTitle}");

			var iterator = MathUtil.sum("${iterator}", "1");
		}

		if ("${assetEntryTitleListNoLTR}" != "${assetEntryTitleListLTR}") {
			echo("Assertion succeeded: Search result rankings were different with and without LTR");

			echo("Rankings without LTR: ${assetEntryTitleListNoLTR}");

			echo("Rankings with LTR: ${assetEntryTitleListLTR}");
		}
		else {
			fail("Assertion failed: Search result rankings were the same with and without LTR");
		}
	}

	@priority = "5"
	test PortalClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property portal.suite.search.engine = "brian";
		property portal.upstream = "quarantine";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#PortalClusterSmokeTest";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(
			nodePort = "9200",
			numberOfNodes = "1");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.shutdownSpecificServer(nodePort = "8");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	test ViewSimilarResultsOnContentPages {
		property osgi.app.includes = "portal-search-similar-results";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar Results WC Title 1");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Similar Results WC Title 2");

		SitePages.openPagesAdmin(siteURLKey = "guest");

		ContentPages.addPage(pageName = "Similar Results Page");

		PageEditor.addWidget(portletName = "Asset Publisher");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/similar-results-page");

		ContentPages.clickPencil();

		PageEditor.addWidget(
			portletName = "Similar Results",
			targetFragmentName = "Asset Publisher");

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			fields = "localized_title_en_US",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/similar-results-page");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results WC Title 1");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "Similar Results WC Title 1",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "Similar Results WC Title 1");

		AssertClick.assertPartialTextClickAt(
			key_linkResultTitle = "Similar Results WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE",
			value1 = "Similar Results WC Title 2");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "Similar Results WC Title 2",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "Similar Results WC Title 2");
	}

	@priority = "5"
	test XPackSmokeTest {
		property elastic.xpack.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property portal.upstream = "quarantine";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackSmokeTest";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "Elasticsearch Monitoring Page",
			sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Elasticsearch Monitoring Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewAsGuestPG();
	}

}