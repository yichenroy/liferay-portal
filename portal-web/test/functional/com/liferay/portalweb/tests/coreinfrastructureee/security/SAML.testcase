@component-name = "portal-authentication-ee"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property app.server.bundles.size = "1";
	property databases.size = "1";
	property dummy.socket.proxy.disabled = "true";
	property portal.suite.search.engine = "brian";
	property test.run.environment = "EE";
	property testray.main.component.name = "SAML";

	// All test cases are currently configured to run Liferay SAML as both the IdP and SP.

	setUp {
		User.firstLoginPG();
	}

	@priority = "5"
	test AddUserInheritedRolesAsSAMLAttributeStatements {
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "SAML#AddUserInheritedRolesAsSAMLAttributeStatements";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spAttributes = "siteRoles",
			spURL = "http://www.able.com:9080/");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration",
			categoryPriority = "DEBUG");

		JSONRole.addSiteRole(
			roleKey = "TestSiteRole",
			roleTitle = "TestSiteRole");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		Navigator.openURL();

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Memberships");

		Site.assignUserGroupAsMemberCP(
			siteName = "Site Name",
			userGroupName = "UG UserGroup Name");

		Navigator.openURL();

		SitePages.openPagesAdmin(siteURLKey = "Site Name");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Memberships");

		Site.assignSiteRoleToUserGroup(
			roleName = "TestSiteRole",
			userGroupName = "UG UserGroup Name");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		UserGroup.assignMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "test");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.gotoEditCP(userScreenName = "test");

		User.viewUserInfomationRolesCP(
			roleTitle = "TestSiteRole",
			roleType = "Inherited Site Roles");

		User.logoutPG();

		User.viewLoggedOutPG();

		User.logoutPG(specificURL = "http://www.able.com:9080/");

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		AssertConsoleTextPresent(value1 = "TestSiteRole");
	}

	@description = "This is a use case for LPS-105165"
	@priority = "5"
	test AssertInstanceAdminCannotConfigureIdPWhenDisableIdPRole {
		property test.name.skip.portal.instance = "SAML#AssertInstanceAdminCannotConfigureIdPWhenDisableIdPRole";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "SAML Configuration",
			configurationScope = "System Scope");

		FormFields.disableCheckbox(fieldName = "Enable Identity Provider Role To Be Configured");

		SystemSettings.saveConfiguration();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		PortalInstances.viewCP(virtualHost = "www.able.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		MouseOver(locator1 = "Icon#TOOLTIP");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#TOOLTIP",
			value1 = "The identity provider role has been disabled. It can be re-enabled in System Settings.");
	}

	@ignore = "true"
	@priority = "4"
	test AssertKeepAliveToKeepMySAMLSessionAlive {
		property app.server.bundles.size = "2";
		property databases.size = "2";
		property test.name.skip.portal.instance = "SAML#AssertKeepAliveToKeepMySAMLSessionAlive";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
			samlEntityID = "samlsp",
			spKeepAliveURL = "http://www.able.com:9080/c/portal/saml/keep_alive",
			spURL = "http://www.able.com:9080/");

		SAML.configureLiferaySAMLAsSP(
			idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
			samlEntityID = "samlsp2",
			spKeepAliveURL = "http://www.baker.com:10080/c/portal/saml/keep_alive",
			spURL = "http://www.baker.com:10080");

		User.logoutPG();

		User.viewLoggedOutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		Navigator.gotoLoginPage();

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://localhost:8080/c/portal/saml/keep_alive?entityId=");

		var count = Page.getTextCountFromHtmlSource(text = "document.write");

		if ("${count}" != "2") {
			fail("That response should contain two document.write commands");
		}
	}

	@description = "This is a use case for LPS-39013."
	@priority = "4"
	test AssertSAMLSPUserInformationUpdatesAfterChangingOnIdP {
		property test.name.skip.portal.instance = "AssertSAMLSPUserInformationUpdatesAfterChangingOnIdP";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			idpAttributes = "firstName",
			samlEntityID = "samlsp",
			spAttributes = "firstName",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		User.logoutPG(specificURL = "http://www.able.com:9080/");

		User.viewLoggedOutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoAccountSettings();

		User.editDetailsViaMyAccount(userFirstNameEdit = "Testedit");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		Navigator.gotoLoginPage();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "test@liferay.com",
			userFirstName = "Testedit",
			userLastName = "Test",
			userScreenName = "test");
	}

	@priority = "4"
	test AssertSignedSAMLMetadata {
		property test.name.skip.portal.instance = "SAML#AssertSignedSAMLMetadata";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		Open.openNoError(locator1 = "http://localhost:8080/c/portal/saml/metadata");

		AssertHTMLSourceTextPresent(value1 = "ds:Signature");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLPortlet.configureIdentityProvider(signMetadata = "disable");

		Open.openNoError(locator1 = "http://localhost:8080/c/portal/saml/metadata");

		AssertHTMLSourceTextNotPresent(value1 = "ds:Signature");
	}

	@description = "This is a use case for LPS-96104"
	@priority = "4"
	test AssertSSOFailsWhenAlgorithmsMismatch {
		property blacklist.saml.algorithms = "true";
		property test.name.skip.portal.instance = "SAML#AssertSSOFailsWhenAlgorithmsMismatch";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		Open.openNoError(locator1 = "http://www.able.com:9080/c/portal/saml/metadata");

		AssertHTMLSourceTextNotPresent(value1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1");

		Open.openNoError(locator1 = "http://localhost:8080/c/portal/saml/metadata");

		for (var algorithm : list "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256,http://www.w3.org/2001/04/xmldsig-more#rsa-sha384,http://www.w3.org/2001/04/xmldsig-more#rsa-sha512") {
			AssertHTMLSourceTextNotPresent(value1 = "algorithm");
		}

		User.logoutPG();

		User.viewLoggedOutPG();

		Open.openNoError(locator1 = "http://www.able.com:9080");

		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		AssertTextEquals(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "Unable to process SAML request.");

		AssertConsoleTextPresent(value1 = "Validation of protocol message signature failed");
	}

	@priority = "4"
	test AssertSSOIdleSessionTakesPrecedenceOverIdPSessionTimeout {
		property test.name.skip.portal.instance = "SAML#AssertSSOIdleSessionTakesPrecedenceOverIdPSessionTimeout";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(
			idpSessionIdleTimeout = "480",
			idpSessionMaximumAge = "0",
			samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "Danger:Due to inactivity, your session has expired. Please save any data you may have entered before refreshing the page.");

		Refresh();

		User.viewLoggedInPG();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLRole.configureIdentityProvider(
			idpSessionIdleTimeout = "60",
			idpSessionMaximumAge = "0");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		Navigator.openURL();

		Pause(locator1 = "60000");

		SAML.executeIdPInitiatedSSO(
			autoLogin = "true",
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "Danger:Due to inactivity, your session has expired. Please save any data you may have entered before refreshing the page.");

		Refresh();

		User.viewLoggedOutPG();
	}

	@priority = "4"
	test AssertSSOSessionExistsAfterSPSessionTimeout {
		property test.name.skip.portal.instance = "SAML#AssertSSOSessionExistsAfterSPSessionTimeout";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "Danger:Due to inactivity, your session has expired. Please save any data you may have entered before refreshing the page.");

		Refresh();

		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		User.viewLoggedInPG();
	}

	@priority = "4"
	test AssertSSOSessionExpiresAfterMaximumSessionAge {
		property test.name.skip.portal.instance = "SAML#AssertSSOSessionExpiresAfterMaximumSessionAge";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(
			idpSessionIdleTimeout = "0",
			idpSessionMaximumAge = "180",
			samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "Danger:Due to inactivity, your session has expired. Please save any data you may have entered before refreshing the page.");

		Refresh();

		User.viewLoggedInPG();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "Danger:Due to inactivity, your session has expired. Please save any data you may have entered before refreshing the page.");

		Refresh();

		User.viewLoggedOutPG();
	}

	@description = "This is a use case for LPS-88924"
	@priority = "4"
	test AssertSSOWithEncryptionAndDecryption {
		property test.name.skip.portal.instance = "SAML#AssertSSOWithEncryptionAndDecryption";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			encryptionCertificate = "true",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		SAMLNavigation.gotoServiceProviderConnection();

		SAMLPortlet.configureServiceProviderConnection(
			forceEncryption = "enable",
			samlEntityID = "samlsp");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		if (IsElementNotPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
			Navigator.gotoLoginPage();
		}

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLRole.deleteCertificate();

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User._login(
			password = "test",
			userEmailAddress = "test@liferay.com");

		AssertTextEquals(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "Unable to process SAML request.");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Data encryption key was null",
			nodePort = "9080");
	}

	@priority = "4"
	test AssertSSOWithSignAuthnRequests {
		property test.name.skip.portal.instance = "SAML#AssertSSOWithSignAuthnRequests";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLPortlet.configureIdentityProvider(authnRequestSignatureRequired = "disable");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLPortlet.configureIdentityProvider();

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLPortlet.configureIdentityProvider(authnRequestSignatureRequired = "disable");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoServiceProvider();

		SAMLPortlet.configureServiceProvider(signAuthnRequests = "disable");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "SAML Configuration",
			configurationScope = "System Scope");

		SystemSettings.editTextSetting(
			settingName = "Runtime Metadata Refresh Interval",
			settingValue = "9999");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProvider();

		SAMLPortlet.configureIdentityProvider();

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		Navigator.gotoLoginPage();

		AssertConsoleTextPresent(value1 = "org.opensaml.messaging.handler.MessageHandlerException: Message context was not authenticated");
	}

	@priority = "4"
	test ConfigureSAMLToImportUsersFromLDAP {
		property apacheds.enabled = "true";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "SAML#ConfigureSAMLToImportUsersFromLDAP";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		PortalSettings.addLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.editLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.testLDAPConnection();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		Navigator.gotoLoginPage();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		PortalSettings.addLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.editLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.testLDAPConnection();

		Navigator.openURL();

		var enableSettingList = "enabled,ldapImportEnabled,importOnStartup";

		PortalSettings.configureLDAPSetting(enableSettingList = "${enableSettingList}");

		PortalSettings.viewEnabledLDAPSetting(enableSettingList = "${enableSettingList}");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "ldapuseremail@liferay.com",
			userFirstName = "ldapusergivenname",
			userLastName = "ldapusersn",
			userScreenName = "ldapusercn");

		Navigator.gotoBack();

		User.editPasswordCP(
			samlEnabled = "true",
			userEmailAddress = "ldapuseremail@liferay.com",
			userScreenName = "ldapusercn");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		if (IsElementNotPresent(locator1 = "ProductMenu#PRODUCT_MENU_OPENED")) {
			Navigator.gotoLoginPage();
		}

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoServiceProvider();

		SAMLPortlet.configureServiceProvider(LDAPImport = "enable");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.loginPG(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "ldapuseremail@liferay.com");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.loginPG(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "ldapuseremail@liferay.com",
			userFirstName = "ldapusergivenname",
			userLastName = "ldapusersn",
			userScreenName = "ldapusercn");
	}

	@priority = "5"
	test HotDeploySAMLApp {
		property hot.deploy.osgi.app.includes = "saml";
		property osgi.app.includes = "";
		property test.name.skip.portal.instance = "SAML#HotDeploySAMLApp";

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");

		AssertConsoleTextPresent(value1 = "STARTED Liferay Connector to SAML 2.0");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "SAML Configuration",
			configurationScope = "System Scope");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");
	}

	@description = "This is a use case for LPS-108077."
	@priority = "5"
	test ImportEncryptionCertificateFromPKCS12KeystoreFile {
		property test.name.skip.portal.instance = "SAML#ImportEncryptionCertificateFromPKCS12KeystoreFile";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			encryptionCertificate = "true",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		SAMLNavigation.gotoServiceProviderConnection();

		SAMLPortlet.configureServiceProviderConnection(
			forceEncryption = "enable",
			samlEntityID = "samlsp");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		Click(
			key_certificateUsage = "ENCRYPTION",
			locator1 = "CPSAMLAdmin#DOWNLOAD_CERTIFICATE");

		SAMLRole.convertEncryptionCertificate();

		SAMLRole.importCertificateAndPrivateKey(
			certificateUsage = "ENCRYPTION",
			keyStoreAlias = "samlsp-encryption");

		User.logoutPG(specificURL = "http://www.able.com:9080/");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@description = "This is a use case for LPS-108077."
	@priority = "5"
	test ImportSigningCertificateFromPKCS12KeystoreFile {
		property test.name.skip.portal.instance = "SAML#ImportSigningCertificateFromPKCS12KeystoreFile";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			idpAttributes = "firstName",
			samlEntityID = "samlsp",
			spAttributes = "firstName",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		Click(
			key_certificateUsage = "SIGNING",
			locator1 = "CPSAMLAdmin#DOWNLOAD_CERTIFICATE");

		SAMLRole.convertSingingCertificate();

		SAMLRole.importCertificateAndPrivateKey(
			certificateUsage = "SIGNING",
			keyStoreAlias = "samlidp");

		User.logoutPG();

		User.viewLoggedOutPG();

		User.loginPG(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test SPInitiatedSSOWithScreenNameIdentifier {
		property test.name.skip.portal.instance = "SAML#SPInitiatedSSOWithScreenNameIdentifier";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "screenName",
			nameIdentifierFormat = "Unspecified",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration",
			categoryPriority = "DEBUG");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		AssertConsoleTextPresent(value1 = "nameid-format:unspecified");
	}

	@description = "This is a use case for LPS-50747."
	@priority = "5"
	test ValidateVulnerabilitiesXMLAttacks {
		property test.name.skip.portal.instance = "SAML#ValidateVulnerabilitiesXMLAttacks";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		var adminEditURL = Navigator.getCurrentURL();

		var maliciousURL = '''
				${adminEditURL}/&_15_content=%3C!DOCTYPE%20lolz%20%5B%0A%3C!ENTITY%20lol%20%22lol%22%3E%0A%3C!ENTITY%20lol2%20%22%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%22%3E%0A%3C!ENTITY%20lol3%20%22%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%22%3E%0A%3C!ENTITY%20lol4%20%22%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%22%3E%0A%3C!ENTITY%20lol5%20%22%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%22%3E%0A%3C!ENTITY%20lol6%20%22%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%22%3E%0A%3C!ENTITY%20lol7%20%22%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%22%3E%0A%3C!ENTITY%20lol8%20%22%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%22%3E%0A%3C!ENTITY%20lol9%20%22%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%22%3E%0A%5D%3E%0A%3Clolz%3E%26lol9%3B%3C%2Flolz%3E
			''';

		Navigator.openSpecificURL(url = "${maliciousURL}");

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.openURL();

		User.viewLoggedInPG();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		var adminEditURL = Navigator.getCurrentURL();

		Navigator.openSpecificURL(url = "${maliciousURL}");

		WebContent.addCP(
			webContentContent = "Web Content Content 2",
			webContentTitle = "Web Content Title 2");

		PortletEntry.publish();
	}

	@description = "This is a use case for LPS-110450."
	@priority = "5"
	test VerifyErrorMessageInSaas {
		property osgi.modules.includes = "saml-saas";
		property test.name.skip.portal.instance = "SAML#VerifyErrorMessageInSaas";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "SAML Configuration",
			configurationScope = "System Scope");

		FormFields.disableCheckbox(fieldName = "Enable Identity Provider Role To Be Configured");

		SystemSettings.saveConfiguration();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		PortalInstances.viewCP(virtualHost = "www.able.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		MouseOver(locator1 = "Icon#TOOLTIP");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#TOOLTIP",
			value1 = "Identity provider is not supported in SaaS mode, so the role has been disabled.");
	}

	@description = "Sign into portal by executing a IdP initiated SSO login. After a successful login, the IdP will redirect to the SP. If the same users with the same email address are present on both instances, it will authenticate and show the SP. SAML can authenticate across major portal versions, that is, the IdP can be Portal 6.1 EE GA3 and the SP can be Portal 6.2. EE GA1. For testing purposes, it is obvious if the authentication succeeds or fails if the IdP and SP are different portal versions."
	@priority = "4"
	test ViewIdPInitiatedSSO {
		property test.name.skip.portal.instance = "SAML#ViewIdPInitiatedSSO";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		// Verify SP is logged in

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG();

		// Logout SP and verify SP is logged out

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}

	@description = "LPS-50220 - IdP initiated SSO login should work regardless if 'Remember Me' is checked or not."
	@priority = "4"
	test ViewIdPInitiatedSSOWithRememberMeChecked {
		property test.name.skip.portal.instance = "SAML#ViewIdPInitiatedSSOWithRememberMeChecked";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		// Verify SP is logged in

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG();

		// Logout SP and verify SP is logged out

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}

	@ignore = "true"
	@priority = "4"
	test ViewSingleLogoutAndForceAuthWithMultipleSPs {
		property app.server.bundles.size = "2";
		property databases.size = "2";
		property test.name.skip.portal.instance = "SAML#ViewSingleLogoutAndForceAuthWithMultipleSPs";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp2",
			spURL = "http://www.baker.com:10080");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		Navigator.gotoLoginPage();

		User.viewLoggedInPG();

		// Initiate Single Logout for first SP

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();

		// Verify second SP is also logged out

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		User.loginPG(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProviderConnections();

		SAMLPortlet.configureIdentityProviderConnection(
			forceAuthn = "enable",
			samlEntityID = "samlidp");

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		Navigator.gotoLoginPage();

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProviderConnections();

		SAMLPortlet.configureIdentityProviderConnection(
			forceAuthn = "enable",
			samlEntityID = "samlidp");

		User.logoutPG(specificURL = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		User.loginPG(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		Navigator.gotoLoginPage();

		AssertElementPresent(locator1 = "TextInput#EMAIL_ADDRESS");
	}

	@description = "LPS-49666 - SAML Single Logout should support HTTP-POST binding."
	@priority = "4"
	test ViewSingleLogoutHTTPPostBindingInConsole {
		property test.name.skip.portal.instance = "SAML#ViewSingleLogoutHTTPPostBindingInConsole";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration",
			categoryPriority = "DEBUG");

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		AssertConsoleTextPresent(value1 = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST");
	}

	@description = "Sign into portal by executing a SP initiated SSO login. This is done by clicking on the 'Sign In' link in the dockbar on the SP. After the SP is logged in, and if both instances has the same user and email address, the IdP will also be logged in."
	@priority = "4"
	test ViewSPInitiatedSSO {
		property test.name.skip.portal.instance = "SAML#ViewSPInitiatedSSO";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/");

		User.logoutPG();

		User.viewLoggedOutPG();

		// Initiate Single Sign-On via SP

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com");

		User.viewLoggedInPG();

		// Verify IdP is also logged in

		Navigator.openURL();

		User.viewLoggedInPG();

		// Initiate Single Logout via SP

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}

	@priority = "4"
	test ViewSPInitiatedSSOWithMultipleIdPsAndAssertRenderLoginPortletWithoutIdpsMatched {
		property app.server.bundles.size = "2";
		property databases.size = "2";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "SAML#ViewSPInitiatedSSOWithMultipleIdPsAndAssertRenderLoginPortletWithoutIdpsMatched";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsIdP(
			idpURL = "http://www.able.com:9080",
			samlEntityID = "samlidp2");

		SAML.configureLiferaySAMLAsSP(
			samlEntityID = "samlsp",
			spURL = "http://www.baker.com:10080");

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.connectSPAndIdP(
			idpEntityID = "samlidp2",
			idpURL = "http://www.able.com:9080",
			spEntityID = "samlsp",
			spURL = "http://www.baker.com:10080");

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Initiate Single Sign-On via SP with first IdP

		SAML.executeSPInitiatedSSO(
			idpName = "samlidp",
			samlMultiIdPs = "true",
			specificURL = "http://www.baker.com:10080");

		User.viewLoggedInPG();

		// Verify first IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG();

		// Initiate Single Logout via SP with first IdP

		User.logoutPG(specificURL = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		// Verify first IdP is logged out

		Navigator.openURL();

		User.viewLoggedOutPG();

		// Initiate Single Sign-On via SP with second IdP

		SAML.executeSPInitiatedSSO(
			idpName = "samlidp2",
			samlMultiIdPs = "true",
			specificURL = "http://www.baker.com:10080");

		User.viewLoggedInPG();

		// Verify second IdP is logged in

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User.viewLoggedInPG();

		// Initiate Single Logout via SP with second IdP

		User.logoutPG(specificURL = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		// Verify second IdP is logged out

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		User.loginPG(
			idpName = "samlidp",
			password = "test",
			samlMultiIdPs = "true",
			specificURL = "http://www.baker.com:10080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoIdentityProviderConnections();

		SAMLPortlet.deleteSAMLConnection(samlEntityID = "samlidp");

		SAMLNavigation.gotoIdentityProviderConnections();

		SAMLPortlet.deleteSAMLConnection(samlEntityID = "samlidp2");

		SAMLNavigation.gotoGeneral();

		AssertTextEquals(
			locator1 = "CPSAMLAdmin#INFO_MESSAGE",
			value1 = "You must configure at least one identity provider connection for SAML to function.");

		User.logoutPG(specificURL = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		User.loginPG(
			password = "test",
			specificURL = "http://www.baker.com:10080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "SAML Admin");

		SAMLNavigation.gotoServiceProvider();

		SAMLPortlet.configureServiceProvider(allowShowingTheLoginPortlet = "disable");

		User.logoutPG(specificURL = "http://www.baker.com:10080");

		User.viewLoggedOutPG();

		Navigator.gotoLoginPage();

		AssertTextEquals(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "No identity provider is available to sign you in.");
	}

}